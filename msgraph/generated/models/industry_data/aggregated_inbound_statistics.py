from __future__ import annotations
from kiota_abstractions.serialization import AdditionalDataHolder, Parsable, ParseNode, SerializationWriter
from typing import Any, Callable, Dict, List, Optional, TYPE_CHECKING, Union

if TYPE_CHECKING:
    from . import industry_data_run_role_count_metric

class AggregatedInboundStatistics(AdditionalDataHolder, Parsable):
    def __init__(self,) -> None:
        """
        Instantiates a new aggregatedInboundStatistics and sets the default values.
        """
        # Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
        self._additional_data: Dict[str, Any] = {}

        # The aggregate count of errors encountered by activities during this run.
        self._errors: Optional[int] = None
        # The aggregate count of active inbound groups processed during the run.
        self._groups: Optional[int] = None
        # The aggregate count of active people matched to an Azure Active Directory user, by role.
        self._matched_people_by_role: Optional[List[industry_data_run_role_count_metric.IndustryDataRunRoleCountMetric]] = None
        # The aggregate count of active inbound memberships processed during the run.
        self._memberships: Optional[int] = None
        # The OdataType property
        self._odata_type: Optional[str] = None
        # The aggregate count of active inbound organizations processed during the run.
        self._organizations: Optional[int] = None
        # The aggregate count of active inbound people processed during the run.
        self._people: Optional[int] = None
        # The aggregate count of active people not matched to an Azure Active Directory user, by role.
        self._unmatched_people_by_role: Optional[List[industry_data_run_role_count_metric.IndustryDataRunRoleCountMetric]] = None
        # The aggregate count of warnings generated by activities during this run.
        self._warnings: Optional[int] = None
    
    @property
    def additional_data(self,) -> Dict[str, Any]:
        """
        Gets the additionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
        Returns: Dict[str, Any]
        """
        return self._additional_data
    
    @additional_data.setter
    def additional_data(self,value: Dict[str, Any]) -> None:
        """
        Sets the additionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
        Args:
            value: Value to set for the AdditionalData property.
        """
        self._additional_data = value
    
    @staticmethod
    def create_from_discriminator_value(parse_node: Optional[ParseNode] = None) -> AggregatedInboundStatistics:
        """
        Creates a new instance of the appropriate class based on discriminator value
        Args:
            parseNode: The parse node to use to read the discriminator value and create the object
        Returns: AggregatedInboundStatistics
        """
        if parse_node is None:
            raise Exception("parse_node cannot be undefined")
        return AggregatedInboundStatistics()
    
    @property
    def errors(self,) -> Optional[int]:
        """
        Gets the errors property value. The aggregate count of errors encountered by activities during this run.
        Returns: Optional[int]
        """
        return self._errors
    
    @errors.setter
    def errors(self,value: Optional[int] = None) -> None:
        """
        Sets the errors property value. The aggregate count of errors encountered by activities during this run.
        Args:
            value: Value to set for the errors property.
        """
        self._errors = value
    
    def get_field_deserializers(self,) -> Dict[str, Callable[[ParseNode], None]]:
        """
        The deserialization information for the current model
        Returns: Dict[str, Callable[[ParseNode], None]]
        """
        from . import industry_data_run_role_count_metric

        fields: Dict[str, Callable[[Any], None]] = {
            "errors": lambda n : setattr(self, 'errors', n.get_int_value()),
            "groups": lambda n : setattr(self, 'groups', n.get_int_value()),
            "matchedPeopleByRole": lambda n : setattr(self, 'matched_people_by_role', n.get_collection_of_object_values(industry_data_run_role_count_metric.IndustryDataRunRoleCountMetric)),
            "memberships": lambda n : setattr(self, 'memberships', n.get_int_value()),
            "@odata.type": lambda n : setattr(self, 'odata_type', n.get_str_value()),
            "organizations": lambda n : setattr(self, 'organizations', n.get_int_value()),
            "people": lambda n : setattr(self, 'people', n.get_int_value()),
            "unmatchedPeopleByRole": lambda n : setattr(self, 'unmatched_people_by_role', n.get_collection_of_object_values(industry_data_run_role_count_metric.IndustryDataRunRoleCountMetric)),
            "warnings": lambda n : setattr(self, 'warnings', n.get_int_value()),
        }
        return fields
    
    @property
    def groups(self,) -> Optional[int]:
        """
        Gets the groups property value. The aggregate count of active inbound groups processed during the run.
        Returns: Optional[int]
        """
        return self._groups
    
    @groups.setter
    def groups(self,value: Optional[int] = None) -> None:
        """
        Sets the groups property value. The aggregate count of active inbound groups processed during the run.
        Args:
            value: Value to set for the groups property.
        """
        self._groups = value
    
    @property
    def matched_people_by_role(self,) -> Optional[List[industry_data_run_role_count_metric.IndustryDataRunRoleCountMetric]]:
        """
        Gets the matchedPeopleByRole property value. The aggregate count of active people matched to an Azure Active Directory user, by role.
        Returns: Optional[List[industry_data_run_role_count_metric.IndustryDataRunRoleCountMetric]]
        """
        return self._matched_people_by_role
    
    @matched_people_by_role.setter
    def matched_people_by_role(self,value: Optional[List[industry_data_run_role_count_metric.IndustryDataRunRoleCountMetric]] = None) -> None:
        """
        Sets the matchedPeopleByRole property value. The aggregate count of active people matched to an Azure Active Directory user, by role.
        Args:
            value: Value to set for the matched_people_by_role property.
        """
        self._matched_people_by_role = value
    
    @property
    def memberships(self,) -> Optional[int]:
        """
        Gets the memberships property value. The aggregate count of active inbound memberships processed during the run.
        Returns: Optional[int]
        """
        return self._memberships
    
    @memberships.setter
    def memberships(self,value: Optional[int] = None) -> None:
        """
        Sets the memberships property value. The aggregate count of active inbound memberships processed during the run.
        Args:
            value: Value to set for the memberships property.
        """
        self._memberships = value
    
    @property
    def odata_type(self,) -> Optional[str]:
        """
        Gets the @odata.type property value. The OdataType property
        Returns: Optional[str]
        """
        return self._odata_type
    
    @odata_type.setter
    def odata_type(self,value: Optional[str] = None) -> None:
        """
        Sets the @odata.type property value. The OdataType property
        Args:
            value: Value to set for the odata_type property.
        """
        self._odata_type = value
    
    @property
    def organizations(self,) -> Optional[int]:
        """
        Gets the organizations property value. The aggregate count of active inbound organizations processed during the run.
        Returns: Optional[int]
        """
        return self._organizations
    
    @organizations.setter
    def organizations(self,value: Optional[int] = None) -> None:
        """
        Sets the organizations property value. The aggregate count of active inbound organizations processed during the run.
        Args:
            value: Value to set for the organizations property.
        """
        self._organizations = value
    
    @property
    def people(self,) -> Optional[int]:
        """
        Gets the people property value. The aggregate count of active inbound people processed during the run.
        Returns: Optional[int]
        """
        return self._people
    
    @people.setter
    def people(self,value: Optional[int] = None) -> None:
        """
        Sets the people property value. The aggregate count of active inbound people processed during the run.
        Args:
            value: Value to set for the people property.
        """
        self._people = value
    
    def serialize(self,writer: SerializationWriter) -> None:
        """
        Serializes information the current object
        Args:
            writer: Serialization writer to use to serialize this model
        """
        if writer is None:
            raise Exception("writer cannot be undefined")
        writer.write_str_value("@odata.type", self.odata_type)
        writer.write_additional_data_value(self.additional_data)
    
    @property
    def unmatched_people_by_role(self,) -> Optional[List[industry_data_run_role_count_metric.IndustryDataRunRoleCountMetric]]:
        """
        Gets the unmatchedPeopleByRole property value. The aggregate count of active people not matched to an Azure Active Directory user, by role.
        Returns: Optional[List[industry_data_run_role_count_metric.IndustryDataRunRoleCountMetric]]
        """
        return self._unmatched_people_by_role
    
    @unmatched_people_by_role.setter
    def unmatched_people_by_role(self,value: Optional[List[industry_data_run_role_count_metric.IndustryDataRunRoleCountMetric]] = None) -> None:
        """
        Sets the unmatchedPeopleByRole property value. The aggregate count of active people not matched to an Azure Active Directory user, by role.
        Args:
            value: Value to set for the unmatched_people_by_role property.
        """
        self._unmatched_people_by_role = value
    
    @property
    def warnings(self,) -> Optional[int]:
        """
        Gets the warnings property value. The aggregate count of warnings generated by activities during this run.
        Returns: Optional[int]
        """
        return self._warnings
    
    @warnings.setter
    def warnings(self,value: Optional[int] = None) -> None:
        """
        Sets the warnings property value. The aggregate count of warnings generated by activities during this run.
        Args:
            value: Value to set for the warnings property.
        """
        self._warnings = value
    

