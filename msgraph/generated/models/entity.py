from __future__ import annotations
from dataclasses import dataclass, field
from kiota_abstractions.serialization import AdditionalDataHolder, Parsable, ParseNode, SerializationWriter
from typing import Any, Callable, Dict, List, Optional, TYPE_CHECKING, Union

if TYPE_CHECKING:
    from . import aad_user_conversation_member, access_package, access_package_assignment, access_package_assignment_policy, access_package_assignment_request, access_package_assignment_request_workflow_extension, access_package_assignment_resource_role, access_package_assignment_workflow_extension, access_package_catalog, access_package_resource, access_package_resource_environment, access_package_resource_request, access_package_resource_role, access_package_resource_role_scope, access_package_resource_scope, access_package_subject, access_review, access_review_decision, access_review_history_definition, access_review_history_instance, access_review_instance, access_review_instance_decision_item, access_review_policy, access_review_reviewer, access_review_schedule_definition, access_review_set, access_review_stage, active_directory_windows_autopilot_deployment_profile, activity_based_timeout_policy, activity_history_item, activity_statistics, add_large_gallery_view_operation, administrative_unit, admin_consent_request_policy, admin_report_settings, admin_windows, admin_windows_updates, advanced_threat_protection_onboarding_device_setting_state, advanced_threat_protection_onboarding_state_summary, agreement, agreement_acceptance, agreement_file, agreement_file_localization, agreement_file_properties, agreement_file_version, alert, allowed_data_location, allowed_value, android_certificate_profile_base, android_compliance_policy, android_custom_configuration, android_device_compliance_local_action_base, android_device_compliance_local_action_lock_device, android_device_compliance_local_action_lock_device_with_passcode, android_device_owner_certificate_profile_base, android_device_owner_compliance_policy, android_device_owner_derived_credential_authentication_configuration, android_device_owner_enrollment_profile, android_device_owner_enterprise_wi_fi_configuration, android_device_owner_general_device_configuration, android_device_owner_imported_p_f_x_certificate_profile, android_device_owner_pkcs_certificate_profile, android_device_owner_scep_certificate_profile, android_device_owner_trusted_root_certificate, android_device_owner_vpn_configuration, android_device_owner_wi_fi_configuration, android_eas_email_profile_configuration, android_enterprise_wi_fi_configuration, android_for_work_app, android_for_work_app_configuration_schema, android_for_work_certificate_profile_base, android_for_work_compliance_policy, android_for_work_custom_configuration, android_for_work_eas_email_profile_base, android_for_work_enrollment_profile, android_for_work_enterprise_wi_fi_configuration, android_for_work_general_device_configuration, android_for_work_gmail_eas_configuration, android_for_work_imported_p_f_x_certificate_profile, android_for_work_mobile_app_configuration, android_for_work_nine_work_eas_configuration, android_for_work_pkcs_certificate_profile, android_for_work_scep_certificate_profile, android_for_work_settings, android_for_work_trusted_root_certificate, android_for_work_vpn_configuration, android_for_work_wi_fi_configuration, android_general_device_configuration, android_imported_p_f_x_certificate_profile, android_lob_app, android_managed_app_protection, android_managed_app_registration, android_managed_store_account_enterprise_settings, android_managed_store_app, android_managed_store_app_configuration, android_managed_store_app_configuration_schema, android_managed_store_web_app, android_oma_cp_configuration, android_pkcs_certificate_profile, android_scep_certificate_profile, android_store_app, android_trusted_root_certificate, android_vpn_configuration, android_wi_fi_configuration, android_work_profile_certificate_profile_base, android_work_profile_compliance_policy, android_work_profile_custom_configuration, android_work_profile_eas_email_profile_base, android_work_profile_enterprise_wi_fi_configuration, android_work_profile_general_device_configuration, android_work_profile_gmail_eas_configuration, android_work_profile_nine_work_eas_configuration, android_work_profile_pkcs_certificate_profile, android_work_profile_scep_certificate_profile, android_work_profile_trusted_root_certificate, android_work_profile_vpn_configuration, android_work_profile_wi_fi_configuration, anonymous_guest_conversation_member, aosp_device_owner_certificate_profile_base, aosp_device_owner_compliance_policy, aosp_device_owner_device_configuration, aosp_device_owner_enterprise_wi_fi_configuration, aosp_device_owner_pkcs_certificate_profile, aosp_device_owner_scep_certificate_profile, aosp_device_owner_trusted_root_certificate, aosp_device_owner_wi_fi_configuration, apple_device_features_configuration_base, apple_enrollment_profile_assignment, apple_expedited_checkin_configuration_base, apple_managed_identity_provider, apple_push_notification_certificate, apple_user_initiated_enrollment_profile, apple_vpn_configuration, apple_vpp_token_troubleshooting_event, application, application_segment, application_sign_in_detailed_summary, application_sign_in_summary, application_template, approval, approval_step, approval_workflow_provider, app_consent_approval_route, app_consent_request, app_credential_sign_in_activity, app_log_collection_request, app_management_policy, app_role_assignment, app_scope, app_vulnerability_managed_device, app_vulnerability_mobile_app, app_vulnerability_task, assignment_filter_evaluation_status_details, associated_team_info, attachment, attachment_base, attachment_session, attack_simulation_operation, attack_simulation_root, attendance_record, attribute_mapping_function_schema, attribute_set, audio_routing_group, audit_event, authentication, authentication_combination_configuration, authentication_context_class_reference, authentication_events_flow, authentication_events_policy, authentication_event_listener, authentication_flows_policy, authentication_listener, authentication_method, authentication_methods_policy, authentication_methods_root, authentication_method_configuration, authentication_method_mode_detail, authentication_method_target, authentication_strength_policy, authentication_strength_root, authored_note, authorization_policy, azure_a_d_windows_autopilot_deployment_profile, azure_communication_services_user_conversation_member, b2c_authentication_methods_policy, b2c_identity_user_flow, b2x_identity_user_flow, base_item, base_item_version, bitlocker, bitlocker_recovery_key, booking_appointment, booking_business, booking_currency, booking_customer, booking_custom_question, booking_named_entity, booking_person, booking_service, booking_staff_member, browser_shared_cookie, browser_site, browser_site_list, built_in_identity_provider, business_flow, business_flow_template, business_scenario, business_scenario_planner, business_scenario_plan_reference, business_scenario_task, calendar, calendar_group, calendar_permission, calendar_sharing_message, call, call_activity_statistics, call_recording, call_transcript, cancel_media_processing_operation, canvas_layout, cart_to_class_association, certificate_authority_as_entity, certificate_authority_path, certificate_based_application_configuration, certificate_based_auth_configuration, certificate_connector_details, change_tracked_entity, channel, chat, chat_activity_statistics, chat_message, chat_message_hosted_content, chat_message_info, checklist_item, chrome_o_s_onboarding_settings, claims_mapping_policy, classification_job_response, cloud_app_security_profile, cloud_pc_audit_event, cloud_pc_bulk_action, cloud_pc_bulk_power_off, cloud_pc_bulk_power_on, cloud_pc_cross_cloud_government_organization_mapping, cloud_pc_device_image, cloud_pc_export_job, cloud_pc_external_partner_setting, cloud_pc_gallery_image, cloud_pc_on_premises_connection, cloud_pc_organization_settings, cloud_pc_provisioning_policy, cloud_pc_provisioning_policy_assignment, cloud_pc_reports, cloud_pc_service_plan, cloud_pc_shared_use_service_plan, cloud_pc_snapshot, cloud_pc_supported_region, cloud_pc_user_setting, cloud_pc_user_setting_assignment, cloud_p_c, cloud_p_c_connectivity_issue, column_definition, column_link, comanagement_eligible_device, command, comms_operation, company_subscription, compliance_management_partner, conditional_access_policy, conditional_access_root, conditional_access_template, config_manager_collection, connected_organization, connection_operation, connector, connector_group, contact, contact_folder, contact_merge_suggestions, content_sharing_session, content_type, continuous_access_evaluation_policy, contract, conversation, conversation_member, conversation_thread, cors_configuration_v2, country_named_location, credential_usage_summary, credential_user_registration_count, credential_user_registration_details, cross_tenant_access_policy, cross_tenant_access_policy_configuration_default, custom_access_package_workflow_extension, custom_app_scope, custom_authentication_extension, custom_callout_extension, custom_extension_handler, custom_extension_stage_setting, custom_security_attribute_definition, data_classification_service, data_loss_prevention_policy, data_policy_operation, data_sharing_consent, default_device_compliance_policy, default_managed_app_protection, default_user_role_override, delegated_admin_access_assignment, delegated_admin_customer, delegated_admin_relationship, delegated_admin_relationship_operation, delegated_admin_relationship_request, delegated_admin_service_management_detail, delegated_permission_classification, deleted_item_container, deleted_team, delta_participants, dep_enrollment_base_profile, dep_enrollment_profile, dep_i_o_s_enrollment_profile, dep_mac_o_s_enrollment_profile, dep_onboarding_setting, detected_app, device, device_and_app_management_assignment_filter, device_and_app_management_role_assignment, device_and_app_management_role_definition, device_app_management, device_app_management_task, device_category, device_comanagement_authority_configuration, device_compliance_action_item, device_compliance_device_overview, device_compliance_device_status, device_compliance_policy, device_compliance_policy_assignment, device_compliance_policy_device_state_summary, device_compliance_policy_group_assignment, device_compliance_policy_policy_set_item, device_compliance_policy_setting_state_summary, device_compliance_policy_state, device_compliance_scheduled_action_for_rule, device_compliance_script, device_compliance_script_device_state, device_compliance_script_run_summary, device_compliance_setting_state, device_compliance_user_overview, device_compliance_user_status, device_configuration, device_configuration_assignment, device_configuration_conflict_summary, device_configuration_device_overview, device_configuration_device_state_summary, device_configuration_device_status, device_configuration_group_assignment, device_configuration_policy_set_item, device_configuration_state, device_configuration_user_overview, device_configuration_user_state_summary, device_configuration_user_status, device_custom_attribute_shell_script, device_enrollment_configuration, device_enrollment_limit_configuration, device_enrollment_notification_configuration, device_enrollment_platform_restrictions_configuration, device_enrollment_platform_restriction_configuration, device_enrollment_windows_hello_for_business_configuration, device_health_script, device_health_script_assignment, device_health_script_device_state, device_health_script_run_summary, device_install_state, device_local_credential_info, device_log_collection_response, device_management_abstract_complex_setting_definition, device_management_abstract_complex_setting_instance, device_management_autopilot_event, device_management_autopilot_policy_status_detail, device_management_boolean_setting_instance, device_management_cached_report_configuration, device_management_collection_setting_definition, device_management_collection_setting_instance, device_management_complex_setting_definition, device_management_complex_setting_instance, device_management_compliance_action_item, device_management_compliance_policy, device_management_compliance_scheduled_action_for_rule, device_management_configuration_category, device_management_configuration_choice_setting_collection_definition, device_management_configuration_choice_setting_definition, device_management_configuration_policy, device_management_configuration_policy_assignment, device_management_configuration_policy_policy_set_item, device_management_configuration_policy_template, device_management_configuration_redirect_setting_definition, device_management_configuration_setting, device_management_configuration_setting_definition, device_management_configuration_setting_group_collection_definition, device_management_configuration_setting_group_definition, device_management_configuration_setting_template, device_management_configuration_simple_setting_collection_definition, device_management_configuration_simple_setting_definition, device_management_derived_credential_settings, device_management_domain_join_connector, device_management_exchange_connector, device_management_exchange_on_premises_policy, device_management_export_job, device_management_integer_setting_instance, device_management_intent, device_management_intent_assignment, device_management_intent_device_setting_state_summary, device_management_intent_device_state, device_management_intent_device_state_summary, device_management_intent_setting_category, device_management_intent_user_state, device_management_intent_user_state_summary, device_management_partner, device_management_reports, device_management_resource_access_profile_assignment, device_management_resource_access_profile_base, device_management_reusable_policy_setting, device_management_script, device_management_script_assignment, device_management_script_device_state, device_management_script_group_assignment, device_management_script_policy_set_item, device_management_script_run_summary, device_management_script_user_state, device_management_setting_category, device_management_setting_definition, device_management_setting_instance, device_management_string_setting_instance, device_management_template, device_management_template_insights_definition, device_management_template_setting_category, device_management_troubleshooting_event, device_registration_policy, device_setup_configuration, device_shell_script, directory, directory_audit, directory_definition, directory_object, directory_object_partner_reference, directory_role, directory_role_access_review_policy, directory_role_template, directory_setting, directory_setting_template, dlp_evaluate_policies_job_response, document, document_comment, document_comment_reply, document_set_version, domain, domain_dns_cname_record, domain_dns_mx_record, domain_dns_record, domain_dns_srv_record, domain_dns_txt_record, domain_dns_unavailable_record, domain_security_profile, drive, drive_item, drive_item_version, eas_email_profile_configuration_base, edge, edition_upgrade_configuration, educational_activity, education_assignment, education_assignment_defaults, education_assignment_resource, education_assignment_settings, education_category, education_class, education_feedback_outcome, education_feedback_resource_outcome, education_grading_category, education_organization, education_outcome, education_points_outcome, education_rubric, education_rubric_outcome, education_school, education_submission, education_submission_resource, education_synchronization_error, education_synchronization_profile, education_synchronization_profile_status, education_user, email_activity_statistics, email_authentication_method, email_authentication_method_configuration, email_file_assessment_request, embedded_s_i_m_activation_code_pool, embedded_s_i_m_activation_code_pool_assignment, embedded_s_i_m_device_state, employee_experience_user, endpoint, enrollment_configuration_assignment, enrollment_profile, enrollment_restrictions_configuration_policy_set_item, enrollment_troubleshooting_event, enterprise_code_signing_certificate, entitlement_management, entitlement_management_settings, evaluate_label_job_response, event, event_message, event_message_request, event_message_response, exact_match_data_store, exact_match_data_store_base, exact_match_job_base, exact_match_lookup_job, exact_match_session, exact_match_session_base, exact_match_upload_agent, extension, extension_property, external, external_connection, external_domain_name, external_group, external_identities_policy, external_item, external_meeting_registrant, external_meeting_registration, external_users_self_service_sign_up_events_flow, e_book_install_summary, feature_rollout_policy, federated_identity_credential, fido2_authentication_method, fido2_authentication_method_configuration, fido2_combination_configuration, field_value_set, file_assessment_request, file_attachment, file_classification_request, file_security_profile, filter_operator_schema, focus_activity_statistics, governance_insight, governance_policy_template, governance_resource, governance_role_assignment, governance_role_assignment_request, governance_role_definition, governance_role_setting, governance_subject, group, group_lifecycle_policy, group_policy_category, group_policy_configuration, group_policy_configuration_assignment, group_policy_definition, group_policy_definition_file, group_policy_definition_value, group_policy_migration_report, group_policy_object_file, group_policy_operation, group_policy_presentation, group_policy_presentation_check_box, group_policy_presentation_combo_box, group_policy_presentation_decimal_text_box, group_policy_presentation_dropdown_list, group_policy_presentation_list_box, group_policy_presentation_long_decimal_text_box, group_policy_presentation_multi_text_box, group_policy_presentation_text, group_policy_presentation_text_box, group_policy_presentation_value, group_policy_presentation_value_boolean, group_policy_presentation_value_decimal, group_policy_presentation_value_list, group_policy_presentation_value_long_decimal, group_policy_presentation_value_multi_text, group_policy_presentation_value_text, group_policy_setting_mapping, group_policy_uploaded_definition_file, group_policy_uploaded_presentation, home_realm_discovery_policy, horizontal_section, horizontal_section_column, host_security_profile, identity_api_connector, identity_built_in_user_flow_attribute, identity_custom_user_flow_attribute, identity_provider, identity_provider_base, identity_security_defaults_enforcement_policy, identity_user_flow, identity_user_flow_attribute, identity_user_flow_attribute_assignment, impacted_resource, imported_apple_device_identity, imported_apple_device_identity_result, imported_device_identity, imported_device_identity_result, imported_windows_autopilot_device_identity, imported_windows_autopilot_device_identity_upload, inference_classification, inference_classification_override, information_protection, information_protection_label, information_protection_policy, insights_settings, internal_domain_federation, internet_explorer_mode, intune_branding_profile, intune_branding_profile_assignment, invalid_license_alert_configuration, invalid_license_alert_incident, invitation, invite_participants_operation, invoke_user_flow_listener, iosik_ev2_vpn_configuration, iosi_pad_o_s_web_clip, ios_certificate_profile, ios_certificate_profile_base, ios_compliance_policy, ios_custom_configuration, ios_derived_credential_authentication_configuration, ios_device_features_configuration, ios_eas_email_profile_configuration, ios_education_device_configuration, ios_edu_device_configuration, ios_enterprise_wi_fi_configuration, ios_expedited_checkin_configuration, ios_general_device_configuration, ios_imported_p_f_x_certificate_profile, ios_lob_app, ios_lob_app_provisioning_configuration, ios_lob_app_provisioning_configuration_assignment, ios_lob_app_provisioning_configuration_policy_set_item, ios_managed_app_protection, ios_managed_app_registration, ios_mobile_app_configuration, ios_pkcs_certificate_profile, ios_scep_certificate_profile, ios_store_app, ios_trusted_root_certificate, ios_update_configuration, ios_update_device_status, ios_vpn_configuration, ios_vpp_app, ios_vpp_app_assigned_device_license, ios_vpp_app_assigned_license, ios_vpp_app_assigned_user_license, ios_vpp_e_book, ios_vpp_e_book_assignment, ios_wi_fi_configuration, ip_application_segment, ip_named_location, ip_security_profile, item_activity, item_activity_o_l_d, item_activity_stat, item_address, item_analytics, item_attachment, item_email, item_facet, item_insights, item_patent, item_phone, item_publication, item_retention_label, job_response_base, language_proficiency, learning_assignment, learning_content, learning_course_activity, learning_provider, learning_self_initiated_course, license_details, linked_resource, list, list_item, list_item_version, localized_notification_message, long_running_operation, lookup_result_row, mac_os_vpp_app, mac_os_vpp_app_assigned_license, mac_o_s_certificate_profile_base, mac_o_s_compliance_policy, mac_o_s_custom_app_configuration, mac_o_s_custom_configuration, mac_o_s_device_features_configuration, mac_o_s_dmg_app, mac_o_s_endpoint_protection_configuration, mac_o_s_enterprise_wi_fi_configuration, mac_o_s_extensions_configuration, mac_o_s_general_device_configuration, mac_o_s_imported_p_f_x_certificate_profile, mac_o_s_lob_app, mac_o_s_mdatp_app, mac_o_s_microsoft_defender_app, mac_o_s_microsoft_edge_app, mac_o_s_office_suite_app, mac_o_s_pkcs_certificate_profile, mac_o_s_pkg_app, mac_o_s_scep_certificate_profile, mac_o_s_software_update_account_summary, mac_o_s_software_update_category_summary, mac_o_s_software_update_configuration, mac_o_s_software_update_state_summary, mac_o_s_trusted_root_certificate, mac_o_s_vpn_configuration, mac_o_s_wired_network_configuration, mac_o_s_wi_fi_configuration, mail_assessment_request, mail_folder, mail_search_folder, malware_state_for_windows_device, managed_all_device_certificate_state, managed_android_lob_app, managed_android_store_app, managed_app, managed_app_configuration, managed_app_operation, managed_app_policy, managed_app_policy_deployment_summary, managed_app_protection, managed_app_protection_policy_set_item, managed_app_registration, managed_app_status, managed_app_status_raw, managed_device, managed_device_certificate_state, managed_device_encryption_state, managed_device_mobile_app_configuration, managed_device_mobile_app_configuration_assignment, managed_device_mobile_app_configuration_device_status, managed_device_mobile_app_configuration_device_summary, managed_device_mobile_app_configuration_policy_set_item, managed_device_mobile_app_configuration_state, managed_device_mobile_app_configuration_user_status, managed_device_mobile_app_configuration_user_summary, managed_device_overview, managed_e_book, managed_e_book_assignment, managed_e_book_category, managed_i_o_s_lob_app, managed_i_o_s_store_app, managed_mobile_app, managed_mobile_lob_app, mdm_windows_information_protection_policy, mdm_windows_information_protection_policy_policy_set_item, meeting_activity_statistics, meeting_attendance_report, meeting_registrant, meeting_registrant_base, meeting_registration, meeting_registration_base, meeting_registration_question, membership_outlier_insight, mention, message, message_event, message_recipient, message_rule, message_trace, microsoft_account_user_conversation_member, microsoft_application_data_access_settings, microsoft_authenticator_authentication_method, microsoft_authenticator_authentication_method_configuration, microsoft_authenticator_authentication_method_target, microsoft_store_for_business_app, microsoft_store_for_business_contained_app, microsoft_tunnel_configuration, microsoft_tunnel_health_threshold, microsoft_tunnel_server, microsoft_tunnel_server_log_collection_response, microsoft_tunnel_site, mobile_app, mobile_app_assignment, mobile_app_category, mobile_app_content, mobile_app_content_file, mobile_app_dependency, mobile_app_install_status, mobile_app_install_summary, mobile_app_intent_and_state, mobile_app_policy_set_item, mobile_app_provisioning_config_group_assignment, mobile_app_relationship, mobile_app_supersedence, mobile_app_troubleshooting_event, mobile_contained_app, mobile_lob_app, mobile_threat_defense_connector, mobility_management_policy, multi_value_legacy_extended_property, mute_participants_operation, mute_participant_operation, named_location, ndes_connector, note, notebook, notification, notification_message_template, no_mfa_on_role_activation_alert_configuration, no_mfa_on_role_activation_alert_incident, offer_shift_request, office365_active_user_counts, office365_active_user_detail, office365_groups_activity_counts, office365_groups_activity_detail, office365_groups_activity_file_counts, office365_groups_activity_group_counts, office365_groups_activity_storage, office365_services_user_counts, office_graph_insights, office_suite_app, onenote, onenote_entity_base_model, onenote_entity_hierarchy_model, onenote_entity_schema_object_model, onenote_operation, onenote_page, onenote_resource, onenote_section, online_meeting, on_attribute_collection_listener, on_authentication_method_load_start_listener, on_interactive_auth_flow_start_listener, on_premises_agent, on_premises_agent_group, on_premises_conditional_access_settings, on_premises_directory_synchronization, on_premises_publishing_profile, on_token_issuance_start_custom_extension, on_token_issuance_start_listener, on_user_create_start_listener, open_id_connect_identity_provider, open_id_connect_provider, open_shift, open_shift_change_request, open_type_extension, operation, organization, organizational_branding, organizational_branding_localization, organizational_branding_properties, organization_settings, org_contact, outlook_category, outlook_item, outlook_task, outlook_task_folder, outlook_task_group, outlook_user, o_auth2_permission_grant, participant, participant_joining_notification, participant_left_notification, passwordless_microsoft_authenticator_authentication_method, password_authentication_method, payload, payload_compatible_assignment_filter, payload_response, permission, permission_grant_condition_set, permission_grant_policy, person, person_annotation, person_annual_event, person_award, person_certification, person_extension, person_interest, person_name, person_responsibility, person_website, phone_authentication_method, pinned_chat_message_info, place, planner, planner_assigned_to_task_board_task_format, planner_bucket, planner_bucket_task_board_task_format, planner_delta, planner_group, planner_plan, planner_plan_configuration, planner_plan_configuration_localization, planner_plan_details, planner_progress_task_board_task_format, planner_roster, planner_roster_member, planner_task, planner_task_configuration, planner_task_details, planner_user, play_prompt_operation, policy_base, policy_set, policy_set_assignment, policy_set_item, post, presence, presentation, printer, printer_base, printer_create_operation, printer_share, print_connector, print_document, print_job, print_operation, print_service, print_service_endpoint, print_task, print_task_definition, print_task_trigger, print_usage, print_usage_by_printer, print_usage_by_user, privileged_access, privileged_access_group, privileged_access_group_assignment_schedule, privileged_access_group_assignment_schedule_instance, privileged_access_group_assignment_schedule_request, privileged_access_group_eligibility_schedule, privileged_access_group_eligibility_schedule_instance, privileged_access_group_eligibility_schedule_request, privileged_access_root, privileged_access_schedule, privileged_access_schedule_instance, privileged_access_schedule_request, privileged_approval, privileged_operation_event, privileged_role, privileged_role_assignment, privileged_role_assignment_request, privileged_role_settings, privileged_role_summary, privileged_signup_status, privilege_management_elevation, profile, profile_card_property, profile_photo, program, program_control, program_control_type, project_participation, pronouns_settings, provider_tenant_setting, provisioning_object_summary, published_resource, purchase_invoice_line, rbac_application, rbac_application_multiple, recommendation, recommendation_base, record_operation, redundant_assignment_alert_configuration, redundant_assignment_alert_incident, reference_attachment, regional_and_language_settings, relying_party_detailed_summary, remote_action_audit, remote_assistance_partner, remote_assistance_settings, report_root, request, resource_operation, resource_specific_permission_grant, restricted_apps_violation, rich_long_running_operation, risky_service_principal, risky_service_principal_history_item, risky_user, risky_user_history_item, risk_detection, roles_assigned_outside_privileged_identity_management_alert_configuration, roles_assigned_outside_privileged_identity_management_alert_incident, role_assignment, role_definition, role_management_alert, role_scope_tag, role_scope_tag_auto_assignment, room, room_list, sales_credit_memo_line, sales_invoice_line, sales_order_line, sales_quote_line, saml_or_ws_fed_external_domain_federation, saml_or_ws_fed_provider, schedule, schedule_change_request, scheduling_group, schema, schema_extension, scoped_role_membership, search_entity, section_group, secure_score, secure_score_control_profile, security_action, security_baseline_category_state_summary, security_baseline_device_state, security_baseline_setting_state, security_baseline_state, security_baseline_state_summary, security_baseline_template, security_configuration_task, security_reports_root, sensitive_type, sensitivity_label, sensitivity_policy_settings, sequential_activation_renewals_alert_configuration, sequential_activation_renewals_alert_incident, service_announcement, service_announcement_attachment, service_announcement_base, service_health, service_health_issue, service_now_connection, service_principal, service_principal_creation_condition_set, service_principal_creation_policy, service_principal_risk_detection, service_principal_sign_in_activity, service_update_message, setting_state_device_summary, shared_drive_item, shared_email_domain, shared_email_domain_invitation, shared_insight, shared_p_c_configuration, shared_with_channel_team_info, sharepoint, sharepoint_settings, shift, shift_preferences, sign_in, simulation, simulation_automation, simulation_automation_run, single_value_legacy_extended_property, site, site_page, skill_proficiency, skype_for_business_user_conversation_member, skype_user_conversation_member, sms_authentication_method_configuration, sms_authentication_method_target, social_identity_provider, software_oath_authentication_method, software_oath_authentication_method_configuration, software_update_status_summary, stale_sign_in_alert_configuration, stale_sign_in_alert_incident, standard_web_part, start_hold_music_operation, stop_hold_music_operation, strong_authentication_detail, strong_authentication_phone_app_detail, sts_policy, subject_rights_request, subscribed_sku, subscribe_to_tone_operation, subscription, swap_shifts_change_request, symantec_code_signing_certificate, synchronization, synchronization_job, synchronization_schema, synchronization_template, targeted_managed_app_configuration, targeted_managed_app_configuration_policy_set_item, targeted_managed_app_policy_assignment, targeted_managed_app_protection, task_file_attachment, tax_group, team, teams_app, teams_app_definition, teams_app_icon, teams_app_installation, teams_app_settings, teams_async_operation, teams_tab, teams_template, teamwork, teamwork_bot, teamwork_device, teamwork_device_activity, teamwork_device_configuration, teamwork_device_health, teamwork_device_operation, teamwork_hosted_content, teamwork_peripheral, teamwork_tag, teamwork_tag_member, team_info, team_template, team_template_definition, telecom_expense_management_partner, temporary_access_pass_authentication_method, temporary_access_pass_authentication_method_configuration, tenant_app_management_policy, tenant_attach_r_b_a_c, tenant_relationship_access_policy_base, tenant_setup_info, terms_and_conditions, terms_and_conditions_acceptance_status, terms_and_conditions_assignment, terms_and_conditions_group_assignment, terms_of_use_container, text_classification_request, text_web_part, threat_assessment_request, threat_assessment_result, thumbnail_set, time_card, time_off, time_off_reason, time_off_request, ti_indicator, todo, todo_task, todo_task_list, token_issuance_policy, token_lifetime_policy, too_many_global_admins_assigned_to_tenant_alert_configuration, too_many_global_admins_assigned_to_tenant_alert_incident, trending, trusted_certificate_authority_as_entity_base, trust_framework_key_set, trust_framework_policy, unified_rbac_application, unified_rbac_resource_action, unified_rbac_resource_namespace, unified_rbac_resource_scope, unified_role_assignment, unified_role_assignment_multiple, unified_role_assignment_schedule, unified_role_assignment_schedule_instance, unified_role_assignment_schedule_request, unified_role_definition, unified_role_eligibility_schedule, unified_role_eligibility_schedule_instance, unified_role_eligibility_schedule_request, unified_role_management_alert, unified_role_management_alert_configuration, unified_role_management_alert_definition, unified_role_management_alert_incident, unified_role_management_policy, unified_role_management_policy_approval_rule, unified_role_management_policy_assignment, unified_role_management_policy_authentication_context_rule, unified_role_management_policy_enablement_rule, unified_role_management_policy_expiration_rule, unified_role_management_policy_notification_rule, unified_role_management_policy_rule, unified_role_schedule_base, unified_role_schedule_instance_base, unmanaged_device_discovery_task, unmute_participant_operation, unsupported_device_configuration, unsupported_group_policy_extension, update_recording_status_operation, url_assessment_request, usage_right, used_insight, user, user_account_information, user_activity, user_analytics, user_app_install_status, user_configuration, user_consent_request, user_credential_usage_details, user_experience_analytics_anomaly, user_experience_analytics_anomaly_correlation_group_overview, user_experience_analytics_anomaly_device, user_experience_analytics_app_health_application_performance, user_experience_analytics_app_health_app_performance_by_app_version, user_experience_analytics_app_health_app_performance_by_app_version_details, user_experience_analytics_app_health_app_performance_by_app_version_device_id, user_experience_analytics_app_health_app_performance_by_o_s_version, user_experience_analytics_app_health_device_model_performance, user_experience_analytics_app_health_device_performance, user_experience_analytics_app_health_device_performance_details, user_experience_analytics_app_health_o_s_version_performance, user_experience_analytics_baseline, user_experience_analytics_battery_health_app_impact, user_experience_analytics_battery_health_capacity_details, user_experience_analytics_battery_health_device_app_impact, user_experience_analytics_battery_health_device_performance, user_experience_analytics_battery_health_device_runtime_history, user_experience_analytics_battery_health_model_performance, user_experience_analytics_battery_health_os_performance, user_experience_analytics_battery_health_runtime_details, user_experience_analytics_category, user_experience_analytics_device_performance, user_experience_analytics_device_scope, user_experience_analytics_device_scores, user_experience_analytics_device_startup_history, user_experience_analytics_device_startup_process, user_experience_analytics_device_startup_process_performance, user_experience_analytics_device_timeline_event, user_experience_analytics_device_without_cloud_identity, user_experience_analytics_impacting_process, user_experience_analytics_metric, user_experience_analytics_metric_history, user_experience_analytics_model_scores, user_experience_analytics_not_autopilot_ready_device, user_experience_analytics_overview, user_experience_analytics_remote_connection, user_experience_analytics_resource_performance, user_experience_analytics_score_history, user_experience_analytics_work_from_anywhere_device, user_experience_analytics_work_from_anywhere_hardware_readiness_metric, user_experience_analytics_work_from_anywhere_metric, user_experience_analytics_work_from_anywhere_model_performance, user_flow_language_configuration, user_flow_language_page, user_insights_settings, user_install_state_summary, user_p_f_x_certificate, user_registration_details, user_scope_teams_app_installation, user_security_profile, user_settings, user_sign_in_insight, user_teamwork, vertical_section, virtual_appointment, virtual_endpoint, virtual_event, virtual_events_root, virtual_event_presenter, virtual_event_registrant, virtual_event_registration, virtual_event_registration_question, virtual_event_session, virtual_event_webinar, voice_authentication_method_configuration, voice_authentication_method_target, vpn_configuration, vpp_token, vulnerable_managed_device, web_account, web_app, web_application_segment, web_part, win32_lob_app, windows10_certificate_profile_base, windows10_compliance_policy, windows10_custom_configuration, windows10_device_firmware_configuration_interface, windows10_eas_email_profile_configuration, windows10_endpoint_protection_configuration, windows10_enrollment_completion_page_configuration, windows10_enrollment_completion_page_configuration_policy_set_item, windows10_enterprise_modern_app_management_configuration, windows10_general_configuration, windows10_imported_p_f_x_certificate_profile, windows10_mobile_compliance_policy, windows10_network_boundary_configuration, windows10_pkcs_certificate_profile, windows10_p_f_x_import_certificate_profile, windows10_secure_assessment_configuration, windows10_team_general_configuration, windows10_vpn_configuration, windows10_x_certificate_profile, windows10_x_s_c_e_p_certificate_profile, windows10_x_trusted_root_certificate, windows10_x_vpn_configuration, windows10_x_wifi_configuration, windows81_certificate_profile_base, windows81_compliance_policy, windows81_general_configuration, windows81_s_c_e_p_certificate_profile, windows81_trusted_root_certificate, windows81_vpn_configuration, windows81_wifi_import_configuration, windows_app_x, windows_assigned_access_profile, windows_autopilot_deployment_profile, windows_autopilot_deployment_profile_assignment, windows_autopilot_deployment_profile_policy_set_item, windows_autopilot_device_identity, windows_autopilot_settings, windows_certificate_profile_base, windows_defender_advanced_threat_protection_configuration, windows_defender_application_control_supplemental_policy, windows_defender_application_control_supplemental_policy_assignment, windows_defender_application_control_supplemental_policy_deployment_status, windows_defender_application_control_supplemental_policy_deployment_summary, windows_delivery_optimization_configuration, windows_device_malware_state, windows_domain_join_configuration, windows_driver_update_inventory, windows_driver_update_profile, windows_driver_update_profile_assignment, windows_feature_update_catalog_item, windows_feature_update_profile, windows_feature_update_profile_assignment, windows_health_monitoring_configuration, windows_hello_for_business_authentication_method, windows_identity_protection_configuration, windows_information_protection, windows_information_protection_app_learning_summary, windows_information_protection_app_locker_file, windows_information_protection_device_registration, windows_information_protection_network_learning_summary, windows_information_protection_policy, windows_information_protection_wipe_action, windows_kiosk_configuration, windows_malware_information, windows_managed_app_protection, windows_managed_device, windows_management_app, windows_management_app_health_state, windows_management_app_health_summary, windows_microsoft_edge_app, windows_mobile_m_s_i, windows_phone81_app_x, windows_phone81_app_x_bundle, windows_phone81_certificate_profile_base, windows_phone81_compliance_policy, windows_phone81_custom_configuration, windows_phone81_general_configuration, windows_phone81_imported_p_f_x_certificate_profile, windows_phone81_store_app, windows_phone81_s_c_e_p_certificate_profile, windows_phone81_trusted_root_certificate, windows_phone81_vpn_configuration, windows_phone_e_a_s_email_profile_configuration, windows_phone_x_a_p, windows_privacy_data_access_control_item, windows_protection_state, windows_quality_update_catalog_item, windows_quality_update_profile, windows_quality_update_profile_assignment, windows_store_app, windows_universal_app_x, windows_universal_app_x_contained_app, windows_update_catalog_item, windows_update_for_business_configuration, windows_update_state, windows_vpn_configuration, windows_web_app, windows_wifi_configuration, windows_wifi_enterprise_e_a_p_configuration, windows_wired_network_configuration, win_get_app, workbook, workbook_application, workbook_chart, workbook_chart_area_format, workbook_chart_axes, workbook_chart_axis, workbook_chart_axis_format, workbook_chart_axis_title, workbook_chart_axis_title_format, workbook_chart_data_labels, workbook_chart_data_label_format, workbook_chart_fill, workbook_chart_font, workbook_chart_gridlines, workbook_chart_gridlines_format, workbook_chart_legend, workbook_chart_legend_format, workbook_chart_line_format, workbook_chart_point, workbook_chart_point_format, workbook_chart_series, workbook_chart_series_format, workbook_chart_title, workbook_chart_title_format, workbook_comment, workbook_comment_reply, workbook_filter, workbook_format_protection, workbook_functions, workbook_function_result, workbook_named_item, workbook_operation, workbook_pivot_table, workbook_range, workbook_range_border, workbook_range_fill, workbook_range_font, workbook_range_format, workbook_range_sort, workbook_range_view, workbook_table, workbook_table_column, workbook_table_row, workbook_table_sort, workbook_worksheet, workbook_worksheet_protection, workforce_integration, workspace, work_position, x509_certificate_authentication_method_configuration, zebra_fota_artifact, zebra_fota_connector, zebra_fota_deployment
    from .call_records import call_record, segment, session
    from .device_management import alert_record, alert_rule, device_management, monitoring
    from .ediscovery import add_to_review_set_operation, case, case_export_operation, case_hold_operation, case_index_operation, case_operation, case_settings, custodian, data_source, data_source_container, ediscoveryroot, estimate_statistics_operation, legal_hold, noncustodial_data_source, purge_data_operation, review_set, review_set_query, site_source, source_collection, tag, tag_operation, unified_group_source, user_source
    from .external_connectors import connection_operation, connection_quota, external_activity, external_activity_result, external_connection, external_group, external_item, identity, schema
    from .identity_governance import custom_task_extension, lifecycle_management_settings, lifecycle_workflows_container, run, task, task_definition, task_processing_result, task_report, user_processing_result, workflow_template
    from .industry_data import azure_data_lake_connector, file_data_connector, file_validate_operation, inbound_file_flow, inbound_flow, inbound_flow_activity, industry_data_activity, industry_data_connector, industry_data_root, industry_data_run, industry_data_run_activity, outbound_flow_activity, reference_definition, role_group, source_system_definition, validate_operation, year_time_period_definition
    from .managed_tenants import aggregated_policy_compliance, app_performance, audit_event, cloud_pc_connection, cloud_pc_device, cloud_pc_overview, conditional_access_policy_coverage, credential_user_registrations_summary, device_app_performance, device_compliance_policy_setting_state_summary, device_health_status, managed_device_compliance, managed_device_compliance_trend, managed_tenant, managed_tenant_alert, managed_tenant_alert_log, managed_tenant_alert_rule, managed_tenant_alert_rule_definition, managed_tenant_api_notification, managed_tenant_email_notification, managed_tenant_ticketing_endpoint, management_action, management_action_tenant_deployment_status, management_intent, management_template, management_template_collection, management_template_collection_tenant_summary, management_template_step, management_template_step_deployment, management_template_step_tenant_summary, management_template_step_version, tenant, tenant_customized_information, tenant_detailed_information, tenant_group, tenant_tag, windows_device_malware_state, windows_protection_state
    from .networkaccess import branch_site, conditional_access_policy, conditional_access_settings, connectivity, cross_tenant_access_settings, device_link, enriched_audit_logs, forwarding_options, forwarding_policy, forwarding_policy_link, forwarding_profile, forwarding_rule, logs, m365_forwarding_rule, network_access_root, policy, policy_link, policy_rule, private_access_forwarding_rule, profile, reports, settings, tenant_status
    from .search import acronym, bookmark, qna, search_answer
    from .security import alert, article, article_indicator, artifact, case, cases_root, case_operation, data_set, data_source, data_source_container, disposition_review_stage, ediscovery_add_to_review_set_operation, ediscovery_case, ediscovery_case_settings, ediscovery_custodian, ediscovery_estimate_operation, ediscovery_export_operation, ediscovery_file, ediscovery_hold_operation, ediscovery_hold_policy, ediscovery_index_operation, ediscovery_noncustodial_data_source, ediscovery_purge_data_operation, ediscovery_review_set, ediscovery_review_set_query, ediscovery_review_tag, ediscovery_search, ediscovery_tag_operation, email_content_threat_submission, email_threat_submission, email_threat_submission_policy, email_url_threat_submission, file, file_content_threat_submission, file_threat_submission, file_url_threat_submission, host, hostname, host_component, host_cookie, host_reputation, host_tracker, incident, indicator, information_protection, information_protection_policy_setting, intelligence_profile, intelligence_profile_indicator, ip_address, labels_root, passive_dns_record, policy_base, retention_event, retention_event_type, retention_label, search, security, sensitivity_label, site_source, tag, threat_intelligence, threat_submission, threat_submission_root, triggers_root, trigger_types_root, unclassified_artifact, unified_group_source, url_threat_submission, user_source, vulnerability, vulnerability_component
    from .term_store import group, relation, set, store, term
    from .windows_updates import azure_a_d_device, catalog, catalog_entry, compliance_change, content_approval, deployment, deployment_audience, driver_update_catalog_entry, feature_update_catalog_entry, operational_insights_connection, quality_update_catalog_entry, resource_connection, software_update_catalog_entry, updatable_asset, updatable_asset_group, update_policy

@dataclass
class Entity(AdditionalDataHolder, Parsable):
    # Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
    additional_data: Dict[str, Any] = field(default_factory=dict)

    # The unique identifier for an entity. Read-only.
    id: Optional[str] = None
    # The OdataType property
    odata_type: Optional[str] = None
    
    @staticmethod
    def create_from_discriminator_value(parse_node: Optional[ParseNode] = None) -> Entity:
        """
        Creates a new instance of the appropriate class based on discriminator value
        Args:
            parseNode: The parse node to use to read the discriminator value and create the object
        Returns: Entity
        """
        if not parse_node:
            raise TypeError("parse_node cannot be null.")
        try:
            mapping_value = parse_node.get_child_node("@odata.type").get_str_value()
        except AttributeError:
            mapping_value = None
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.aadUserConversationMember".casefold():
            from . import aad_user_conversation_member

            return aad_user_conversation_member.AadUserConversationMember()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.accessPackage".casefold():
            from . import access_package

            return access_package.AccessPackage()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.accessPackageAssignment".casefold():
            from . import access_package_assignment

            return access_package_assignment.AccessPackageAssignment()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.accessPackageAssignmentPolicy".casefold():
            from . import access_package_assignment_policy

            return access_package_assignment_policy.AccessPackageAssignmentPolicy()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.accessPackageAssignmentRequest".casefold():
            from . import access_package_assignment_request

            return access_package_assignment_request.AccessPackageAssignmentRequest()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.accessPackageAssignmentRequestWorkflowExtension".casefold():
            from . import access_package_assignment_request_workflow_extension

            return access_package_assignment_request_workflow_extension.AccessPackageAssignmentRequestWorkflowExtension()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.accessPackageAssignmentResourceRole".casefold():
            from . import access_package_assignment_resource_role

            return access_package_assignment_resource_role.AccessPackageAssignmentResourceRole()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.accessPackageAssignmentWorkflowExtension".casefold():
            from . import access_package_assignment_workflow_extension

            return access_package_assignment_workflow_extension.AccessPackageAssignmentWorkflowExtension()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.accessPackageCatalog".casefold():
            from . import access_package_catalog

            return access_package_catalog.AccessPackageCatalog()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.accessPackageResource".casefold():
            from . import access_package_resource

            return access_package_resource.AccessPackageResource()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.accessPackageResourceEnvironment".casefold():
            from . import access_package_resource_environment

            return access_package_resource_environment.AccessPackageResourceEnvironment()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.accessPackageResourceRequest".casefold():
            from . import access_package_resource_request

            return access_package_resource_request.AccessPackageResourceRequest()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.accessPackageResourceRole".casefold():
            from . import access_package_resource_role

            return access_package_resource_role.AccessPackageResourceRole()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.accessPackageResourceRoleScope".casefold():
            from . import access_package_resource_role_scope

            return access_package_resource_role_scope.AccessPackageResourceRoleScope()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.accessPackageResourceScope".casefold():
            from . import access_package_resource_scope

            return access_package_resource_scope.AccessPackageResourceScope()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.accessPackageSubject".casefold():
            from . import access_package_subject

            return access_package_subject.AccessPackageSubject()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.accessReview".casefold():
            from . import access_review

            return access_review.AccessReview()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.accessReviewDecision".casefold():
            from . import access_review_decision

            return access_review_decision.AccessReviewDecision()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.accessReviewHistoryDefinition".casefold():
            from . import access_review_history_definition

            return access_review_history_definition.AccessReviewHistoryDefinition()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.accessReviewHistoryInstance".casefold():
            from . import access_review_history_instance

            return access_review_history_instance.AccessReviewHistoryInstance()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.accessReviewInstance".casefold():
            from . import access_review_instance

            return access_review_instance.AccessReviewInstance()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.accessReviewInstanceDecisionItem".casefold():
            from . import access_review_instance_decision_item

            return access_review_instance_decision_item.AccessReviewInstanceDecisionItem()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.accessReviewPolicy".casefold():
            from . import access_review_policy

            return access_review_policy.AccessReviewPolicy()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.accessReviewReviewer".casefold():
            from . import access_review_reviewer

            return access_review_reviewer.AccessReviewReviewer()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.accessReviewScheduleDefinition".casefold():
            from . import access_review_schedule_definition

            return access_review_schedule_definition.AccessReviewScheduleDefinition()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.accessReviewSet".casefold():
            from . import access_review_set

            return access_review_set.AccessReviewSet()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.accessReviewStage".casefold():
            from . import access_review_stage

            return access_review_stage.AccessReviewStage()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.activeDirectoryWindowsAutopilotDeploymentProfile".casefold():
            from . import active_directory_windows_autopilot_deployment_profile

            return active_directory_windows_autopilot_deployment_profile.ActiveDirectoryWindowsAutopilotDeploymentProfile()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.activityBasedTimeoutPolicy".casefold():
            from . import activity_based_timeout_policy

            return activity_based_timeout_policy.ActivityBasedTimeoutPolicy()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.activityHistoryItem".casefold():
            from . import activity_history_item

            return activity_history_item.ActivityHistoryItem()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.activityStatistics".casefold():
            from . import activity_statistics

            return activity_statistics.ActivityStatistics()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.addLargeGalleryViewOperation".casefold():
            from . import add_large_gallery_view_operation

            return add_large_gallery_view_operation.AddLargeGalleryViewOperation()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.adminConsentRequestPolicy".casefold():
            from . import admin_consent_request_policy

            return admin_consent_request_policy.AdminConsentRequestPolicy()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.administrativeUnit".casefold():
            from . import administrative_unit

            return administrative_unit.AdministrativeUnit()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.adminReportSettings".casefold():
            from . import admin_report_settings

            return admin_report_settings.AdminReportSettings()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.adminWindows".casefold():
            from . import admin_windows

            return admin_windows.AdminWindows()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.adminWindowsUpdates".casefold():
            from . import admin_windows_updates

            return admin_windows_updates.AdminWindowsUpdates()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.advancedThreatProtectionOnboardingDeviceSettingState".casefold():
            from . import advanced_threat_protection_onboarding_device_setting_state

            return advanced_threat_protection_onboarding_device_setting_state.AdvancedThreatProtectionOnboardingDeviceSettingState()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.advancedThreatProtectionOnboardingStateSummary".casefold():
            from . import advanced_threat_protection_onboarding_state_summary

            return advanced_threat_protection_onboarding_state_summary.AdvancedThreatProtectionOnboardingStateSummary()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.agreement".casefold():
            from . import agreement

            return agreement.Agreement()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.agreementAcceptance".casefold():
            from . import agreement_acceptance

            return agreement_acceptance.AgreementAcceptance()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.agreementFile".casefold():
            from . import agreement_file

            return agreement_file.AgreementFile()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.agreementFileLocalization".casefold():
            from . import agreement_file_localization

            return agreement_file_localization.AgreementFileLocalization()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.agreementFileProperties".casefold():
            from . import agreement_file_properties

            return agreement_file_properties.AgreementFileProperties()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.agreementFileVersion".casefold():
            from . import agreement_file_version

            return agreement_file_version.AgreementFileVersion()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.alert".casefold():
            from . import alert
            from .security import alert

            return alert.Alert()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.allowedDataLocation".casefold():
            from . import allowed_data_location

            return allowed_data_location.AllowedDataLocation()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.allowedValue".casefold():
            from . import allowed_value

            return allowed_value.AllowedValue()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.androidCertificateProfileBase".casefold():
            from . import android_certificate_profile_base

            return android_certificate_profile_base.AndroidCertificateProfileBase()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.androidCompliancePolicy".casefold():
            from . import android_compliance_policy

            return android_compliance_policy.AndroidCompliancePolicy()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.androidCustomConfiguration".casefold():
            from . import android_custom_configuration

            return android_custom_configuration.AndroidCustomConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.androidDeviceComplianceLocalActionBase".casefold():
            from . import android_device_compliance_local_action_base

            return android_device_compliance_local_action_base.AndroidDeviceComplianceLocalActionBase()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.androidDeviceComplianceLocalActionLockDevice".casefold():
            from . import android_device_compliance_local_action_lock_device

            return android_device_compliance_local_action_lock_device.AndroidDeviceComplianceLocalActionLockDevice()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.androidDeviceComplianceLocalActionLockDeviceWithPasscode".casefold():
            from . import android_device_compliance_local_action_lock_device_with_passcode

            return android_device_compliance_local_action_lock_device_with_passcode.AndroidDeviceComplianceLocalActionLockDeviceWithPasscode()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.androidDeviceOwnerCertificateProfileBase".casefold():
            from . import android_device_owner_certificate_profile_base

            return android_device_owner_certificate_profile_base.AndroidDeviceOwnerCertificateProfileBase()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.androidDeviceOwnerCompliancePolicy".casefold():
            from . import android_device_owner_compliance_policy

            return android_device_owner_compliance_policy.AndroidDeviceOwnerCompliancePolicy()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.androidDeviceOwnerDerivedCredentialAuthenticationConfiguration".casefold():
            from . import android_device_owner_derived_credential_authentication_configuration

            return android_device_owner_derived_credential_authentication_configuration.AndroidDeviceOwnerDerivedCredentialAuthenticationConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.androidDeviceOwnerEnrollmentProfile".casefold():
            from . import android_device_owner_enrollment_profile

            return android_device_owner_enrollment_profile.AndroidDeviceOwnerEnrollmentProfile()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.androidDeviceOwnerEnterpriseWiFiConfiguration".casefold():
            from . import android_device_owner_enterprise_wi_fi_configuration

            return android_device_owner_enterprise_wi_fi_configuration.AndroidDeviceOwnerEnterpriseWiFiConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.androidDeviceOwnerGeneralDeviceConfiguration".casefold():
            from . import android_device_owner_general_device_configuration

            return android_device_owner_general_device_configuration.AndroidDeviceOwnerGeneralDeviceConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.androidDeviceOwnerImportedPFXCertificateProfile".casefold():
            from . import android_device_owner_imported_p_f_x_certificate_profile

            return android_device_owner_imported_p_f_x_certificate_profile.AndroidDeviceOwnerImportedPFXCertificateProfile()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.androidDeviceOwnerPkcsCertificateProfile".casefold():
            from . import android_device_owner_pkcs_certificate_profile

            return android_device_owner_pkcs_certificate_profile.AndroidDeviceOwnerPkcsCertificateProfile()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.androidDeviceOwnerScepCertificateProfile".casefold():
            from . import android_device_owner_scep_certificate_profile

            return android_device_owner_scep_certificate_profile.AndroidDeviceOwnerScepCertificateProfile()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.androidDeviceOwnerTrustedRootCertificate".casefold():
            from . import android_device_owner_trusted_root_certificate

            return android_device_owner_trusted_root_certificate.AndroidDeviceOwnerTrustedRootCertificate()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.androidDeviceOwnerVpnConfiguration".casefold():
            from . import android_device_owner_vpn_configuration

            return android_device_owner_vpn_configuration.AndroidDeviceOwnerVpnConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.androidDeviceOwnerWiFiConfiguration".casefold():
            from . import android_device_owner_wi_fi_configuration

            return android_device_owner_wi_fi_configuration.AndroidDeviceOwnerWiFiConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.androidEasEmailProfileConfiguration".casefold():
            from . import android_eas_email_profile_configuration

            return android_eas_email_profile_configuration.AndroidEasEmailProfileConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.androidEnterpriseWiFiConfiguration".casefold():
            from . import android_enterprise_wi_fi_configuration

            return android_enterprise_wi_fi_configuration.AndroidEnterpriseWiFiConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.androidForWorkApp".casefold():
            from . import android_for_work_app

            return android_for_work_app.AndroidForWorkApp()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.androidForWorkAppConfigurationSchema".casefold():
            from . import android_for_work_app_configuration_schema

            return android_for_work_app_configuration_schema.AndroidForWorkAppConfigurationSchema()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.androidForWorkCertificateProfileBase".casefold():
            from . import android_for_work_certificate_profile_base

            return android_for_work_certificate_profile_base.AndroidForWorkCertificateProfileBase()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.androidForWorkCompliancePolicy".casefold():
            from . import android_for_work_compliance_policy

            return android_for_work_compliance_policy.AndroidForWorkCompliancePolicy()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.androidForWorkCustomConfiguration".casefold():
            from . import android_for_work_custom_configuration

            return android_for_work_custom_configuration.AndroidForWorkCustomConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.androidForWorkEasEmailProfileBase".casefold():
            from . import android_for_work_eas_email_profile_base

            return android_for_work_eas_email_profile_base.AndroidForWorkEasEmailProfileBase()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.androidForWorkEnrollmentProfile".casefold():
            from . import android_for_work_enrollment_profile

            return android_for_work_enrollment_profile.AndroidForWorkEnrollmentProfile()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.androidForWorkEnterpriseWiFiConfiguration".casefold():
            from . import android_for_work_enterprise_wi_fi_configuration

            return android_for_work_enterprise_wi_fi_configuration.AndroidForWorkEnterpriseWiFiConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.androidForWorkGeneralDeviceConfiguration".casefold():
            from . import android_for_work_general_device_configuration

            return android_for_work_general_device_configuration.AndroidForWorkGeneralDeviceConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.androidForWorkGmailEasConfiguration".casefold():
            from . import android_for_work_gmail_eas_configuration

            return android_for_work_gmail_eas_configuration.AndroidForWorkGmailEasConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.androidForWorkImportedPFXCertificateProfile".casefold():
            from . import android_for_work_imported_p_f_x_certificate_profile

            return android_for_work_imported_p_f_x_certificate_profile.AndroidForWorkImportedPFXCertificateProfile()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.androidForWorkMobileAppConfiguration".casefold():
            from . import android_for_work_mobile_app_configuration

            return android_for_work_mobile_app_configuration.AndroidForWorkMobileAppConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.androidForWorkNineWorkEasConfiguration".casefold():
            from . import android_for_work_nine_work_eas_configuration

            return android_for_work_nine_work_eas_configuration.AndroidForWorkNineWorkEasConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.androidForWorkPkcsCertificateProfile".casefold():
            from . import android_for_work_pkcs_certificate_profile

            return android_for_work_pkcs_certificate_profile.AndroidForWorkPkcsCertificateProfile()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.androidForWorkScepCertificateProfile".casefold():
            from . import android_for_work_scep_certificate_profile

            return android_for_work_scep_certificate_profile.AndroidForWorkScepCertificateProfile()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.androidForWorkSettings".casefold():
            from . import android_for_work_settings

            return android_for_work_settings.AndroidForWorkSettings()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.androidForWorkTrustedRootCertificate".casefold():
            from . import android_for_work_trusted_root_certificate

            return android_for_work_trusted_root_certificate.AndroidForWorkTrustedRootCertificate()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.androidForWorkVpnConfiguration".casefold():
            from . import android_for_work_vpn_configuration

            return android_for_work_vpn_configuration.AndroidForWorkVpnConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.androidForWorkWiFiConfiguration".casefold():
            from . import android_for_work_wi_fi_configuration

            return android_for_work_wi_fi_configuration.AndroidForWorkWiFiConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.androidGeneralDeviceConfiguration".casefold():
            from . import android_general_device_configuration

            return android_general_device_configuration.AndroidGeneralDeviceConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.androidImportedPFXCertificateProfile".casefold():
            from . import android_imported_p_f_x_certificate_profile

            return android_imported_p_f_x_certificate_profile.AndroidImportedPFXCertificateProfile()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.androidLobApp".casefold():
            from . import android_lob_app

            return android_lob_app.AndroidLobApp()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.androidManagedAppProtection".casefold():
            from . import android_managed_app_protection

            return android_managed_app_protection.AndroidManagedAppProtection()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.androidManagedAppRegistration".casefold():
            from . import android_managed_app_registration

            return android_managed_app_registration.AndroidManagedAppRegistration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.androidManagedStoreAccountEnterpriseSettings".casefold():
            from . import android_managed_store_account_enterprise_settings

            return android_managed_store_account_enterprise_settings.AndroidManagedStoreAccountEnterpriseSettings()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.androidManagedStoreApp".casefold():
            from . import android_managed_store_app

            return android_managed_store_app.AndroidManagedStoreApp()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.androidManagedStoreAppConfiguration".casefold():
            from . import android_managed_store_app_configuration

            return android_managed_store_app_configuration.AndroidManagedStoreAppConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.androidManagedStoreAppConfigurationSchema".casefold():
            from . import android_managed_store_app_configuration_schema

            return android_managed_store_app_configuration_schema.AndroidManagedStoreAppConfigurationSchema()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.androidManagedStoreWebApp".casefold():
            from . import android_managed_store_web_app

            return android_managed_store_web_app.AndroidManagedStoreWebApp()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.androidOmaCpConfiguration".casefold():
            from . import android_oma_cp_configuration

            return android_oma_cp_configuration.AndroidOmaCpConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.androidPkcsCertificateProfile".casefold():
            from . import android_pkcs_certificate_profile

            return android_pkcs_certificate_profile.AndroidPkcsCertificateProfile()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.androidScepCertificateProfile".casefold():
            from . import android_scep_certificate_profile

            return android_scep_certificate_profile.AndroidScepCertificateProfile()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.androidStoreApp".casefold():
            from . import android_store_app

            return android_store_app.AndroidStoreApp()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.androidTrustedRootCertificate".casefold():
            from . import android_trusted_root_certificate

            return android_trusted_root_certificate.AndroidTrustedRootCertificate()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.androidVpnConfiguration".casefold():
            from . import android_vpn_configuration

            return android_vpn_configuration.AndroidVpnConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.androidWiFiConfiguration".casefold():
            from . import android_wi_fi_configuration

            return android_wi_fi_configuration.AndroidWiFiConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.androidWorkProfileCertificateProfileBase".casefold():
            from . import android_work_profile_certificate_profile_base

            return android_work_profile_certificate_profile_base.AndroidWorkProfileCertificateProfileBase()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.androidWorkProfileCompliancePolicy".casefold():
            from . import android_work_profile_compliance_policy

            return android_work_profile_compliance_policy.AndroidWorkProfileCompliancePolicy()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.androidWorkProfileCustomConfiguration".casefold():
            from . import android_work_profile_custom_configuration

            return android_work_profile_custom_configuration.AndroidWorkProfileCustomConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.androidWorkProfileEasEmailProfileBase".casefold():
            from . import android_work_profile_eas_email_profile_base

            return android_work_profile_eas_email_profile_base.AndroidWorkProfileEasEmailProfileBase()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.androidWorkProfileEnterpriseWiFiConfiguration".casefold():
            from . import android_work_profile_enterprise_wi_fi_configuration

            return android_work_profile_enterprise_wi_fi_configuration.AndroidWorkProfileEnterpriseWiFiConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.androidWorkProfileGeneralDeviceConfiguration".casefold():
            from . import android_work_profile_general_device_configuration

            return android_work_profile_general_device_configuration.AndroidWorkProfileGeneralDeviceConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.androidWorkProfileGmailEasConfiguration".casefold():
            from . import android_work_profile_gmail_eas_configuration

            return android_work_profile_gmail_eas_configuration.AndroidWorkProfileGmailEasConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.androidWorkProfileNineWorkEasConfiguration".casefold():
            from . import android_work_profile_nine_work_eas_configuration

            return android_work_profile_nine_work_eas_configuration.AndroidWorkProfileNineWorkEasConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.androidWorkProfilePkcsCertificateProfile".casefold():
            from . import android_work_profile_pkcs_certificate_profile

            return android_work_profile_pkcs_certificate_profile.AndroidWorkProfilePkcsCertificateProfile()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.androidWorkProfileScepCertificateProfile".casefold():
            from . import android_work_profile_scep_certificate_profile

            return android_work_profile_scep_certificate_profile.AndroidWorkProfileScepCertificateProfile()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.androidWorkProfileTrustedRootCertificate".casefold():
            from . import android_work_profile_trusted_root_certificate

            return android_work_profile_trusted_root_certificate.AndroidWorkProfileTrustedRootCertificate()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.androidWorkProfileVpnConfiguration".casefold():
            from . import android_work_profile_vpn_configuration

            return android_work_profile_vpn_configuration.AndroidWorkProfileVpnConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.androidWorkProfileWiFiConfiguration".casefold():
            from . import android_work_profile_wi_fi_configuration

            return android_work_profile_wi_fi_configuration.AndroidWorkProfileWiFiConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.anonymousGuestConversationMember".casefold():
            from . import anonymous_guest_conversation_member

            return anonymous_guest_conversation_member.AnonymousGuestConversationMember()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.aospDeviceOwnerCertificateProfileBase".casefold():
            from . import aosp_device_owner_certificate_profile_base

            return aosp_device_owner_certificate_profile_base.AospDeviceOwnerCertificateProfileBase()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.aospDeviceOwnerCompliancePolicy".casefold():
            from . import aosp_device_owner_compliance_policy

            return aosp_device_owner_compliance_policy.AospDeviceOwnerCompliancePolicy()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.aospDeviceOwnerDeviceConfiguration".casefold():
            from . import aosp_device_owner_device_configuration

            return aosp_device_owner_device_configuration.AospDeviceOwnerDeviceConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.aospDeviceOwnerEnterpriseWiFiConfiguration".casefold():
            from . import aosp_device_owner_enterprise_wi_fi_configuration

            return aosp_device_owner_enterprise_wi_fi_configuration.AospDeviceOwnerEnterpriseWiFiConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.aospDeviceOwnerPkcsCertificateProfile".casefold():
            from . import aosp_device_owner_pkcs_certificate_profile

            return aosp_device_owner_pkcs_certificate_profile.AospDeviceOwnerPkcsCertificateProfile()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.aospDeviceOwnerScepCertificateProfile".casefold():
            from . import aosp_device_owner_scep_certificate_profile

            return aosp_device_owner_scep_certificate_profile.AospDeviceOwnerScepCertificateProfile()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.aospDeviceOwnerTrustedRootCertificate".casefold():
            from . import aosp_device_owner_trusted_root_certificate

            return aosp_device_owner_trusted_root_certificate.AospDeviceOwnerTrustedRootCertificate()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.aospDeviceOwnerWiFiConfiguration".casefold():
            from . import aosp_device_owner_wi_fi_configuration

            return aosp_device_owner_wi_fi_configuration.AospDeviceOwnerWiFiConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.appConsentApprovalRoute".casefold():
            from . import app_consent_approval_route

            return app_consent_approval_route.AppConsentApprovalRoute()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.appConsentRequest".casefold():
            from . import app_consent_request

            return app_consent_request.AppConsentRequest()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.appCredentialSignInActivity".casefold():
            from . import app_credential_sign_in_activity

            return app_credential_sign_in_activity.AppCredentialSignInActivity()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.appleDeviceFeaturesConfigurationBase".casefold():
            from . import apple_device_features_configuration_base

            return apple_device_features_configuration_base.AppleDeviceFeaturesConfigurationBase()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.appleEnrollmentProfileAssignment".casefold():
            from . import apple_enrollment_profile_assignment

            return apple_enrollment_profile_assignment.AppleEnrollmentProfileAssignment()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.appleExpeditedCheckinConfigurationBase".casefold():
            from . import apple_expedited_checkin_configuration_base

            return apple_expedited_checkin_configuration_base.AppleExpeditedCheckinConfigurationBase()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.appleManagedIdentityProvider".casefold():
            from . import apple_managed_identity_provider

            return apple_managed_identity_provider.AppleManagedIdentityProvider()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.applePushNotificationCertificate".casefold():
            from . import apple_push_notification_certificate

            return apple_push_notification_certificate.ApplePushNotificationCertificate()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.appleUserInitiatedEnrollmentProfile".casefold():
            from . import apple_user_initiated_enrollment_profile

            return apple_user_initiated_enrollment_profile.AppleUserInitiatedEnrollmentProfile()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.appleVpnConfiguration".casefold():
            from . import apple_vpn_configuration

            return apple_vpn_configuration.AppleVpnConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.appleVppTokenTroubleshootingEvent".casefold():
            from . import apple_vpp_token_troubleshooting_event

            return apple_vpp_token_troubleshooting_event.AppleVppTokenTroubleshootingEvent()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.application".casefold():
            from . import application

            return application.Application()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.applicationSegment".casefold():
            from . import application_segment

            return application_segment.ApplicationSegment()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.applicationSignInDetailedSummary".casefold():
            from . import application_sign_in_detailed_summary

            return application_sign_in_detailed_summary.ApplicationSignInDetailedSummary()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.applicationSignInSummary".casefold():
            from . import application_sign_in_summary

            return application_sign_in_summary.ApplicationSignInSummary()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.applicationTemplate".casefold():
            from . import application_template

            return application_template.ApplicationTemplate()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.appLogCollectionRequest".casefold():
            from . import app_log_collection_request

            return app_log_collection_request.AppLogCollectionRequest()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.appManagementPolicy".casefold():
            from . import app_management_policy

            return app_management_policy.AppManagementPolicy()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.appRoleAssignment".casefold():
            from . import app_role_assignment

            return app_role_assignment.AppRoleAssignment()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.approval".casefold():
            from . import approval

            return approval.Approval()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.approvalStep".casefold():
            from . import approval_step

            return approval_step.ApprovalStep()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.approvalWorkflowProvider".casefold():
            from . import approval_workflow_provider

            return approval_workflow_provider.ApprovalWorkflowProvider()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.appScope".casefold():
            from . import app_scope

            return app_scope.AppScope()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.appVulnerabilityManagedDevice".casefold():
            from . import app_vulnerability_managed_device

            return app_vulnerability_managed_device.AppVulnerabilityManagedDevice()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.appVulnerabilityMobileApp".casefold():
            from . import app_vulnerability_mobile_app

            return app_vulnerability_mobile_app.AppVulnerabilityMobileApp()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.appVulnerabilityTask".casefold():
            from . import app_vulnerability_task

            return app_vulnerability_task.AppVulnerabilityTask()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.assignmentFilterEvaluationStatusDetails".casefold():
            from . import assignment_filter_evaluation_status_details

            return assignment_filter_evaluation_status_details.AssignmentFilterEvaluationStatusDetails()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.associatedTeamInfo".casefold():
            from . import associated_team_info

            return associated_team_info.AssociatedTeamInfo()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.attachment".casefold():
            from . import attachment

            return attachment.Attachment()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.attachmentBase".casefold():
            from . import attachment_base

            return attachment_base.AttachmentBase()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.attachmentSession".casefold():
            from . import attachment_session

            return attachment_session.AttachmentSession()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.attackSimulationOperation".casefold():
            from . import attack_simulation_operation

            return attack_simulation_operation.AttackSimulationOperation()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.attackSimulationRoot".casefold():
            from . import attack_simulation_root

            return attack_simulation_root.AttackSimulationRoot()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.attendanceRecord".casefold():
            from . import attendance_record

            return attendance_record.AttendanceRecord()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.attributeMappingFunctionSchema".casefold():
            from . import attribute_mapping_function_schema

            return attribute_mapping_function_schema.AttributeMappingFunctionSchema()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.attributeSet".casefold():
            from . import attribute_set

            return attribute_set.AttributeSet()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.audioRoutingGroup".casefold():
            from . import audio_routing_group

            return audio_routing_group.AudioRoutingGroup()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.auditEvent".casefold():
            from . import audit_event
            from .managed_tenants import audit_event

            return audit_event.AuditEvent()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.authentication".casefold():
            from . import authentication

            return authentication.Authentication()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.authenticationCombinationConfiguration".casefold():
            from . import authentication_combination_configuration

            return authentication_combination_configuration.AuthenticationCombinationConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.authenticationContextClassReference".casefold():
            from . import authentication_context_class_reference

            return authentication_context_class_reference.AuthenticationContextClassReference()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.authenticationEventListener".casefold():
            from . import authentication_event_listener

            return authentication_event_listener.AuthenticationEventListener()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.authenticationEventsFlow".casefold():
            from . import authentication_events_flow

            return authentication_events_flow.AuthenticationEventsFlow()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.authenticationEventsPolicy".casefold():
            from . import authentication_events_policy

            return authentication_events_policy.AuthenticationEventsPolicy()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.authenticationFlowsPolicy".casefold():
            from . import authentication_flows_policy

            return authentication_flows_policy.AuthenticationFlowsPolicy()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.authenticationListener".casefold():
            from . import authentication_listener

            return authentication_listener.AuthenticationListener()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.authenticationMethod".casefold():
            from . import authentication_method

            return authentication_method.AuthenticationMethod()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.authenticationMethodConfiguration".casefold():
            from . import authentication_method_configuration

            return authentication_method_configuration.AuthenticationMethodConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.authenticationMethodModeDetail".casefold():
            from . import authentication_method_mode_detail

            return authentication_method_mode_detail.AuthenticationMethodModeDetail()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.authenticationMethodsPolicy".casefold():
            from . import authentication_methods_policy

            return authentication_methods_policy.AuthenticationMethodsPolicy()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.authenticationMethodsRoot".casefold():
            from . import authentication_methods_root

            return authentication_methods_root.AuthenticationMethodsRoot()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.authenticationMethodTarget".casefold():
            from . import authentication_method_target

            return authentication_method_target.AuthenticationMethodTarget()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.authenticationStrengthPolicy".casefold():
            from . import authentication_strength_policy

            return authentication_strength_policy.AuthenticationStrengthPolicy()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.authenticationStrengthRoot".casefold():
            from . import authentication_strength_root

            return authentication_strength_root.AuthenticationStrengthRoot()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.authoredNote".casefold():
            from . import authored_note

            return authored_note.AuthoredNote()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.authorizationPolicy".casefold():
            from . import authorization_policy

            return authorization_policy.AuthorizationPolicy()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.azureADWindowsAutopilotDeploymentProfile".casefold():
            from . import azure_a_d_windows_autopilot_deployment_profile

            return azure_a_d_windows_autopilot_deployment_profile.AzureADWindowsAutopilotDeploymentProfile()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.azureCommunicationServicesUserConversationMember".casefold():
            from . import azure_communication_services_user_conversation_member

            return azure_communication_services_user_conversation_member.AzureCommunicationServicesUserConversationMember()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.b2cAuthenticationMethodsPolicy".casefold():
            from . import b2c_authentication_methods_policy

            return b2c_authentication_methods_policy.B2cAuthenticationMethodsPolicy()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.b2cIdentityUserFlow".casefold():
            from . import b2c_identity_user_flow

            return b2c_identity_user_flow.B2cIdentityUserFlow()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.b2xIdentityUserFlow".casefold():
            from . import b2x_identity_user_flow

            return b2x_identity_user_flow.B2xIdentityUserFlow()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.baseItem".casefold():
            from . import base_item

            return base_item.BaseItem()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.baseItemVersion".casefold():
            from . import base_item_version

            return base_item_version.BaseItemVersion()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.bitlocker".casefold():
            from . import bitlocker

            return bitlocker.Bitlocker()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.bitlockerRecoveryKey".casefold():
            from . import bitlocker_recovery_key

            return bitlocker_recovery_key.BitlockerRecoveryKey()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.bookingAppointment".casefold():
            from . import booking_appointment

            return booking_appointment.BookingAppointment()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.bookingBusiness".casefold():
            from . import booking_business

            return booking_business.BookingBusiness()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.bookingCurrency".casefold():
            from . import booking_currency

            return booking_currency.BookingCurrency()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.bookingCustomer".casefold():
            from . import booking_customer

            return booking_customer.BookingCustomer()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.bookingCustomQuestion".casefold():
            from . import booking_custom_question

            return booking_custom_question.BookingCustomQuestion()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.bookingNamedEntity".casefold():
            from . import booking_named_entity

            return booking_named_entity.BookingNamedEntity()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.bookingPerson".casefold():
            from . import booking_person

            return booking_person.BookingPerson()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.bookingService".casefold():
            from . import booking_service

            return booking_service.BookingService()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.bookingStaffMember".casefold():
            from . import booking_staff_member

            return booking_staff_member.BookingStaffMember()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.browserSharedCookie".casefold():
            from . import browser_shared_cookie

            return browser_shared_cookie.BrowserSharedCookie()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.browserSite".casefold():
            from . import browser_site

            return browser_site.BrowserSite()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.browserSiteList".casefold():
            from . import browser_site_list

            return browser_site_list.BrowserSiteList()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.builtInIdentityProvider".casefold():
            from . import built_in_identity_provider

            return built_in_identity_provider.BuiltInIdentityProvider()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.businessFlow".casefold():
            from . import business_flow

            return business_flow.BusinessFlow()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.businessFlowTemplate".casefold():
            from . import business_flow_template

            return business_flow_template.BusinessFlowTemplate()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.businessScenario".casefold():
            from . import business_scenario

            return business_scenario.BusinessScenario()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.businessScenarioPlanner".casefold():
            from . import business_scenario_planner

            return business_scenario_planner.BusinessScenarioPlanner()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.businessScenarioPlanReference".casefold():
            from . import business_scenario_plan_reference

            return business_scenario_plan_reference.BusinessScenarioPlanReference()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.businessScenarioTask".casefold():
            from . import business_scenario_task

            return business_scenario_task.BusinessScenarioTask()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.calendar".casefold():
            from . import calendar

            return calendar.Calendar()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.calendarGroup".casefold():
            from . import calendar_group

            return calendar_group.CalendarGroup()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.calendarPermission".casefold():
            from . import calendar_permission

            return calendar_permission.CalendarPermission()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.calendarSharingMessage".casefold():
            from . import calendar_sharing_message

            return calendar_sharing_message.CalendarSharingMessage()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.call".casefold():
            from . import call

            return call.Call()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.callActivityStatistics".casefold():
            from . import call_activity_statistics

            return call_activity_statistics.CallActivityStatistics()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.callRecording".casefold():
            from . import call_recording

            return call_recording.CallRecording()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.callRecords.callRecord".casefold():
            from .call_records import call_record

            return call_record.CallRecord()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.callRecords.segment".casefold():
            from .call_records import segment

            return segment.Segment()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.callRecords.session".casefold():
            from .call_records import session

            return session.Session()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.callTranscript".casefold():
            from . import call_transcript

            return call_transcript.CallTranscript()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.cancelMediaProcessingOperation".casefold():
            from . import cancel_media_processing_operation

            return cancel_media_processing_operation.CancelMediaProcessingOperation()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.canvasLayout".casefold():
            from . import canvas_layout

            return canvas_layout.CanvasLayout()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.cartToClassAssociation".casefold():
            from . import cart_to_class_association

            return cart_to_class_association.CartToClassAssociation()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.certificateAuthorityAsEntity".casefold():
            from . import certificate_authority_as_entity

            return certificate_authority_as_entity.CertificateAuthorityAsEntity()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.certificateAuthorityPath".casefold():
            from . import certificate_authority_path

            return certificate_authority_path.CertificateAuthorityPath()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.certificateBasedApplicationConfiguration".casefold():
            from . import certificate_based_application_configuration

            return certificate_based_application_configuration.CertificateBasedApplicationConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.certificateBasedAuthConfiguration".casefold():
            from . import certificate_based_auth_configuration

            return certificate_based_auth_configuration.CertificateBasedAuthConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.certificateConnectorDetails".casefold():
            from . import certificate_connector_details

            return certificate_connector_details.CertificateConnectorDetails()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.changeTrackedEntity".casefold():
            from . import change_tracked_entity

            return change_tracked_entity.ChangeTrackedEntity()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.channel".casefold():
            from . import channel

            return channel.Channel()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.chat".casefold():
            from . import chat

            return chat.Chat()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.chatActivityStatistics".casefold():
            from . import chat_activity_statistics

            return chat_activity_statistics.ChatActivityStatistics()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.chatMessage".casefold():
            from . import chat_message

            return chat_message.ChatMessage()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.chatMessageHostedContent".casefold():
            from . import chat_message_hosted_content

            return chat_message_hosted_content.ChatMessageHostedContent()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.chatMessageInfo".casefold():
            from . import chat_message_info

            return chat_message_info.ChatMessageInfo()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.checklistItem".casefold():
            from . import checklist_item

            return checklist_item.ChecklistItem()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.chromeOSOnboardingSettings".casefold():
            from . import chrome_o_s_onboarding_settings

            return chrome_o_s_onboarding_settings.ChromeOSOnboardingSettings()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.claimsMappingPolicy".casefold():
            from . import claims_mapping_policy

            return claims_mapping_policy.ClaimsMappingPolicy()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.classificationJobResponse".casefold():
            from . import classification_job_response

            return classification_job_response.ClassificationJobResponse()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.cloudAppSecurityProfile".casefold():
            from . import cloud_app_security_profile

            return cloud_app_security_profile.CloudAppSecurityProfile()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.cloudPC".casefold():
            from . import cloud_p_c

            return cloud_p_c.CloudPC()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.cloudPcAuditEvent".casefold():
            from . import cloud_pc_audit_event

            return cloud_pc_audit_event.CloudPcAuditEvent()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.cloudPcBulkAction".casefold():
            from . import cloud_pc_bulk_action

            return cloud_pc_bulk_action.CloudPcBulkAction()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.cloudPcBulkPowerOff".casefold():
            from . import cloud_pc_bulk_power_off

            return cloud_pc_bulk_power_off.CloudPcBulkPowerOff()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.cloudPcBulkPowerOn".casefold():
            from . import cloud_pc_bulk_power_on

            return cloud_pc_bulk_power_on.CloudPcBulkPowerOn()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.cloudPCConnectivityIssue".casefold():
            from . import cloud_p_c_connectivity_issue

            return cloud_p_c_connectivity_issue.CloudPCConnectivityIssue()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.cloudPcCrossCloudGovernmentOrganizationMapping".casefold():
            from . import cloud_pc_cross_cloud_government_organization_mapping

            return cloud_pc_cross_cloud_government_organization_mapping.CloudPcCrossCloudGovernmentOrganizationMapping()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.cloudPcDeviceImage".casefold():
            from . import cloud_pc_device_image

            return cloud_pc_device_image.CloudPcDeviceImage()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.cloudPcExportJob".casefold():
            from . import cloud_pc_export_job

            return cloud_pc_export_job.CloudPcExportJob()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.cloudPcExternalPartnerSetting".casefold():
            from . import cloud_pc_external_partner_setting

            return cloud_pc_external_partner_setting.CloudPcExternalPartnerSetting()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.cloudPcGalleryImage".casefold():
            from . import cloud_pc_gallery_image

            return cloud_pc_gallery_image.CloudPcGalleryImage()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.cloudPcOnPremisesConnection".casefold():
            from . import cloud_pc_on_premises_connection

            return cloud_pc_on_premises_connection.CloudPcOnPremisesConnection()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.cloudPcOrganizationSettings".casefold():
            from . import cloud_pc_organization_settings

            return cloud_pc_organization_settings.CloudPcOrganizationSettings()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.cloudPcProvisioningPolicy".casefold():
            from . import cloud_pc_provisioning_policy

            return cloud_pc_provisioning_policy.CloudPcProvisioningPolicy()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.cloudPcProvisioningPolicyAssignment".casefold():
            from . import cloud_pc_provisioning_policy_assignment

            return cloud_pc_provisioning_policy_assignment.CloudPcProvisioningPolicyAssignment()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.cloudPcReports".casefold():
            from . import cloud_pc_reports

            return cloud_pc_reports.CloudPcReports()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.cloudPcServicePlan".casefold():
            from . import cloud_pc_service_plan

            return cloud_pc_service_plan.CloudPcServicePlan()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.cloudPcSharedUseServicePlan".casefold():
            from . import cloud_pc_shared_use_service_plan

            return cloud_pc_shared_use_service_plan.CloudPcSharedUseServicePlan()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.cloudPcSnapshot".casefold():
            from . import cloud_pc_snapshot

            return cloud_pc_snapshot.CloudPcSnapshot()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.cloudPcSupportedRegion".casefold():
            from . import cloud_pc_supported_region

            return cloud_pc_supported_region.CloudPcSupportedRegion()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.cloudPcUserSetting".casefold():
            from . import cloud_pc_user_setting

            return cloud_pc_user_setting.CloudPcUserSetting()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.cloudPcUserSettingAssignment".casefold():
            from . import cloud_pc_user_setting_assignment

            return cloud_pc_user_setting_assignment.CloudPcUserSettingAssignment()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.columnDefinition".casefold():
            from . import column_definition

            return column_definition.ColumnDefinition()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.columnLink".casefold():
            from . import column_link

            return column_link.ColumnLink()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.comanagementEligibleDevice".casefold():
            from . import comanagement_eligible_device

            return comanagement_eligible_device.ComanagementEligibleDevice()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.command".casefold():
            from . import command

            return command.Command()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.commsOperation".casefold():
            from . import comms_operation

            return comms_operation.CommsOperation()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.companySubscription".casefold():
            from . import company_subscription

            return company_subscription.CompanySubscription()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.complianceManagementPartner".casefold():
            from . import compliance_management_partner

            return compliance_management_partner.ComplianceManagementPartner()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.conditionalAccessPolicy".casefold():
            from . import conditional_access_policy
            from .networkaccess import conditional_access_policy

            return conditional_access_policy.ConditionalAccessPolicy()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.conditionalAccessRoot".casefold():
            from . import conditional_access_root

            return conditional_access_root.ConditionalAccessRoot()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.conditionalAccessTemplate".casefold():
            from . import conditional_access_template

            return conditional_access_template.ConditionalAccessTemplate()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.configManagerCollection".casefold():
            from . import config_manager_collection

            return config_manager_collection.ConfigManagerCollection()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.connectedOrganization".casefold():
            from . import connected_organization

            return connected_organization.ConnectedOrganization()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.connectionOperation".casefold():
            from . import connection_operation
            from .external_connectors import connection_operation

            return connection_operation.ConnectionOperation()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.connector".casefold():
            from . import connector

            return connector.Connector()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.connectorGroup".casefold():
            from . import connector_group

            return connector_group.ConnectorGroup()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.contact".casefold():
            from . import contact

            return contact.Contact()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.contactFolder".casefold():
            from . import contact_folder

            return contact_folder.ContactFolder()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.contactMergeSuggestions".casefold():
            from . import contact_merge_suggestions

            return contact_merge_suggestions.ContactMergeSuggestions()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.contentSharingSession".casefold():
            from . import content_sharing_session

            return content_sharing_session.ContentSharingSession()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.contentType".casefold():
            from . import content_type

            return content_type.ContentType()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.continuousAccessEvaluationPolicy".casefold():
            from . import continuous_access_evaluation_policy

            return continuous_access_evaluation_policy.ContinuousAccessEvaluationPolicy()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.contract".casefold():
            from . import contract

            return contract.Contract()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.conversation".casefold():
            from . import conversation

            return conversation.Conversation()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.conversationMember".casefold():
            from . import conversation_member

            return conversation_member.ConversationMember()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.conversationThread".casefold():
            from . import conversation_thread

            return conversation_thread.ConversationThread()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.corsConfiguration_v2".casefold():
            from . import cors_configuration_v2

            return cors_configuration_v2.CorsConfiguration_v2()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.countryNamedLocation".casefold():
            from . import country_named_location

            return country_named_location.CountryNamedLocation()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.credentialUsageSummary".casefold():
            from . import credential_usage_summary

            return credential_usage_summary.CredentialUsageSummary()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.credentialUserRegistrationCount".casefold():
            from . import credential_user_registration_count

            return credential_user_registration_count.CredentialUserRegistrationCount()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.credentialUserRegistrationDetails".casefold():
            from . import credential_user_registration_details

            return credential_user_registration_details.CredentialUserRegistrationDetails()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.crossTenantAccessPolicy".casefold():
            from . import cross_tenant_access_policy

            return cross_tenant_access_policy.CrossTenantAccessPolicy()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.crossTenantAccessPolicyConfigurationDefault".casefold():
            from . import cross_tenant_access_policy_configuration_default

            return cross_tenant_access_policy_configuration_default.CrossTenantAccessPolicyConfigurationDefault()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.customAccessPackageWorkflowExtension".casefold():
            from . import custom_access_package_workflow_extension

            return custom_access_package_workflow_extension.CustomAccessPackageWorkflowExtension()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.customAppScope".casefold():
            from . import custom_app_scope

            return custom_app_scope.CustomAppScope()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.customAuthenticationExtension".casefold():
            from . import custom_authentication_extension

            return custom_authentication_extension.CustomAuthenticationExtension()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.customCalloutExtension".casefold():
            from . import custom_callout_extension

            return custom_callout_extension.CustomCalloutExtension()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.customExtensionHandler".casefold():
            from . import custom_extension_handler

            return custom_extension_handler.CustomExtensionHandler()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.customExtensionStageSetting".casefold():
            from . import custom_extension_stage_setting

            return custom_extension_stage_setting.CustomExtensionStageSetting()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.customSecurityAttributeDefinition".casefold():
            from . import custom_security_attribute_definition

            return custom_security_attribute_definition.CustomSecurityAttributeDefinition()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.dataClassificationService".casefold():
            from . import data_classification_service

            return data_classification_service.DataClassificationService()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.dataLossPreventionPolicy".casefold():
            from . import data_loss_prevention_policy

            return data_loss_prevention_policy.DataLossPreventionPolicy()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.dataPolicyOperation".casefold():
            from . import data_policy_operation

            return data_policy_operation.DataPolicyOperation()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.dataSharingConsent".casefold():
            from . import data_sharing_consent

            return data_sharing_consent.DataSharingConsent()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.defaultDeviceCompliancePolicy".casefold():
            from . import default_device_compliance_policy

            return default_device_compliance_policy.DefaultDeviceCompliancePolicy()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.defaultManagedAppProtection".casefold():
            from . import default_managed_app_protection

            return default_managed_app_protection.DefaultManagedAppProtection()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.defaultUserRoleOverride".casefold():
            from . import default_user_role_override

            return default_user_role_override.DefaultUserRoleOverride()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.delegatedAdminAccessAssignment".casefold():
            from . import delegated_admin_access_assignment

            return delegated_admin_access_assignment.DelegatedAdminAccessAssignment()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.delegatedAdminCustomer".casefold():
            from . import delegated_admin_customer

            return delegated_admin_customer.DelegatedAdminCustomer()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.delegatedAdminRelationship".casefold():
            from . import delegated_admin_relationship

            return delegated_admin_relationship.DelegatedAdminRelationship()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.delegatedAdminRelationshipOperation".casefold():
            from . import delegated_admin_relationship_operation

            return delegated_admin_relationship_operation.DelegatedAdminRelationshipOperation()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.delegatedAdminRelationshipRequest".casefold():
            from . import delegated_admin_relationship_request

            return delegated_admin_relationship_request.DelegatedAdminRelationshipRequest()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.delegatedAdminServiceManagementDetail".casefold():
            from . import delegated_admin_service_management_detail

            return delegated_admin_service_management_detail.DelegatedAdminServiceManagementDetail()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.delegatedPermissionClassification".casefold():
            from . import delegated_permission_classification

            return delegated_permission_classification.DelegatedPermissionClassification()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deletedItemContainer".casefold():
            from . import deleted_item_container

            return deleted_item_container.DeletedItemContainer()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deletedTeam".casefold():
            from . import deleted_team

            return deleted_team.DeletedTeam()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deltaParticipants".casefold():
            from . import delta_participants

            return delta_participants.DeltaParticipants()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.depEnrollmentBaseProfile".casefold():
            from . import dep_enrollment_base_profile

            return dep_enrollment_base_profile.DepEnrollmentBaseProfile()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.depEnrollmentProfile".casefold():
            from . import dep_enrollment_profile

            return dep_enrollment_profile.DepEnrollmentProfile()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.depIOSEnrollmentProfile".casefold():
            from . import dep_i_o_s_enrollment_profile

            return dep_i_o_s_enrollment_profile.DepIOSEnrollmentProfile()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.depMacOSEnrollmentProfile".casefold():
            from . import dep_mac_o_s_enrollment_profile

            return dep_mac_o_s_enrollment_profile.DepMacOSEnrollmentProfile()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.depOnboardingSetting".casefold():
            from . import dep_onboarding_setting

            return dep_onboarding_setting.DepOnboardingSetting()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.detectedApp".casefold():
            from . import detected_app

            return detected_app.DetectedApp()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.device".casefold():
            from . import device

            return device.Device()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceAndAppManagementAssignmentFilter".casefold():
            from . import device_and_app_management_assignment_filter

            return device_and_app_management_assignment_filter.DeviceAndAppManagementAssignmentFilter()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceAndAppManagementRoleAssignment".casefold():
            from . import device_and_app_management_role_assignment

            return device_and_app_management_role_assignment.DeviceAndAppManagementRoleAssignment()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceAndAppManagementRoleDefinition".casefold():
            from . import device_and_app_management_role_definition

            return device_and_app_management_role_definition.DeviceAndAppManagementRoleDefinition()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceAppManagement".casefold():
            from . import device_app_management

            return device_app_management.DeviceAppManagement()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceAppManagementTask".casefold():
            from . import device_app_management_task

            return device_app_management_task.DeviceAppManagementTask()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceCategory".casefold():
            from . import device_category

            return device_category.DeviceCategory()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceComanagementAuthorityConfiguration".casefold():
            from . import device_comanagement_authority_configuration

            return device_comanagement_authority_configuration.DeviceComanagementAuthorityConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceComplianceActionItem".casefold():
            from . import device_compliance_action_item

            return device_compliance_action_item.DeviceComplianceActionItem()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceComplianceDeviceOverview".casefold():
            from . import device_compliance_device_overview

            return device_compliance_device_overview.DeviceComplianceDeviceOverview()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceComplianceDeviceStatus".casefold():
            from . import device_compliance_device_status

            return device_compliance_device_status.DeviceComplianceDeviceStatus()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceCompliancePolicy".casefold():
            from . import device_compliance_policy

            return device_compliance_policy.DeviceCompliancePolicy()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceCompliancePolicyAssignment".casefold():
            from . import device_compliance_policy_assignment

            return device_compliance_policy_assignment.DeviceCompliancePolicyAssignment()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceCompliancePolicyDeviceStateSummary".casefold():
            from . import device_compliance_policy_device_state_summary

            return device_compliance_policy_device_state_summary.DeviceCompliancePolicyDeviceStateSummary()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceCompliancePolicyGroupAssignment".casefold():
            from . import device_compliance_policy_group_assignment

            return device_compliance_policy_group_assignment.DeviceCompliancePolicyGroupAssignment()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceCompliancePolicyPolicySetItem".casefold():
            from . import device_compliance_policy_policy_set_item

            return device_compliance_policy_policy_set_item.DeviceCompliancePolicyPolicySetItem()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceCompliancePolicySettingStateSummary".casefold():
            from . import device_compliance_policy_setting_state_summary
            from .managed_tenants import device_compliance_policy_setting_state_summary

            return device_compliance_policy_setting_state_summary.DeviceCompliancePolicySettingStateSummary()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceCompliancePolicyState".casefold():
            from . import device_compliance_policy_state

            return device_compliance_policy_state.DeviceCompliancePolicyState()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceComplianceScheduledActionForRule".casefold():
            from . import device_compliance_scheduled_action_for_rule

            return device_compliance_scheduled_action_for_rule.DeviceComplianceScheduledActionForRule()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceComplianceScript".casefold():
            from . import device_compliance_script

            return device_compliance_script.DeviceComplianceScript()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceComplianceScriptDeviceState".casefold():
            from . import device_compliance_script_device_state

            return device_compliance_script_device_state.DeviceComplianceScriptDeviceState()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceComplianceScriptRunSummary".casefold():
            from . import device_compliance_script_run_summary

            return device_compliance_script_run_summary.DeviceComplianceScriptRunSummary()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceComplianceSettingState".casefold():
            from . import device_compliance_setting_state

            return device_compliance_setting_state.DeviceComplianceSettingState()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceComplianceUserOverview".casefold():
            from . import device_compliance_user_overview

            return device_compliance_user_overview.DeviceComplianceUserOverview()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceComplianceUserStatus".casefold():
            from . import device_compliance_user_status

            return device_compliance_user_status.DeviceComplianceUserStatus()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceConfiguration".casefold():
            from . import device_configuration

            return device_configuration.DeviceConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceConfigurationAssignment".casefold():
            from . import device_configuration_assignment

            return device_configuration_assignment.DeviceConfigurationAssignment()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceConfigurationConflictSummary".casefold():
            from . import device_configuration_conflict_summary

            return device_configuration_conflict_summary.DeviceConfigurationConflictSummary()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceConfigurationDeviceOverview".casefold():
            from . import device_configuration_device_overview

            return device_configuration_device_overview.DeviceConfigurationDeviceOverview()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceConfigurationDeviceStateSummary".casefold():
            from . import device_configuration_device_state_summary

            return device_configuration_device_state_summary.DeviceConfigurationDeviceStateSummary()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceConfigurationDeviceStatus".casefold():
            from . import device_configuration_device_status

            return device_configuration_device_status.DeviceConfigurationDeviceStatus()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceConfigurationGroupAssignment".casefold():
            from . import device_configuration_group_assignment

            return device_configuration_group_assignment.DeviceConfigurationGroupAssignment()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceConfigurationPolicySetItem".casefold():
            from . import device_configuration_policy_set_item

            return device_configuration_policy_set_item.DeviceConfigurationPolicySetItem()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceConfigurationState".casefold():
            from . import device_configuration_state

            return device_configuration_state.DeviceConfigurationState()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceConfigurationUserOverview".casefold():
            from . import device_configuration_user_overview

            return device_configuration_user_overview.DeviceConfigurationUserOverview()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceConfigurationUserStateSummary".casefold():
            from . import device_configuration_user_state_summary

            return device_configuration_user_state_summary.DeviceConfigurationUserStateSummary()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceConfigurationUserStatus".casefold():
            from . import device_configuration_user_status

            return device_configuration_user_status.DeviceConfigurationUserStatus()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceCustomAttributeShellScript".casefold():
            from . import device_custom_attribute_shell_script

            return device_custom_attribute_shell_script.DeviceCustomAttributeShellScript()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceEnrollmentConfiguration".casefold():
            from . import device_enrollment_configuration

            return device_enrollment_configuration.DeviceEnrollmentConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceEnrollmentLimitConfiguration".casefold():
            from . import device_enrollment_limit_configuration

            return device_enrollment_limit_configuration.DeviceEnrollmentLimitConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceEnrollmentNotificationConfiguration".casefold():
            from . import device_enrollment_notification_configuration

            return device_enrollment_notification_configuration.DeviceEnrollmentNotificationConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceEnrollmentPlatformRestrictionConfiguration".casefold():
            from . import device_enrollment_platform_restriction_configuration

            return device_enrollment_platform_restriction_configuration.DeviceEnrollmentPlatformRestrictionConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceEnrollmentPlatformRestrictionsConfiguration".casefold():
            from . import device_enrollment_platform_restrictions_configuration

            return device_enrollment_platform_restrictions_configuration.DeviceEnrollmentPlatformRestrictionsConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceEnrollmentWindowsHelloForBusinessConfiguration".casefold():
            from . import device_enrollment_windows_hello_for_business_configuration

            return device_enrollment_windows_hello_for_business_configuration.DeviceEnrollmentWindowsHelloForBusinessConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceHealthScript".casefold():
            from . import device_health_script

            return device_health_script.DeviceHealthScript()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceHealthScriptAssignment".casefold():
            from . import device_health_script_assignment

            return device_health_script_assignment.DeviceHealthScriptAssignment()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceHealthScriptDeviceState".casefold():
            from . import device_health_script_device_state

            return device_health_script_device_state.DeviceHealthScriptDeviceState()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceHealthScriptRunSummary".casefold():
            from . import device_health_script_run_summary

            return device_health_script_run_summary.DeviceHealthScriptRunSummary()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceInstallState".casefold():
            from . import device_install_state

            return device_install_state.DeviceInstallState()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceLocalCredentialInfo".casefold():
            from . import device_local_credential_info

            return device_local_credential_info.DeviceLocalCredentialInfo()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceLogCollectionResponse".casefold():
            from . import device_log_collection_response

            return device_log_collection_response.DeviceLogCollectionResponse()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceManagement".casefold():
            from .device_management import device_management

            return device_management.DeviceManagement()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceManagement.alertRecord".casefold():
            from .device_management import alert_record

            return alert_record.AlertRecord()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceManagement.alertRule".casefold():
            from .device_management import alert_rule

            return alert_rule.AlertRule()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceManagement.monitoring".casefold():
            from .device_management import monitoring

            return monitoring.Monitoring()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceManagementAbstractComplexSettingDefinition".casefold():
            from . import device_management_abstract_complex_setting_definition

            return device_management_abstract_complex_setting_definition.DeviceManagementAbstractComplexSettingDefinition()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceManagementAbstractComplexSettingInstance".casefold():
            from . import device_management_abstract_complex_setting_instance

            return device_management_abstract_complex_setting_instance.DeviceManagementAbstractComplexSettingInstance()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceManagementAutopilotEvent".casefold():
            from . import device_management_autopilot_event

            return device_management_autopilot_event.DeviceManagementAutopilotEvent()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceManagementAutopilotPolicyStatusDetail".casefold():
            from . import device_management_autopilot_policy_status_detail

            return device_management_autopilot_policy_status_detail.DeviceManagementAutopilotPolicyStatusDetail()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceManagementBooleanSettingInstance".casefold():
            from . import device_management_boolean_setting_instance

            return device_management_boolean_setting_instance.DeviceManagementBooleanSettingInstance()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceManagementCachedReportConfiguration".casefold():
            from . import device_management_cached_report_configuration

            return device_management_cached_report_configuration.DeviceManagementCachedReportConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceManagementCollectionSettingDefinition".casefold():
            from . import device_management_collection_setting_definition

            return device_management_collection_setting_definition.DeviceManagementCollectionSettingDefinition()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceManagementCollectionSettingInstance".casefold():
            from . import device_management_collection_setting_instance

            return device_management_collection_setting_instance.DeviceManagementCollectionSettingInstance()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceManagementComplexSettingDefinition".casefold():
            from . import device_management_complex_setting_definition

            return device_management_complex_setting_definition.DeviceManagementComplexSettingDefinition()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceManagementComplexSettingInstance".casefold():
            from . import device_management_complex_setting_instance

            return device_management_complex_setting_instance.DeviceManagementComplexSettingInstance()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceManagementComplianceActionItem".casefold():
            from . import device_management_compliance_action_item

            return device_management_compliance_action_item.DeviceManagementComplianceActionItem()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceManagementCompliancePolicy".casefold():
            from . import device_management_compliance_policy

            return device_management_compliance_policy.DeviceManagementCompliancePolicy()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceManagementComplianceScheduledActionForRule".casefold():
            from . import device_management_compliance_scheduled_action_for_rule

            return device_management_compliance_scheduled_action_for_rule.DeviceManagementComplianceScheduledActionForRule()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceManagementConfigurationCategory".casefold():
            from . import device_management_configuration_category

            return device_management_configuration_category.DeviceManagementConfigurationCategory()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceManagementConfigurationChoiceSettingCollectionDefinition".casefold():
            from . import device_management_configuration_choice_setting_collection_definition

            return device_management_configuration_choice_setting_collection_definition.DeviceManagementConfigurationChoiceSettingCollectionDefinition()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceManagementConfigurationChoiceSettingDefinition".casefold():
            from . import device_management_configuration_choice_setting_definition

            return device_management_configuration_choice_setting_definition.DeviceManagementConfigurationChoiceSettingDefinition()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceManagementConfigurationPolicy".casefold():
            from . import device_management_configuration_policy

            return device_management_configuration_policy.DeviceManagementConfigurationPolicy()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceManagementConfigurationPolicyAssignment".casefold():
            from . import device_management_configuration_policy_assignment

            return device_management_configuration_policy_assignment.DeviceManagementConfigurationPolicyAssignment()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceManagementConfigurationPolicyPolicySetItem".casefold():
            from . import device_management_configuration_policy_policy_set_item

            return device_management_configuration_policy_policy_set_item.DeviceManagementConfigurationPolicyPolicySetItem()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceManagementConfigurationPolicyTemplate".casefold():
            from . import device_management_configuration_policy_template

            return device_management_configuration_policy_template.DeviceManagementConfigurationPolicyTemplate()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceManagementConfigurationRedirectSettingDefinition".casefold():
            from . import device_management_configuration_redirect_setting_definition

            return device_management_configuration_redirect_setting_definition.DeviceManagementConfigurationRedirectSettingDefinition()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceManagementConfigurationSetting".casefold():
            from . import device_management_configuration_setting

            return device_management_configuration_setting.DeviceManagementConfigurationSetting()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceManagementConfigurationSettingDefinition".casefold():
            from . import device_management_configuration_setting_definition

            return device_management_configuration_setting_definition.DeviceManagementConfigurationSettingDefinition()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceManagementConfigurationSettingGroupCollectionDefinition".casefold():
            from . import device_management_configuration_setting_group_collection_definition

            return device_management_configuration_setting_group_collection_definition.DeviceManagementConfigurationSettingGroupCollectionDefinition()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceManagementConfigurationSettingGroupDefinition".casefold():
            from . import device_management_configuration_setting_group_definition

            return device_management_configuration_setting_group_definition.DeviceManagementConfigurationSettingGroupDefinition()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceManagementConfigurationSettingTemplate".casefold():
            from . import device_management_configuration_setting_template

            return device_management_configuration_setting_template.DeviceManagementConfigurationSettingTemplate()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceManagementConfigurationSimpleSettingCollectionDefinition".casefold():
            from . import device_management_configuration_simple_setting_collection_definition

            return device_management_configuration_simple_setting_collection_definition.DeviceManagementConfigurationSimpleSettingCollectionDefinition()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceManagementConfigurationSimpleSettingDefinition".casefold():
            from . import device_management_configuration_simple_setting_definition

            return device_management_configuration_simple_setting_definition.DeviceManagementConfigurationSimpleSettingDefinition()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceManagementDerivedCredentialSettings".casefold():
            from . import device_management_derived_credential_settings

            return device_management_derived_credential_settings.DeviceManagementDerivedCredentialSettings()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceManagementDomainJoinConnector".casefold():
            from . import device_management_domain_join_connector

            return device_management_domain_join_connector.DeviceManagementDomainJoinConnector()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceManagementExchangeConnector".casefold():
            from . import device_management_exchange_connector

            return device_management_exchange_connector.DeviceManagementExchangeConnector()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceManagementExchangeOnPremisesPolicy".casefold():
            from . import device_management_exchange_on_premises_policy

            return device_management_exchange_on_premises_policy.DeviceManagementExchangeOnPremisesPolicy()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceManagementExportJob".casefold():
            from . import device_management_export_job

            return device_management_export_job.DeviceManagementExportJob()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceManagementIntegerSettingInstance".casefold():
            from . import device_management_integer_setting_instance

            return device_management_integer_setting_instance.DeviceManagementIntegerSettingInstance()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceManagementIntent".casefold():
            from . import device_management_intent

            return device_management_intent.DeviceManagementIntent()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceManagementIntentAssignment".casefold():
            from . import device_management_intent_assignment

            return device_management_intent_assignment.DeviceManagementIntentAssignment()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceManagementIntentDeviceSettingStateSummary".casefold():
            from . import device_management_intent_device_setting_state_summary

            return device_management_intent_device_setting_state_summary.DeviceManagementIntentDeviceSettingStateSummary()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceManagementIntentDeviceState".casefold():
            from . import device_management_intent_device_state

            return device_management_intent_device_state.DeviceManagementIntentDeviceState()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceManagementIntentDeviceStateSummary".casefold():
            from . import device_management_intent_device_state_summary

            return device_management_intent_device_state_summary.DeviceManagementIntentDeviceStateSummary()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceManagementIntentSettingCategory".casefold():
            from . import device_management_intent_setting_category

            return device_management_intent_setting_category.DeviceManagementIntentSettingCategory()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceManagementIntentUserState".casefold():
            from . import device_management_intent_user_state

            return device_management_intent_user_state.DeviceManagementIntentUserState()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceManagementIntentUserStateSummary".casefold():
            from . import device_management_intent_user_state_summary

            return device_management_intent_user_state_summary.DeviceManagementIntentUserStateSummary()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceManagementPartner".casefold():
            from . import device_management_partner

            return device_management_partner.DeviceManagementPartner()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceManagementReports".casefold():
            from . import device_management_reports

            return device_management_reports.DeviceManagementReports()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceManagementResourceAccessProfileAssignment".casefold():
            from . import device_management_resource_access_profile_assignment

            return device_management_resource_access_profile_assignment.DeviceManagementResourceAccessProfileAssignment()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceManagementResourceAccessProfileBase".casefold():
            from . import device_management_resource_access_profile_base

            return device_management_resource_access_profile_base.DeviceManagementResourceAccessProfileBase()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceManagementReusablePolicySetting".casefold():
            from . import device_management_reusable_policy_setting

            return device_management_reusable_policy_setting.DeviceManagementReusablePolicySetting()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceManagementScript".casefold():
            from . import device_management_script

            return device_management_script.DeviceManagementScript()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceManagementScriptAssignment".casefold():
            from . import device_management_script_assignment

            return device_management_script_assignment.DeviceManagementScriptAssignment()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceManagementScriptDeviceState".casefold():
            from . import device_management_script_device_state

            return device_management_script_device_state.DeviceManagementScriptDeviceState()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceManagementScriptGroupAssignment".casefold():
            from . import device_management_script_group_assignment

            return device_management_script_group_assignment.DeviceManagementScriptGroupAssignment()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceManagementScriptPolicySetItem".casefold():
            from . import device_management_script_policy_set_item

            return device_management_script_policy_set_item.DeviceManagementScriptPolicySetItem()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceManagementScriptRunSummary".casefold():
            from . import device_management_script_run_summary

            return device_management_script_run_summary.DeviceManagementScriptRunSummary()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceManagementScriptUserState".casefold():
            from . import device_management_script_user_state

            return device_management_script_user_state.DeviceManagementScriptUserState()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceManagementSettingCategory".casefold():
            from . import device_management_setting_category

            return device_management_setting_category.DeviceManagementSettingCategory()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceManagementSettingDefinition".casefold():
            from . import device_management_setting_definition

            return device_management_setting_definition.DeviceManagementSettingDefinition()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceManagementSettingInstance".casefold():
            from . import device_management_setting_instance

            return device_management_setting_instance.DeviceManagementSettingInstance()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceManagementStringSettingInstance".casefold():
            from . import device_management_string_setting_instance

            return device_management_string_setting_instance.DeviceManagementStringSettingInstance()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceManagementTemplate".casefold():
            from . import device_management_template

            return device_management_template.DeviceManagementTemplate()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceManagementTemplateInsightsDefinition".casefold():
            from . import device_management_template_insights_definition

            return device_management_template_insights_definition.DeviceManagementTemplateInsightsDefinition()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceManagementTemplateSettingCategory".casefold():
            from . import device_management_template_setting_category

            return device_management_template_setting_category.DeviceManagementTemplateSettingCategory()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceManagementTroubleshootingEvent".casefold():
            from . import device_management_troubleshooting_event

            return device_management_troubleshooting_event.DeviceManagementTroubleshootingEvent()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceRegistrationPolicy".casefold():
            from . import device_registration_policy

            return device_registration_policy.DeviceRegistrationPolicy()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceSetupConfiguration".casefold():
            from . import device_setup_configuration

            return device_setup_configuration.DeviceSetupConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.deviceShellScript".casefold():
            from . import device_shell_script

            return device_shell_script.DeviceShellScript()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.directory".casefold():
            from . import directory

            return directory.Directory()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.directoryAudit".casefold():
            from . import directory_audit

            return directory_audit.DirectoryAudit()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.directoryDefinition".casefold():
            from . import directory_definition

            return directory_definition.DirectoryDefinition()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.directoryObject".casefold():
            from . import directory_object

            return directory_object.DirectoryObject()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.directoryObjectPartnerReference".casefold():
            from . import directory_object_partner_reference

            return directory_object_partner_reference.DirectoryObjectPartnerReference()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.directoryRole".casefold():
            from . import directory_role

            return directory_role.DirectoryRole()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.directoryRoleAccessReviewPolicy".casefold():
            from . import directory_role_access_review_policy

            return directory_role_access_review_policy.DirectoryRoleAccessReviewPolicy()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.directoryRoleTemplate".casefold():
            from . import directory_role_template

            return directory_role_template.DirectoryRoleTemplate()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.directorySetting".casefold():
            from . import directory_setting

            return directory_setting.DirectorySetting()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.directorySettingTemplate".casefold():
            from . import directory_setting_template

            return directory_setting_template.DirectorySettingTemplate()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.dlpEvaluatePoliciesJobResponse".casefold():
            from . import dlp_evaluate_policies_job_response

            return dlp_evaluate_policies_job_response.DlpEvaluatePoliciesJobResponse()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.document".casefold():
            from . import document

            return document.Document()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.documentComment".casefold():
            from . import document_comment

            return document_comment.DocumentComment()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.documentCommentReply".casefold():
            from . import document_comment_reply

            return document_comment_reply.DocumentCommentReply()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.documentSetVersion".casefold():
            from . import document_set_version

            return document_set_version.DocumentSetVersion()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.domain".casefold():
            from . import domain

            return domain.Domain()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.domainDnsCnameRecord".casefold():
            from . import domain_dns_cname_record

            return domain_dns_cname_record.DomainDnsCnameRecord()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.domainDnsMxRecord".casefold():
            from . import domain_dns_mx_record

            return domain_dns_mx_record.DomainDnsMxRecord()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.domainDnsRecord".casefold():
            from . import domain_dns_record

            return domain_dns_record.DomainDnsRecord()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.domainDnsSrvRecord".casefold():
            from . import domain_dns_srv_record

            return domain_dns_srv_record.DomainDnsSrvRecord()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.domainDnsTxtRecord".casefold():
            from . import domain_dns_txt_record

            return domain_dns_txt_record.DomainDnsTxtRecord()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.domainDnsUnavailableRecord".casefold():
            from . import domain_dns_unavailable_record

            return domain_dns_unavailable_record.DomainDnsUnavailableRecord()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.domainSecurityProfile".casefold():
            from . import domain_security_profile

            return domain_security_profile.DomainSecurityProfile()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.drive".casefold():
            from . import drive

            return drive.Drive()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.driveItem".casefold():
            from . import drive_item

            return drive_item.DriveItem()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.driveItemVersion".casefold():
            from . import drive_item_version

            return drive_item_version.DriveItemVersion()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.easEmailProfileConfigurationBase".casefold():
            from . import eas_email_profile_configuration_base

            return eas_email_profile_configuration_base.EasEmailProfileConfigurationBase()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.eBookInstallSummary".casefold():
            from . import e_book_install_summary

            return e_book_install_summary.EBookInstallSummary()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.edge".casefold():
            from . import edge

            return edge.Edge()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.ediscovery.addToReviewSetOperation".casefold():
            from .ediscovery import add_to_review_set_operation

            return add_to_review_set_operation.AddToReviewSetOperation()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.ediscovery.case".casefold():
            from .ediscovery import case
            from .security import case

            return case.Case()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.ediscovery.caseExportOperation".casefold():
            from .ediscovery import case_export_operation

            return case_export_operation.CaseExportOperation()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.ediscovery.caseHoldOperation".casefold():
            from .ediscovery import case_hold_operation

            return case_hold_operation.CaseHoldOperation()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.ediscovery.caseIndexOperation".casefold():
            from .ediscovery import case_index_operation

            return case_index_operation.CaseIndexOperation()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.ediscovery.caseOperation".casefold():
            from .ediscovery import case_operation
            from .security import case_operation

            return case_operation.CaseOperation()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.ediscovery.caseSettings".casefold():
            from .ediscovery import case_settings

            return case_settings.CaseSettings()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.ediscovery.custodian".casefold():
            from .ediscovery import custodian

            return custodian.Custodian()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.ediscovery.dataSource".casefold():
            from .ediscovery import data_source
            from .security import data_source

            return data_source.DataSource()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.ediscovery.dataSourceContainer".casefold():
            from .ediscovery import data_source_container
            from .security import data_source_container

            return data_source_container.DataSourceContainer()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.ediscovery.ediscoveryroot".casefold():
            from .ediscovery import ediscoveryroot

            return ediscoveryroot.Ediscoveryroot()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.ediscovery.estimateStatisticsOperation".casefold():
            from .ediscovery import estimate_statistics_operation

            return estimate_statistics_operation.EstimateStatisticsOperation()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.ediscovery.legalHold".casefold():
            from .ediscovery import legal_hold

            return legal_hold.LegalHold()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.ediscovery.noncustodialDataSource".casefold():
            from .ediscovery import noncustodial_data_source

            return noncustodial_data_source.NoncustodialDataSource()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.ediscovery.purgeDataOperation".casefold():
            from .ediscovery import purge_data_operation

            return purge_data_operation.PurgeDataOperation()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.ediscovery.reviewSet".casefold():
            from .ediscovery import review_set

            return review_set.ReviewSet()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.ediscovery.reviewSetQuery".casefold():
            from .ediscovery import review_set_query

            return review_set_query.ReviewSetQuery()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.ediscovery.siteSource".casefold():
            from .ediscovery import site_source
            from .security import site_source

            return site_source.SiteSource()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.ediscovery.sourceCollection".casefold():
            from .ediscovery import source_collection

            return source_collection.SourceCollection()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.ediscovery.tag".casefold():
            from .ediscovery import tag
            from .security import tag

            return tag.Tag()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.ediscovery.tagOperation".casefold():
            from .ediscovery import tag_operation

            return tag_operation.TagOperation()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.ediscovery.unifiedGroupSource".casefold():
            from .ediscovery import unified_group_source
            from .security import unified_group_source

            return unified_group_source.UnifiedGroupSource()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.ediscovery.userSource".casefold():
            from .ediscovery import user_source
            from .security import user_source

            return user_source.UserSource()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.editionUpgradeConfiguration".casefold():
            from . import edition_upgrade_configuration

            return edition_upgrade_configuration.EditionUpgradeConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.educationalActivity".casefold():
            from . import educational_activity

            return educational_activity.EducationalActivity()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.educationAssignment".casefold():
            from . import education_assignment

            return education_assignment.EducationAssignment()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.educationAssignmentDefaults".casefold():
            from . import education_assignment_defaults

            return education_assignment_defaults.EducationAssignmentDefaults()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.educationAssignmentResource".casefold():
            from . import education_assignment_resource

            return education_assignment_resource.EducationAssignmentResource()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.educationAssignmentSettings".casefold():
            from . import education_assignment_settings

            return education_assignment_settings.EducationAssignmentSettings()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.educationCategory".casefold():
            from . import education_category

            return education_category.EducationCategory()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.educationClass".casefold():
            from . import education_class

            return education_class.EducationClass()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.educationFeedbackOutcome".casefold():
            from . import education_feedback_outcome

            return education_feedback_outcome.EducationFeedbackOutcome()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.educationFeedbackResourceOutcome".casefold():
            from . import education_feedback_resource_outcome

            return education_feedback_resource_outcome.EducationFeedbackResourceOutcome()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.educationGradingCategory".casefold():
            from . import education_grading_category

            return education_grading_category.EducationGradingCategory()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.educationOrganization".casefold():
            from . import education_organization

            return education_organization.EducationOrganization()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.educationOutcome".casefold():
            from . import education_outcome

            return education_outcome.EducationOutcome()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.educationPointsOutcome".casefold():
            from . import education_points_outcome

            return education_points_outcome.EducationPointsOutcome()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.educationRubric".casefold():
            from . import education_rubric

            return education_rubric.EducationRubric()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.educationRubricOutcome".casefold():
            from . import education_rubric_outcome

            return education_rubric_outcome.EducationRubricOutcome()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.educationSchool".casefold():
            from . import education_school

            return education_school.EducationSchool()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.educationSubmission".casefold():
            from . import education_submission

            return education_submission.EducationSubmission()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.educationSubmissionResource".casefold():
            from . import education_submission_resource

            return education_submission_resource.EducationSubmissionResource()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.educationSynchronizationError".casefold():
            from . import education_synchronization_error

            return education_synchronization_error.EducationSynchronizationError()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.educationSynchronizationProfile".casefold():
            from . import education_synchronization_profile

            return education_synchronization_profile.EducationSynchronizationProfile()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.educationSynchronizationProfileStatus".casefold():
            from . import education_synchronization_profile_status

            return education_synchronization_profile_status.EducationSynchronizationProfileStatus()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.educationUser".casefold():
            from . import education_user

            return education_user.EducationUser()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.emailActivityStatistics".casefold():
            from . import email_activity_statistics

            return email_activity_statistics.EmailActivityStatistics()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.emailAuthenticationMethod".casefold():
            from . import email_authentication_method

            return email_authentication_method.EmailAuthenticationMethod()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.emailAuthenticationMethodConfiguration".casefold():
            from . import email_authentication_method_configuration

            return email_authentication_method_configuration.EmailAuthenticationMethodConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.emailFileAssessmentRequest".casefold():
            from . import email_file_assessment_request

            return email_file_assessment_request.EmailFileAssessmentRequest()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.embeddedSIMActivationCodePool".casefold():
            from . import embedded_s_i_m_activation_code_pool

            return embedded_s_i_m_activation_code_pool.EmbeddedSIMActivationCodePool()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.embeddedSIMActivationCodePoolAssignment".casefold():
            from . import embedded_s_i_m_activation_code_pool_assignment

            return embedded_s_i_m_activation_code_pool_assignment.EmbeddedSIMActivationCodePoolAssignment()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.embeddedSIMDeviceState".casefold():
            from . import embedded_s_i_m_device_state

            return embedded_s_i_m_device_state.EmbeddedSIMDeviceState()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.employeeExperienceUser".casefold():
            from . import employee_experience_user

            return employee_experience_user.EmployeeExperienceUser()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.endpoint".casefold():
            from . import endpoint

            return endpoint.Endpoint()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.enrollmentConfigurationAssignment".casefold():
            from . import enrollment_configuration_assignment

            return enrollment_configuration_assignment.EnrollmentConfigurationAssignment()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.enrollmentProfile".casefold():
            from . import enrollment_profile

            return enrollment_profile.EnrollmentProfile()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.enrollmentRestrictionsConfigurationPolicySetItem".casefold():
            from . import enrollment_restrictions_configuration_policy_set_item

            return enrollment_restrictions_configuration_policy_set_item.EnrollmentRestrictionsConfigurationPolicySetItem()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.enrollmentTroubleshootingEvent".casefold():
            from . import enrollment_troubleshooting_event

            return enrollment_troubleshooting_event.EnrollmentTroubleshootingEvent()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.enterpriseCodeSigningCertificate".casefold():
            from . import enterprise_code_signing_certificate

            return enterprise_code_signing_certificate.EnterpriseCodeSigningCertificate()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.entitlementManagement".casefold():
            from . import entitlement_management

            return entitlement_management.EntitlementManagement()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.entitlementManagementSettings".casefold():
            from . import entitlement_management_settings

            return entitlement_management_settings.EntitlementManagementSettings()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.evaluateLabelJobResponse".casefold():
            from . import evaluate_label_job_response

            return evaluate_label_job_response.EvaluateLabelJobResponse()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.event".casefold():
            from . import event

            return event.Event()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.eventMessage".casefold():
            from . import event_message

            return event_message.EventMessage()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.eventMessageRequest".casefold():
            from . import event_message_request

            return event_message_request.EventMessageRequest()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.eventMessageResponse".casefold():
            from . import event_message_response

            return event_message_response.EventMessageResponse()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.exactMatchDataStore".casefold():
            from . import exact_match_data_store

            return exact_match_data_store.ExactMatchDataStore()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.exactMatchDataStoreBase".casefold():
            from . import exact_match_data_store_base

            return exact_match_data_store_base.ExactMatchDataStoreBase()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.exactMatchJobBase".casefold():
            from . import exact_match_job_base

            return exact_match_job_base.ExactMatchJobBase()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.exactMatchLookupJob".casefold():
            from . import exact_match_lookup_job

            return exact_match_lookup_job.ExactMatchLookupJob()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.exactMatchSession".casefold():
            from . import exact_match_session

            return exact_match_session.ExactMatchSession()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.exactMatchSessionBase".casefold():
            from . import exact_match_session_base

            return exact_match_session_base.ExactMatchSessionBase()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.exactMatchUploadAgent".casefold():
            from . import exact_match_upload_agent

            return exact_match_upload_agent.ExactMatchUploadAgent()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.extension".casefold():
            from . import extension

            return extension.Extension()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.extensionProperty".casefold():
            from . import extension_property

            return extension_property.ExtensionProperty()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.external".casefold():
            from . import external

            return external.External()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.externalConnection".casefold():
            from . import external_connection
            from .external_connectors import external_connection

            return external_connection.ExternalConnection()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.externalConnectors.connectionOperation".casefold():
            from . import connection_operation
            from .external_connectors import connection_operation

            return connection_operation.ConnectionOperation()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.externalConnectors.connectionQuota".casefold():
            from .external_connectors import connection_quota

            return connection_quota.ConnectionQuota()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.externalConnectors.externalActivity".casefold():
            from .external_connectors import external_activity

            return external_activity.ExternalActivity()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.externalConnectors.externalActivityResult".casefold():
            from .external_connectors import external_activity_result

            return external_activity_result.ExternalActivityResult()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.externalConnectors.externalConnection".casefold():
            from . import external_connection
            from .external_connectors import external_connection

            return external_connection.ExternalConnection()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.externalConnectors.externalGroup".casefold():
            from . import external_group
            from .external_connectors import external_group

            return external_group.ExternalGroup()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.externalConnectors.externalItem".casefold():
            from . import external_item
            from .external_connectors import external_item

            return external_item.ExternalItem()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.externalConnectors.identity".casefold():
            from .external_connectors import identity

            return identity.Identity()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.externalConnectors.schema".casefold():
            from . import schema
            from .external_connectors import schema

            return schema.Schema()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.externalDomainName".casefold():
            from . import external_domain_name

            return external_domain_name.ExternalDomainName()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.externalGroup".casefold():
            from . import external_group
            from .external_connectors import external_group

            return external_group.ExternalGroup()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.externalIdentitiesPolicy".casefold():
            from . import external_identities_policy

            return external_identities_policy.ExternalIdentitiesPolicy()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.externalItem".casefold():
            from . import external_item
            from .external_connectors import external_item

            return external_item.ExternalItem()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.externalMeetingRegistrant".casefold():
            from . import external_meeting_registrant

            return external_meeting_registrant.ExternalMeetingRegistrant()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.externalMeetingRegistration".casefold():
            from . import external_meeting_registration

            return external_meeting_registration.ExternalMeetingRegistration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.externalUsersSelfServiceSignUpEventsFlow".casefold():
            from . import external_users_self_service_sign_up_events_flow

            return external_users_self_service_sign_up_events_flow.ExternalUsersSelfServiceSignUpEventsFlow()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.featureRolloutPolicy".casefold():
            from . import feature_rollout_policy

            return feature_rollout_policy.FeatureRolloutPolicy()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.federatedIdentityCredential".casefold():
            from . import federated_identity_credential

            return federated_identity_credential.FederatedIdentityCredential()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.fido2AuthenticationMethod".casefold():
            from . import fido2_authentication_method

            return fido2_authentication_method.Fido2AuthenticationMethod()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.fido2AuthenticationMethodConfiguration".casefold():
            from . import fido2_authentication_method_configuration

            return fido2_authentication_method_configuration.Fido2AuthenticationMethodConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.fido2CombinationConfiguration".casefold():
            from . import fido2_combination_configuration

            return fido2_combination_configuration.Fido2CombinationConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.fieldValueSet".casefold():
            from . import field_value_set

            return field_value_set.FieldValueSet()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.fileAssessmentRequest".casefold():
            from . import file_assessment_request

            return file_assessment_request.FileAssessmentRequest()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.fileAttachment".casefold():
            from . import file_attachment

            return file_attachment.FileAttachment()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.fileClassificationRequest".casefold():
            from . import file_classification_request

            return file_classification_request.FileClassificationRequest()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.fileSecurityProfile".casefold():
            from . import file_security_profile

            return file_security_profile.FileSecurityProfile()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.filterOperatorSchema".casefold():
            from . import filter_operator_schema

            return filter_operator_schema.FilterOperatorSchema()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.focusActivityStatistics".casefold():
            from . import focus_activity_statistics

            return focus_activity_statistics.FocusActivityStatistics()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.governanceInsight".casefold():
            from . import governance_insight

            return governance_insight.GovernanceInsight()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.governancePolicyTemplate".casefold():
            from . import governance_policy_template

            return governance_policy_template.GovernancePolicyTemplate()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.governanceResource".casefold():
            from . import governance_resource

            return governance_resource.GovernanceResource()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.governanceRoleAssignment".casefold():
            from . import governance_role_assignment

            return governance_role_assignment.GovernanceRoleAssignment()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.governanceRoleAssignmentRequest".casefold():
            from . import governance_role_assignment_request

            return governance_role_assignment_request.GovernanceRoleAssignmentRequest()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.governanceRoleDefinition".casefold():
            from . import governance_role_definition

            return governance_role_definition.GovernanceRoleDefinition()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.governanceRoleSetting".casefold():
            from . import governance_role_setting

            return governance_role_setting.GovernanceRoleSetting()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.governanceSubject".casefold():
            from . import governance_subject

            return governance_subject.GovernanceSubject()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.group".casefold():
            from . import group
            from .term_store import group

            return group.Group()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.groupLifecyclePolicy".casefold():
            from . import group_lifecycle_policy

            return group_lifecycle_policy.GroupLifecyclePolicy()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.groupPolicyCategory".casefold():
            from . import group_policy_category

            return group_policy_category.GroupPolicyCategory()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.groupPolicyConfiguration".casefold():
            from . import group_policy_configuration

            return group_policy_configuration.GroupPolicyConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.groupPolicyConfigurationAssignment".casefold():
            from . import group_policy_configuration_assignment

            return group_policy_configuration_assignment.GroupPolicyConfigurationAssignment()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.groupPolicyDefinition".casefold():
            from . import group_policy_definition

            return group_policy_definition.GroupPolicyDefinition()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.groupPolicyDefinitionFile".casefold():
            from . import group_policy_definition_file

            return group_policy_definition_file.GroupPolicyDefinitionFile()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.groupPolicyDefinitionValue".casefold():
            from . import group_policy_definition_value

            return group_policy_definition_value.GroupPolicyDefinitionValue()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.groupPolicyMigrationReport".casefold():
            from . import group_policy_migration_report

            return group_policy_migration_report.GroupPolicyMigrationReport()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.groupPolicyObjectFile".casefold():
            from . import group_policy_object_file

            return group_policy_object_file.GroupPolicyObjectFile()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.groupPolicyOperation".casefold():
            from . import group_policy_operation

            return group_policy_operation.GroupPolicyOperation()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.groupPolicyPresentation".casefold():
            from . import group_policy_presentation

            return group_policy_presentation.GroupPolicyPresentation()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.groupPolicyPresentationCheckBox".casefold():
            from . import group_policy_presentation_check_box

            return group_policy_presentation_check_box.GroupPolicyPresentationCheckBox()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.groupPolicyPresentationComboBox".casefold():
            from . import group_policy_presentation_combo_box

            return group_policy_presentation_combo_box.GroupPolicyPresentationComboBox()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.groupPolicyPresentationDecimalTextBox".casefold():
            from . import group_policy_presentation_decimal_text_box

            return group_policy_presentation_decimal_text_box.GroupPolicyPresentationDecimalTextBox()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.groupPolicyPresentationDropdownList".casefold():
            from . import group_policy_presentation_dropdown_list

            return group_policy_presentation_dropdown_list.GroupPolicyPresentationDropdownList()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.groupPolicyPresentationListBox".casefold():
            from . import group_policy_presentation_list_box

            return group_policy_presentation_list_box.GroupPolicyPresentationListBox()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.groupPolicyPresentationLongDecimalTextBox".casefold():
            from . import group_policy_presentation_long_decimal_text_box

            return group_policy_presentation_long_decimal_text_box.GroupPolicyPresentationLongDecimalTextBox()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.groupPolicyPresentationMultiTextBox".casefold():
            from . import group_policy_presentation_multi_text_box

            return group_policy_presentation_multi_text_box.GroupPolicyPresentationMultiTextBox()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.groupPolicyPresentationText".casefold():
            from . import group_policy_presentation_text

            return group_policy_presentation_text.GroupPolicyPresentationText()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.groupPolicyPresentationTextBox".casefold():
            from . import group_policy_presentation_text_box

            return group_policy_presentation_text_box.GroupPolicyPresentationTextBox()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.groupPolicyPresentationValue".casefold():
            from . import group_policy_presentation_value

            return group_policy_presentation_value.GroupPolicyPresentationValue()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.groupPolicyPresentationValueBoolean".casefold():
            from . import group_policy_presentation_value_boolean

            return group_policy_presentation_value_boolean.GroupPolicyPresentationValueBoolean()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.groupPolicyPresentationValueDecimal".casefold():
            from . import group_policy_presentation_value_decimal

            return group_policy_presentation_value_decimal.GroupPolicyPresentationValueDecimal()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.groupPolicyPresentationValueList".casefold():
            from . import group_policy_presentation_value_list

            return group_policy_presentation_value_list.GroupPolicyPresentationValueList()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.groupPolicyPresentationValueLongDecimal".casefold():
            from . import group_policy_presentation_value_long_decimal

            return group_policy_presentation_value_long_decimal.GroupPolicyPresentationValueLongDecimal()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.groupPolicyPresentationValueMultiText".casefold():
            from . import group_policy_presentation_value_multi_text

            return group_policy_presentation_value_multi_text.GroupPolicyPresentationValueMultiText()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.groupPolicyPresentationValueText".casefold():
            from . import group_policy_presentation_value_text

            return group_policy_presentation_value_text.GroupPolicyPresentationValueText()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.groupPolicySettingMapping".casefold():
            from . import group_policy_setting_mapping

            return group_policy_setting_mapping.GroupPolicySettingMapping()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.groupPolicyUploadedDefinitionFile".casefold():
            from . import group_policy_uploaded_definition_file

            return group_policy_uploaded_definition_file.GroupPolicyUploadedDefinitionFile()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.groupPolicyUploadedPresentation".casefold():
            from . import group_policy_uploaded_presentation

            return group_policy_uploaded_presentation.GroupPolicyUploadedPresentation()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.homeRealmDiscoveryPolicy".casefold():
            from . import home_realm_discovery_policy

            return home_realm_discovery_policy.HomeRealmDiscoveryPolicy()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.horizontalSection".casefold():
            from . import horizontal_section

            return horizontal_section.HorizontalSection()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.horizontalSectionColumn".casefold():
            from . import horizontal_section_column

            return horizontal_section_column.HorizontalSectionColumn()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.hostSecurityProfile".casefold():
            from . import host_security_profile

            return host_security_profile.HostSecurityProfile()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.identityApiConnector".casefold():
            from . import identity_api_connector

            return identity_api_connector.IdentityApiConnector()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.identityBuiltInUserFlowAttribute".casefold():
            from . import identity_built_in_user_flow_attribute

            return identity_built_in_user_flow_attribute.IdentityBuiltInUserFlowAttribute()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.identityCustomUserFlowAttribute".casefold():
            from . import identity_custom_user_flow_attribute

            return identity_custom_user_flow_attribute.IdentityCustomUserFlowAttribute()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.identityGovernance.customTaskExtension".casefold():
            from .identity_governance import custom_task_extension

            return custom_task_extension.CustomTaskExtension()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.identityGovernance.lifecycleManagementSettings".casefold():
            from .identity_governance import lifecycle_management_settings

            return lifecycle_management_settings.LifecycleManagementSettings()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.identityGovernance.lifecycleWorkflowsContainer".casefold():
            from .identity_governance import lifecycle_workflows_container

            return lifecycle_workflows_container.LifecycleWorkflowsContainer()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.identityGovernance.run".casefold():
            from .identity_governance import run

            return run.Run()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.identityGovernance.task".casefold():
            from .identity_governance import task

            return task.Task()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.identityGovernance.taskDefinition".casefold():
            from .identity_governance import task_definition

            return task_definition.TaskDefinition()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.identityGovernance.taskProcessingResult".casefold():
            from .identity_governance import task_processing_result

            return task_processing_result.TaskProcessingResult()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.identityGovernance.taskReport".casefold():
            from .identity_governance import task_report

            return task_report.TaskReport()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.identityGovernance.userProcessingResult".casefold():
            from .identity_governance import user_processing_result

            return user_processing_result.UserProcessingResult()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.identityGovernance.workflowTemplate".casefold():
            from .identity_governance import workflow_template

            return workflow_template.WorkflowTemplate()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.identityProvider".casefold():
            from . import identity_provider

            return identity_provider.IdentityProvider()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.identityProviderBase".casefold():
            from . import identity_provider_base

            return identity_provider_base.IdentityProviderBase()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.identitySecurityDefaultsEnforcementPolicy".casefold():
            from . import identity_security_defaults_enforcement_policy

            return identity_security_defaults_enforcement_policy.IdentitySecurityDefaultsEnforcementPolicy()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.identityUserFlow".casefold():
            from . import identity_user_flow

            return identity_user_flow.IdentityUserFlow()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.identityUserFlowAttribute".casefold():
            from . import identity_user_flow_attribute

            return identity_user_flow_attribute.IdentityUserFlowAttribute()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.identityUserFlowAttributeAssignment".casefold():
            from . import identity_user_flow_attribute_assignment

            return identity_user_flow_attribute_assignment.IdentityUserFlowAttributeAssignment()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.impactedResource".casefold():
            from . import impacted_resource

            return impacted_resource.ImpactedResource()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.importedAppleDeviceIdentity".casefold():
            from . import imported_apple_device_identity

            return imported_apple_device_identity.ImportedAppleDeviceIdentity()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.importedAppleDeviceIdentityResult".casefold():
            from . import imported_apple_device_identity_result

            return imported_apple_device_identity_result.ImportedAppleDeviceIdentityResult()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.importedDeviceIdentity".casefold():
            from . import imported_device_identity

            return imported_device_identity.ImportedDeviceIdentity()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.importedDeviceIdentityResult".casefold():
            from . import imported_device_identity_result

            return imported_device_identity_result.ImportedDeviceIdentityResult()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.importedWindowsAutopilotDeviceIdentity".casefold():
            from . import imported_windows_autopilot_device_identity

            return imported_windows_autopilot_device_identity.ImportedWindowsAutopilotDeviceIdentity()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.importedWindowsAutopilotDeviceIdentityUpload".casefold():
            from . import imported_windows_autopilot_device_identity_upload

            return imported_windows_autopilot_device_identity_upload.ImportedWindowsAutopilotDeviceIdentityUpload()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.industryData.azureDataLakeConnector".casefold():
            from .industry_data import azure_data_lake_connector

            return azure_data_lake_connector.AzureDataLakeConnector()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.industryData.fileDataConnector".casefold():
            from .industry_data import file_data_connector

            return file_data_connector.FileDataConnector()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.industryData.fileValidateOperation".casefold():
            from .industry_data import file_validate_operation

            return file_validate_operation.FileValidateOperation()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.industryData.inboundFileFlow".casefold():
            from .industry_data import inbound_file_flow

            return inbound_file_flow.InboundFileFlow()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.industryData.inboundFlow".casefold():
            from .industry_data import inbound_flow

            return inbound_flow.InboundFlow()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.industryData.inboundFlowActivity".casefold():
            from .industry_data import inbound_flow_activity

            return inbound_flow_activity.InboundFlowActivity()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.industryData.industryDataActivity".casefold():
            from .industry_data import industry_data_activity

            return industry_data_activity.IndustryDataActivity()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.industryData.industryDataConnector".casefold():
            from .industry_data import industry_data_connector

            return industry_data_connector.IndustryDataConnector()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.industryData.industryDataRoot".casefold():
            from .industry_data import industry_data_root

            return industry_data_root.IndustryDataRoot()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.industryData.industryDataRun".casefold():
            from .industry_data import industry_data_run

            return industry_data_run.IndustryDataRun()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.industryData.industryDataRunActivity".casefold():
            from .industry_data import industry_data_run_activity

            return industry_data_run_activity.IndustryDataRunActivity()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.industryData.outboundFlowActivity".casefold():
            from .industry_data import outbound_flow_activity

            return outbound_flow_activity.OutboundFlowActivity()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.industryData.referenceDefinition".casefold():
            from .industry_data import reference_definition

            return reference_definition.ReferenceDefinition()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.industryData.roleGroup".casefold():
            from .industry_data import role_group

            return role_group.RoleGroup()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.industryData.sourceSystemDefinition".casefold():
            from .industry_data import source_system_definition

            return source_system_definition.SourceSystemDefinition()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.industryData.validateOperation".casefold():
            from .industry_data import validate_operation

            return validate_operation.ValidateOperation()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.industryData.yearTimePeriodDefinition".casefold():
            from .industry_data import year_time_period_definition

            return year_time_period_definition.YearTimePeriodDefinition()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.inferenceClassification".casefold():
            from . import inference_classification

            return inference_classification.InferenceClassification()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.inferenceClassificationOverride".casefold():
            from . import inference_classification_override

            return inference_classification_override.InferenceClassificationOverride()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.informationProtection".casefold():
            from . import information_protection
            from .security import information_protection

            return information_protection.InformationProtection()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.informationProtectionLabel".casefold():
            from . import information_protection_label

            return information_protection_label.InformationProtectionLabel()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.informationProtectionPolicy".casefold():
            from . import information_protection_policy

            return information_protection_policy.InformationProtectionPolicy()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.insightsSettings".casefold():
            from . import insights_settings

            return insights_settings.InsightsSettings()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.internalDomainFederation".casefold():
            from . import internal_domain_federation

            return internal_domain_federation.InternalDomainFederation()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.internetExplorerMode".casefold():
            from . import internet_explorer_mode

            return internet_explorer_mode.InternetExplorerMode()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.intuneBrandingProfile".casefold():
            from . import intune_branding_profile

            return intune_branding_profile.IntuneBrandingProfile()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.intuneBrandingProfileAssignment".casefold():
            from . import intune_branding_profile_assignment

            return intune_branding_profile_assignment.IntuneBrandingProfileAssignment()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.invalidLicenseAlertConfiguration".casefold():
            from . import invalid_license_alert_configuration

            return invalid_license_alert_configuration.InvalidLicenseAlertConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.invalidLicenseAlertIncident".casefold():
            from . import invalid_license_alert_incident

            return invalid_license_alert_incident.InvalidLicenseAlertIncident()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.invitation".casefold():
            from . import invitation

            return invitation.Invitation()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.inviteParticipantsOperation".casefold():
            from . import invite_participants_operation

            return invite_participants_operation.InviteParticipantsOperation()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.invokeUserFlowListener".casefold():
            from . import invoke_user_flow_listener

            return invoke_user_flow_listener.InvokeUserFlowListener()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.iosCertificateProfile".casefold():
            from . import ios_certificate_profile

            return ios_certificate_profile.IosCertificateProfile()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.iosCertificateProfileBase".casefold():
            from . import ios_certificate_profile_base

            return ios_certificate_profile_base.IosCertificateProfileBase()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.iosCompliancePolicy".casefold():
            from . import ios_compliance_policy

            return ios_compliance_policy.IosCompliancePolicy()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.iosCustomConfiguration".casefold():
            from . import ios_custom_configuration

            return ios_custom_configuration.IosCustomConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.iosDerivedCredentialAuthenticationConfiguration".casefold():
            from . import ios_derived_credential_authentication_configuration

            return ios_derived_credential_authentication_configuration.IosDerivedCredentialAuthenticationConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.iosDeviceFeaturesConfiguration".casefold():
            from . import ios_device_features_configuration

            return ios_device_features_configuration.IosDeviceFeaturesConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.iosEasEmailProfileConfiguration".casefold():
            from . import ios_eas_email_profile_configuration

            return ios_eas_email_profile_configuration.IosEasEmailProfileConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.iosEducationDeviceConfiguration".casefold():
            from . import ios_education_device_configuration

            return ios_education_device_configuration.IosEducationDeviceConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.iosEduDeviceConfiguration".casefold():
            from . import ios_edu_device_configuration

            return ios_edu_device_configuration.IosEduDeviceConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.iosEnterpriseWiFiConfiguration".casefold():
            from . import ios_enterprise_wi_fi_configuration

            return ios_enterprise_wi_fi_configuration.IosEnterpriseWiFiConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.iosExpeditedCheckinConfiguration".casefold():
            from . import ios_expedited_checkin_configuration

            return ios_expedited_checkin_configuration.IosExpeditedCheckinConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.iosGeneralDeviceConfiguration".casefold():
            from . import ios_general_device_configuration

            return ios_general_device_configuration.IosGeneralDeviceConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.iosikEv2VpnConfiguration".casefold():
            from . import iosik_ev2_vpn_configuration

            return iosik_ev2_vpn_configuration.IosikEv2VpnConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.iosImportedPFXCertificateProfile".casefold():
            from . import ios_imported_p_f_x_certificate_profile

            return ios_imported_p_f_x_certificate_profile.IosImportedPFXCertificateProfile()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.iosiPadOSWebClip".casefold():
            from . import iosi_pad_o_s_web_clip

            return iosi_pad_o_s_web_clip.IosiPadOSWebClip()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.iosLobApp".casefold():
            from . import ios_lob_app

            return ios_lob_app.IosLobApp()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.iosLobAppProvisioningConfiguration".casefold():
            from . import ios_lob_app_provisioning_configuration

            return ios_lob_app_provisioning_configuration.IosLobAppProvisioningConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.iosLobAppProvisioningConfigurationAssignment".casefold():
            from . import ios_lob_app_provisioning_configuration_assignment

            return ios_lob_app_provisioning_configuration_assignment.IosLobAppProvisioningConfigurationAssignment()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.iosLobAppProvisioningConfigurationPolicySetItem".casefold():
            from . import ios_lob_app_provisioning_configuration_policy_set_item

            return ios_lob_app_provisioning_configuration_policy_set_item.IosLobAppProvisioningConfigurationPolicySetItem()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.iosManagedAppProtection".casefold():
            from . import ios_managed_app_protection

            return ios_managed_app_protection.IosManagedAppProtection()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.iosManagedAppRegistration".casefold():
            from . import ios_managed_app_registration

            return ios_managed_app_registration.IosManagedAppRegistration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.iosMobileAppConfiguration".casefold():
            from . import ios_mobile_app_configuration

            return ios_mobile_app_configuration.IosMobileAppConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.iosPkcsCertificateProfile".casefold():
            from . import ios_pkcs_certificate_profile

            return ios_pkcs_certificate_profile.IosPkcsCertificateProfile()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.iosScepCertificateProfile".casefold():
            from . import ios_scep_certificate_profile

            return ios_scep_certificate_profile.IosScepCertificateProfile()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.iosStoreApp".casefold():
            from . import ios_store_app

            return ios_store_app.IosStoreApp()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.iosTrustedRootCertificate".casefold():
            from . import ios_trusted_root_certificate

            return ios_trusted_root_certificate.IosTrustedRootCertificate()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.iosUpdateConfiguration".casefold():
            from . import ios_update_configuration

            return ios_update_configuration.IosUpdateConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.iosUpdateDeviceStatus".casefold():
            from . import ios_update_device_status

            return ios_update_device_status.IosUpdateDeviceStatus()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.iosVpnConfiguration".casefold():
            from . import ios_vpn_configuration

            return ios_vpn_configuration.IosVpnConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.iosVppApp".casefold():
            from . import ios_vpp_app

            return ios_vpp_app.IosVppApp()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.iosVppAppAssignedDeviceLicense".casefold():
            from . import ios_vpp_app_assigned_device_license

            return ios_vpp_app_assigned_device_license.IosVppAppAssignedDeviceLicense()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.iosVppAppAssignedLicense".casefold():
            from . import ios_vpp_app_assigned_license

            return ios_vpp_app_assigned_license.IosVppAppAssignedLicense()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.iosVppAppAssignedUserLicense".casefold():
            from . import ios_vpp_app_assigned_user_license

            return ios_vpp_app_assigned_user_license.IosVppAppAssignedUserLicense()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.iosVppEBook".casefold():
            from . import ios_vpp_e_book

            return ios_vpp_e_book.IosVppEBook()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.iosVppEBookAssignment".casefold():
            from . import ios_vpp_e_book_assignment

            return ios_vpp_e_book_assignment.IosVppEBookAssignment()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.iosWiFiConfiguration".casefold():
            from . import ios_wi_fi_configuration

            return ios_wi_fi_configuration.IosWiFiConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.ipApplicationSegment".casefold():
            from . import ip_application_segment

            return ip_application_segment.IpApplicationSegment()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.ipNamedLocation".casefold():
            from . import ip_named_location

            return ip_named_location.IpNamedLocation()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.ipSecurityProfile".casefold():
            from . import ip_security_profile

            return ip_security_profile.IpSecurityProfile()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.itemActivity".casefold():
            from . import item_activity

            return item_activity.ItemActivity()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.itemActivityOLD".casefold():
            from . import item_activity_o_l_d

            return item_activity_o_l_d.ItemActivityOLD()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.itemActivityStat".casefold():
            from . import item_activity_stat

            return item_activity_stat.ItemActivityStat()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.itemAddress".casefold():
            from . import item_address

            return item_address.ItemAddress()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.itemAnalytics".casefold():
            from . import item_analytics

            return item_analytics.ItemAnalytics()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.itemAttachment".casefold():
            from . import item_attachment

            return item_attachment.ItemAttachment()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.itemEmail".casefold():
            from . import item_email

            return item_email.ItemEmail()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.itemFacet".casefold():
            from . import item_facet

            return item_facet.ItemFacet()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.itemInsights".casefold():
            from . import item_insights

            return item_insights.ItemInsights()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.itemPatent".casefold():
            from . import item_patent

            return item_patent.ItemPatent()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.itemPhone".casefold():
            from . import item_phone

            return item_phone.ItemPhone()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.itemPublication".casefold():
            from . import item_publication

            return item_publication.ItemPublication()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.itemRetentionLabel".casefold():
            from . import item_retention_label

            return item_retention_label.ItemRetentionLabel()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.jobResponseBase".casefold():
            from . import job_response_base

            return job_response_base.JobResponseBase()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.languageProficiency".casefold():
            from . import language_proficiency

            return language_proficiency.LanguageProficiency()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.learningAssignment".casefold():
            from . import learning_assignment

            return learning_assignment.LearningAssignment()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.learningContent".casefold():
            from . import learning_content

            return learning_content.LearningContent()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.learningCourseActivity".casefold():
            from . import learning_course_activity

            return learning_course_activity.LearningCourseActivity()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.learningProvider".casefold():
            from . import learning_provider

            return learning_provider.LearningProvider()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.learningSelfInitiatedCourse".casefold():
            from . import learning_self_initiated_course

            return learning_self_initiated_course.LearningSelfInitiatedCourse()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.licenseDetails".casefold():
            from . import license_details

            return license_details.LicenseDetails()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.linkedResource".casefold():
            from . import linked_resource

            return linked_resource.LinkedResource()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.list".casefold():
            from . import list

            return list.List()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.listItem".casefold():
            from . import list_item

            return list_item.ListItem()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.listItemVersion".casefold():
            from . import list_item_version

            return list_item_version.ListItemVersion()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.localizedNotificationMessage".casefold():
            from . import localized_notification_message

            return localized_notification_message.LocalizedNotificationMessage()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.longRunningOperation".casefold():
            from . import long_running_operation

            return long_running_operation.LongRunningOperation()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.lookupResultRow".casefold():
            from . import lookup_result_row

            return lookup_result_row.LookupResultRow()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.macOSCertificateProfileBase".casefold():
            from . import mac_o_s_certificate_profile_base

            return mac_o_s_certificate_profile_base.MacOSCertificateProfileBase()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.macOSCompliancePolicy".casefold():
            from . import mac_o_s_compliance_policy

            return mac_o_s_compliance_policy.MacOSCompliancePolicy()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.macOSCustomAppConfiguration".casefold():
            from . import mac_o_s_custom_app_configuration

            return mac_o_s_custom_app_configuration.MacOSCustomAppConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.macOSCustomConfiguration".casefold():
            from . import mac_o_s_custom_configuration

            return mac_o_s_custom_configuration.MacOSCustomConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.macOSDeviceFeaturesConfiguration".casefold():
            from . import mac_o_s_device_features_configuration

            return mac_o_s_device_features_configuration.MacOSDeviceFeaturesConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.macOSDmgApp".casefold():
            from . import mac_o_s_dmg_app

            return mac_o_s_dmg_app.MacOSDmgApp()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.macOSEndpointProtectionConfiguration".casefold():
            from . import mac_o_s_endpoint_protection_configuration

            return mac_o_s_endpoint_protection_configuration.MacOSEndpointProtectionConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.macOSEnterpriseWiFiConfiguration".casefold():
            from . import mac_o_s_enterprise_wi_fi_configuration

            return mac_o_s_enterprise_wi_fi_configuration.MacOSEnterpriseWiFiConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.macOSExtensionsConfiguration".casefold():
            from . import mac_o_s_extensions_configuration

            return mac_o_s_extensions_configuration.MacOSExtensionsConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.macOSGeneralDeviceConfiguration".casefold():
            from . import mac_o_s_general_device_configuration

            return mac_o_s_general_device_configuration.MacOSGeneralDeviceConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.macOSImportedPFXCertificateProfile".casefold():
            from . import mac_o_s_imported_p_f_x_certificate_profile

            return mac_o_s_imported_p_f_x_certificate_profile.MacOSImportedPFXCertificateProfile()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.macOSLobApp".casefold():
            from . import mac_o_s_lob_app

            return mac_o_s_lob_app.MacOSLobApp()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.macOSMdatpApp".casefold():
            from . import mac_o_s_mdatp_app

            return mac_o_s_mdatp_app.MacOSMdatpApp()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.macOSMicrosoftDefenderApp".casefold():
            from . import mac_o_s_microsoft_defender_app

            return mac_o_s_microsoft_defender_app.MacOSMicrosoftDefenderApp()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.macOSMicrosoftEdgeApp".casefold():
            from . import mac_o_s_microsoft_edge_app

            return mac_o_s_microsoft_edge_app.MacOSMicrosoftEdgeApp()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.macOSOfficeSuiteApp".casefold():
            from . import mac_o_s_office_suite_app

            return mac_o_s_office_suite_app.MacOSOfficeSuiteApp()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.macOSPkcsCertificateProfile".casefold():
            from . import mac_o_s_pkcs_certificate_profile

            return mac_o_s_pkcs_certificate_profile.MacOSPkcsCertificateProfile()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.macOSPkgApp".casefold():
            from . import mac_o_s_pkg_app

            return mac_o_s_pkg_app.MacOSPkgApp()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.macOSScepCertificateProfile".casefold():
            from . import mac_o_s_scep_certificate_profile

            return mac_o_s_scep_certificate_profile.MacOSScepCertificateProfile()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.macOSSoftwareUpdateAccountSummary".casefold():
            from . import mac_o_s_software_update_account_summary

            return mac_o_s_software_update_account_summary.MacOSSoftwareUpdateAccountSummary()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.macOSSoftwareUpdateCategorySummary".casefold():
            from . import mac_o_s_software_update_category_summary

            return mac_o_s_software_update_category_summary.MacOSSoftwareUpdateCategorySummary()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.macOSSoftwareUpdateConfiguration".casefold():
            from . import mac_o_s_software_update_configuration

            return mac_o_s_software_update_configuration.MacOSSoftwareUpdateConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.macOSSoftwareUpdateStateSummary".casefold():
            from . import mac_o_s_software_update_state_summary

            return mac_o_s_software_update_state_summary.MacOSSoftwareUpdateStateSummary()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.macOSTrustedRootCertificate".casefold():
            from . import mac_o_s_trusted_root_certificate

            return mac_o_s_trusted_root_certificate.MacOSTrustedRootCertificate()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.macOSVpnConfiguration".casefold():
            from . import mac_o_s_vpn_configuration

            return mac_o_s_vpn_configuration.MacOSVpnConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.macOsVppApp".casefold():
            from . import mac_os_vpp_app

            return mac_os_vpp_app.MacOsVppApp()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.macOsVppAppAssignedLicense".casefold():
            from . import mac_os_vpp_app_assigned_license

            return mac_os_vpp_app_assigned_license.MacOsVppAppAssignedLicense()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.macOSWiFiConfiguration".casefold():
            from . import mac_o_s_wi_fi_configuration

            return mac_o_s_wi_fi_configuration.MacOSWiFiConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.macOSWiredNetworkConfiguration".casefold():
            from . import mac_o_s_wired_network_configuration

            return mac_o_s_wired_network_configuration.MacOSWiredNetworkConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.mailAssessmentRequest".casefold():
            from . import mail_assessment_request

            return mail_assessment_request.MailAssessmentRequest()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.mailFolder".casefold():
            from . import mail_folder

            return mail_folder.MailFolder()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.mailSearchFolder".casefold():
            from . import mail_search_folder

            return mail_search_folder.MailSearchFolder()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.malwareStateForWindowsDevice".casefold():
            from . import malware_state_for_windows_device

            return malware_state_for_windows_device.MalwareStateForWindowsDevice()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.managedAllDeviceCertificateState".casefold():
            from . import managed_all_device_certificate_state

            return managed_all_device_certificate_state.ManagedAllDeviceCertificateState()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.managedAndroidLobApp".casefold():
            from . import managed_android_lob_app

            return managed_android_lob_app.ManagedAndroidLobApp()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.managedAndroidStoreApp".casefold():
            from . import managed_android_store_app

            return managed_android_store_app.ManagedAndroidStoreApp()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.managedApp".casefold():
            from . import managed_app

            return managed_app.ManagedApp()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.managedAppConfiguration".casefold():
            from . import managed_app_configuration

            return managed_app_configuration.ManagedAppConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.managedAppOperation".casefold():
            from . import managed_app_operation

            return managed_app_operation.ManagedAppOperation()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.managedAppPolicy".casefold():
            from . import managed_app_policy

            return managed_app_policy.ManagedAppPolicy()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.managedAppPolicyDeploymentSummary".casefold():
            from . import managed_app_policy_deployment_summary

            return managed_app_policy_deployment_summary.ManagedAppPolicyDeploymentSummary()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.managedAppProtection".casefold():
            from . import managed_app_protection

            return managed_app_protection.ManagedAppProtection()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.managedAppProtectionPolicySetItem".casefold():
            from . import managed_app_protection_policy_set_item

            return managed_app_protection_policy_set_item.ManagedAppProtectionPolicySetItem()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.managedAppRegistration".casefold():
            from . import managed_app_registration

            return managed_app_registration.ManagedAppRegistration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.managedAppStatus".casefold():
            from . import managed_app_status

            return managed_app_status.ManagedAppStatus()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.managedAppStatusRaw".casefold():
            from . import managed_app_status_raw

            return managed_app_status_raw.ManagedAppStatusRaw()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.managedDevice".casefold():
            from . import managed_device

            return managed_device.ManagedDevice()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.managedDeviceCertificateState".casefold():
            from . import managed_device_certificate_state

            return managed_device_certificate_state.ManagedDeviceCertificateState()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.managedDeviceEncryptionState".casefold():
            from . import managed_device_encryption_state

            return managed_device_encryption_state.ManagedDeviceEncryptionState()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.managedDeviceMobileAppConfiguration".casefold():
            from . import managed_device_mobile_app_configuration

            return managed_device_mobile_app_configuration.ManagedDeviceMobileAppConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.managedDeviceMobileAppConfigurationAssignment".casefold():
            from . import managed_device_mobile_app_configuration_assignment

            return managed_device_mobile_app_configuration_assignment.ManagedDeviceMobileAppConfigurationAssignment()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.managedDeviceMobileAppConfigurationDeviceStatus".casefold():
            from . import managed_device_mobile_app_configuration_device_status

            return managed_device_mobile_app_configuration_device_status.ManagedDeviceMobileAppConfigurationDeviceStatus()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.managedDeviceMobileAppConfigurationDeviceSummary".casefold():
            from . import managed_device_mobile_app_configuration_device_summary

            return managed_device_mobile_app_configuration_device_summary.ManagedDeviceMobileAppConfigurationDeviceSummary()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.managedDeviceMobileAppConfigurationPolicySetItem".casefold():
            from . import managed_device_mobile_app_configuration_policy_set_item

            return managed_device_mobile_app_configuration_policy_set_item.ManagedDeviceMobileAppConfigurationPolicySetItem()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.managedDeviceMobileAppConfigurationState".casefold():
            from . import managed_device_mobile_app_configuration_state

            return managed_device_mobile_app_configuration_state.ManagedDeviceMobileAppConfigurationState()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.managedDeviceMobileAppConfigurationUserStatus".casefold():
            from . import managed_device_mobile_app_configuration_user_status

            return managed_device_mobile_app_configuration_user_status.ManagedDeviceMobileAppConfigurationUserStatus()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.managedDeviceMobileAppConfigurationUserSummary".casefold():
            from . import managed_device_mobile_app_configuration_user_summary

            return managed_device_mobile_app_configuration_user_summary.ManagedDeviceMobileAppConfigurationUserSummary()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.managedDeviceOverview".casefold():
            from . import managed_device_overview

            return managed_device_overview.ManagedDeviceOverview()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.managedEBook".casefold():
            from . import managed_e_book

            return managed_e_book.ManagedEBook()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.managedEBookAssignment".casefold():
            from . import managed_e_book_assignment

            return managed_e_book_assignment.ManagedEBookAssignment()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.managedEBookCategory".casefold():
            from . import managed_e_book_category

            return managed_e_book_category.ManagedEBookCategory()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.managedIOSLobApp".casefold():
            from . import managed_i_o_s_lob_app

            return managed_i_o_s_lob_app.ManagedIOSLobApp()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.managedIOSStoreApp".casefold():
            from . import managed_i_o_s_store_app

            return managed_i_o_s_store_app.ManagedIOSStoreApp()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.managedMobileApp".casefold():
            from . import managed_mobile_app

            return managed_mobile_app.ManagedMobileApp()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.managedMobileLobApp".casefold():
            from . import managed_mobile_lob_app

            return managed_mobile_lob_app.ManagedMobileLobApp()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.managedTenants.aggregatedPolicyCompliance".casefold():
            from .managed_tenants import aggregated_policy_compliance

            return aggregated_policy_compliance.AggregatedPolicyCompliance()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.managedTenants.appPerformance".casefold():
            from .managed_tenants import app_performance

            return app_performance.AppPerformance()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.managedTenants.auditEvent".casefold():
            from . import audit_event
            from .managed_tenants import audit_event

            return audit_event.AuditEvent()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.managedTenants.cloudPcConnection".casefold():
            from .managed_tenants import cloud_pc_connection

            return cloud_pc_connection.CloudPcConnection()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.managedTenants.cloudPcDevice".casefold():
            from .managed_tenants import cloud_pc_device

            return cloud_pc_device.CloudPcDevice()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.managedTenants.cloudPcOverview".casefold():
            from .managed_tenants import cloud_pc_overview

            return cloud_pc_overview.CloudPcOverview()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.managedTenants.conditionalAccessPolicyCoverage".casefold():
            from .managed_tenants import conditional_access_policy_coverage

            return conditional_access_policy_coverage.ConditionalAccessPolicyCoverage()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.managedTenants.credentialUserRegistrationsSummary".casefold():
            from .managed_tenants import credential_user_registrations_summary

            return credential_user_registrations_summary.CredentialUserRegistrationsSummary()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.managedTenants.deviceAppPerformance".casefold():
            from .managed_tenants import device_app_performance

            return device_app_performance.DeviceAppPerformance()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.managedTenants.deviceCompliancePolicySettingStateSummary".casefold():
            from . import device_compliance_policy_setting_state_summary
            from .managed_tenants import device_compliance_policy_setting_state_summary

            return device_compliance_policy_setting_state_summary.DeviceCompliancePolicySettingStateSummary()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.managedTenants.deviceHealthStatus".casefold():
            from .managed_tenants import device_health_status

            return device_health_status.DeviceHealthStatus()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.managedTenants.managedDeviceCompliance".casefold():
            from .managed_tenants import managed_device_compliance

            return managed_device_compliance.ManagedDeviceCompliance()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.managedTenants.managedDeviceComplianceTrend".casefold():
            from .managed_tenants import managed_device_compliance_trend

            return managed_device_compliance_trend.ManagedDeviceComplianceTrend()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.managedTenants.managedTenant".casefold():
            from .managed_tenants import managed_tenant

            return managed_tenant.ManagedTenant()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.managedTenants.managedTenantAlert".casefold():
            from .managed_tenants import managed_tenant_alert

            return managed_tenant_alert.ManagedTenantAlert()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.managedTenants.managedTenantAlertLog".casefold():
            from .managed_tenants import managed_tenant_alert_log

            return managed_tenant_alert_log.ManagedTenantAlertLog()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.managedTenants.managedTenantAlertRule".casefold():
            from .managed_tenants import managed_tenant_alert_rule

            return managed_tenant_alert_rule.ManagedTenantAlertRule()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.managedTenants.managedTenantAlertRuleDefinition".casefold():
            from .managed_tenants import managed_tenant_alert_rule_definition

            return managed_tenant_alert_rule_definition.ManagedTenantAlertRuleDefinition()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.managedTenants.managedTenantApiNotification".casefold():
            from .managed_tenants import managed_tenant_api_notification

            return managed_tenant_api_notification.ManagedTenantApiNotification()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.managedTenants.managedTenantEmailNotification".casefold():
            from .managed_tenants import managed_tenant_email_notification

            return managed_tenant_email_notification.ManagedTenantEmailNotification()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.managedTenants.managedTenantTicketingEndpoint".casefold():
            from .managed_tenants import managed_tenant_ticketing_endpoint

            return managed_tenant_ticketing_endpoint.ManagedTenantTicketingEndpoint()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.managedTenants.managementAction".casefold():
            from .managed_tenants import management_action

            return management_action.ManagementAction()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.managedTenants.managementActionTenantDeploymentStatus".casefold():
            from .managed_tenants import management_action_tenant_deployment_status

            return management_action_tenant_deployment_status.ManagementActionTenantDeploymentStatus()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.managedTenants.managementIntent".casefold():
            from .managed_tenants import management_intent

            return management_intent.ManagementIntent()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.managedTenants.managementTemplate".casefold():
            from .managed_tenants import management_template

            return management_template.ManagementTemplate()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.managedTenants.managementTemplateCollection".casefold():
            from .managed_tenants import management_template_collection

            return management_template_collection.ManagementTemplateCollection()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.managedTenants.managementTemplateCollectionTenantSummary".casefold():
            from .managed_tenants import management_template_collection_tenant_summary

            return management_template_collection_tenant_summary.ManagementTemplateCollectionTenantSummary()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.managedTenants.managementTemplateStep".casefold():
            from .managed_tenants import management_template_step

            return management_template_step.ManagementTemplateStep()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.managedTenants.managementTemplateStepDeployment".casefold():
            from .managed_tenants import management_template_step_deployment

            return management_template_step_deployment.ManagementTemplateStepDeployment()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.managedTenants.managementTemplateStepTenantSummary".casefold():
            from .managed_tenants import management_template_step_tenant_summary

            return management_template_step_tenant_summary.ManagementTemplateStepTenantSummary()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.managedTenants.managementTemplateStepVersion".casefold():
            from .managed_tenants import management_template_step_version

            return management_template_step_version.ManagementTemplateStepVersion()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.managedTenants.tenant".casefold():
            from .managed_tenants import tenant

            return tenant.Tenant()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.managedTenants.tenantCustomizedInformation".casefold():
            from .managed_tenants import tenant_customized_information

            return tenant_customized_information.TenantCustomizedInformation()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.managedTenants.tenantDetailedInformation".casefold():
            from .managed_tenants import tenant_detailed_information

            return tenant_detailed_information.TenantDetailedInformation()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.managedTenants.tenantGroup".casefold():
            from .managed_tenants import tenant_group

            return tenant_group.TenantGroup()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.managedTenants.tenantTag".casefold():
            from .managed_tenants import tenant_tag

            return tenant_tag.TenantTag()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.managedTenants.windowsDeviceMalwareState".casefold():
            from . import windows_device_malware_state
            from .managed_tenants import windows_device_malware_state

            return windows_device_malware_state.WindowsDeviceMalwareState()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.managedTenants.windowsProtectionState".casefold():
            from . import windows_protection_state
            from .managed_tenants import windows_protection_state

            return windows_protection_state.WindowsProtectionState()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.mdmWindowsInformationProtectionPolicy".casefold():
            from . import mdm_windows_information_protection_policy

            return mdm_windows_information_protection_policy.MdmWindowsInformationProtectionPolicy()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.mdmWindowsInformationProtectionPolicyPolicySetItem".casefold():
            from . import mdm_windows_information_protection_policy_policy_set_item

            return mdm_windows_information_protection_policy_policy_set_item.MdmWindowsInformationProtectionPolicyPolicySetItem()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.meetingActivityStatistics".casefold():
            from . import meeting_activity_statistics

            return meeting_activity_statistics.MeetingActivityStatistics()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.meetingAttendanceReport".casefold():
            from . import meeting_attendance_report

            return meeting_attendance_report.MeetingAttendanceReport()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.meetingRegistrant".casefold():
            from . import meeting_registrant

            return meeting_registrant.MeetingRegistrant()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.meetingRegistrantBase".casefold():
            from . import meeting_registrant_base

            return meeting_registrant_base.MeetingRegistrantBase()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.meetingRegistration".casefold():
            from . import meeting_registration

            return meeting_registration.MeetingRegistration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.meetingRegistrationBase".casefold():
            from . import meeting_registration_base

            return meeting_registration_base.MeetingRegistrationBase()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.meetingRegistrationQuestion".casefold():
            from . import meeting_registration_question

            return meeting_registration_question.MeetingRegistrationQuestion()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.membershipOutlierInsight".casefold():
            from . import membership_outlier_insight

            return membership_outlier_insight.MembershipOutlierInsight()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.mention".casefold():
            from . import mention

            return mention.Mention()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.message".casefold():
            from . import message

            return message.Message()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.messageEvent".casefold():
            from . import message_event

            return message_event.MessageEvent()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.messageRecipient".casefold():
            from . import message_recipient

            return message_recipient.MessageRecipient()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.messageRule".casefold():
            from . import message_rule

            return message_rule.MessageRule()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.messageTrace".casefold():
            from . import message_trace

            return message_trace.MessageTrace()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.microsoftAccountUserConversationMember".casefold():
            from . import microsoft_account_user_conversation_member

            return microsoft_account_user_conversation_member.MicrosoftAccountUserConversationMember()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.microsoftApplicationDataAccessSettings".casefold():
            from . import microsoft_application_data_access_settings

            return microsoft_application_data_access_settings.MicrosoftApplicationDataAccessSettings()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.microsoftAuthenticatorAuthenticationMethod".casefold():
            from . import microsoft_authenticator_authentication_method

            return microsoft_authenticator_authentication_method.MicrosoftAuthenticatorAuthenticationMethod()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.microsoftAuthenticatorAuthenticationMethodConfiguration".casefold():
            from . import microsoft_authenticator_authentication_method_configuration

            return microsoft_authenticator_authentication_method_configuration.MicrosoftAuthenticatorAuthenticationMethodConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.microsoftAuthenticatorAuthenticationMethodTarget".casefold():
            from . import microsoft_authenticator_authentication_method_target

            return microsoft_authenticator_authentication_method_target.MicrosoftAuthenticatorAuthenticationMethodTarget()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.microsoftStoreForBusinessApp".casefold():
            from . import microsoft_store_for_business_app

            return microsoft_store_for_business_app.MicrosoftStoreForBusinessApp()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.microsoftStoreForBusinessContainedApp".casefold():
            from . import microsoft_store_for_business_contained_app

            return microsoft_store_for_business_contained_app.MicrosoftStoreForBusinessContainedApp()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.microsoftTunnelConfiguration".casefold():
            from . import microsoft_tunnel_configuration

            return microsoft_tunnel_configuration.MicrosoftTunnelConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.microsoftTunnelHealthThreshold".casefold():
            from . import microsoft_tunnel_health_threshold

            return microsoft_tunnel_health_threshold.MicrosoftTunnelHealthThreshold()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.microsoftTunnelServer".casefold():
            from . import microsoft_tunnel_server

            return microsoft_tunnel_server.MicrosoftTunnelServer()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.microsoftTunnelServerLogCollectionResponse".casefold():
            from . import microsoft_tunnel_server_log_collection_response

            return microsoft_tunnel_server_log_collection_response.MicrosoftTunnelServerLogCollectionResponse()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.microsoftTunnelSite".casefold():
            from . import microsoft_tunnel_site

            return microsoft_tunnel_site.MicrosoftTunnelSite()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.mobileApp".casefold():
            from . import mobile_app

            return mobile_app.MobileApp()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.mobileAppAssignment".casefold():
            from . import mobile_app_assignment

            return mobile_app_assignment.MobileAppAssignment()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.mobileAppCategory".casefold():
            from . import mobile_app_category

            return mobile_app_category.MobileAppCategory()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.mobileAppContent".casefold():
            from . import mobile_app_content

            return mobile_app_content.MobileAppContent()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.mobileAppContentFile".casefold():
            from . import mobile_app_content_file

            return mobile_app_content_file.MobileAppContentFile()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.mobileAppDependency".casefold():
            from . import mobile_app_dependency

            return mobile_app_dependency.MobileAppDependency()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.mobileAppInstallStatus".casefold():
            from . import mobile_app_install_status

            return mobile_app_install_status.MobileAppInstallStatus()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.mobileAppInstallSummary".casefold():
            from . import mobile_app_install_summary

            return mobile_app_install_summary.MobileAppInstallSummary()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.mobileAppIntentAndState".casefold():
            from . import mobile_app_intent_and_state

            return mobile_app_intent_and_state.MobileAppIntentAndState()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.mobileAppPolicySetItem".casefold():
            from . import mobile_app_policy_set_item

            return mobile_app_policy_set_item.MobileAppPolicySetItem()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.mobileAppProvisioningConfigGroupAssignment".casefold():
            from . import mobile_app_provisioning_config_group_assignment

            return mobile_app_provisioning_config_group_assignment.MobileAppProvisioningConfigGroupAssignment()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.mobileAppRelationship".casefold():
            from . import mobile_app_relationship

            return mobile_app_relationship.MobileAppRelationship()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.mobileAppSupersedence".casefold():
            from . import mobile_app_supersedence

            return mobile_app_supersedence.MobileAppSupersedence()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.mobileAppTroubleshootingEvent".casefold():
            from . import mobile_app_troubleshooting_event

            return mobile_app_troubleshooting_event.MobileAppTroubleshootingEvent()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.mobileContainedApp".casefold():
            from . import mobile_contained_app

            return mobile_contained_app.MobileContainedApp()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.mobileLobApp".casefold():
            from . import mobile_lob_app

            return mobile_lob_app.MobileLobApp()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.mobileThreatDefenseConnector".casefold():
            from . import mobile_threat_defense_connector

            return mobile_threat_defense_connector.MobileThreatDefenseConnector()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.mobilityManagementPolicy".casefold():
            from . import mobility_management_policy

            return mobility_management_policy.MobilityManagementPolicy()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.multiValueLegacyExtendedProperty".casefold():
            from . import multi_value_legacy_extended_property

            return multi_value_legacy_extended_property.MultiValueLegacyExtendedProperty()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.muteParticipantOperation".casefold():
            from . import mute_participant_operation

            return mute_participant_operation.MuteParticipantOperation()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.muteParticipantsOperation".casefold():
            from . import mute_participants_operation

            return mute_participants_operation.MuteParticipantsOperation()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.namedLocation".casefold():
            from . import named_location

            return named_location.NamedLocation()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.ndesConnector".casefold():
            from . import ndes_connector

            return ndes_connector.NdesConnector()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.networkaccess.branchSite".casefold():
            from .networkaccess import branch_site

            return branch_site.BranchSite()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.networkaccess.conditionalAccessPolicy".casefold():
            from . import conditional_access_policy
            from .networkaccess import conditional_access_policy

            return conditional_access_policy.ConditionalAccessPolicy()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.networkaccess.conditionalAccessSettings".casefold():
            from .networkaccess import conditional_access_settings

            return conditional_access_settings.ConditionalAccessSettings()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.networkaccess.connectivity".casefold():
            from .networkaccess import connectivity

            return connectivity.Connectivity()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.networkaccess.crossTenantAccessSettings".casefold():
            from .networkaccess import cross_tenant_access_settings

            return cross_tenant_access_settings.CrossTenantAccessSettings()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.networkaccess.deviceLink".casefold():
            from .networkaccess import device_link

            return device_link.DeviceLink()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.networkaccess.enrichedAuditLogs".casefold():
            from .networkaccess import enriched_audit_logs

            return enriched_audit_logs.EnrichedAuditLogs()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.networkaccess.forwardingOptions".casefold():
            from .networkaccess import forwarding_options

            return forwarding_options.ForwardingOptions()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.networkaccess.forwardingPolicy".casefold():
            from .networkaccess import forwarding_policy

            return forwarding_policy.ForwardingPolicy()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.networkaccess.forwardingPolicyLink".casefold():
            from .networkaccess import forwarding_policy_link

            return forwarding_policy_link.ForwardingPolicyLink()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.networkaccess.forwardingProfile".casefold():
            from .networkaccess import forwarding_profile

            return forwarding_profile.ForwardingProfile()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.networkaccess.forwardingRule".casefold():
            from .networkaccess import forwarding_rule

            return forwarding_rule.ForwardingRule()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.networkaccess.logs".casefold():
            from .networkaccess import logs

            return logs.Logs()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.networkaccess.m365ForwardingRule".casefold():
            from .networkaccess import m365_forwarding_rule

            return m365_forwarding_rule.M365ForwardingRule()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.networkaccess.networkAccessRoot".casefold():
            from .networkaccess import network_access_root

            return network_access_root.NetworkAccessRoot()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.networkaccess.policy".casefold():
            from .networkaccess import policy

            return policy.Policy()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.networkaccess.policyLink".casefold():
            from .networkaccess import policy_link

            return policy_link.PolicyLink()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.networkaccess.policyRule".casefold():
            from .networkaccess import policy_rule

            return policy_rule.PolicyRule()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.networkaccess.privateAccessForwardingRule".casefold():
            from .networkaccess import private_access_forwarding_rule

            return private_access_forwarding_rule.PrivateAccessForwardingRule()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.networkaccess.profile".casefold():
            from . import profile
            from .networkaccess import profile

            return profile.Profile()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.networkaccess.reports".casefold():
            from .networkaccess import reports

            return reports.Reports()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.networkaccess.settings".casefold():
            from .networkaccess import settings

            return settings.Settings()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.networkaccess.tenantStatus".casefold():
            from .networkaccess import tenant_status

            return tenant_status.TenantStatus()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.noMfaOnRoleActivationAlertConfiguration".casefold():
            from . import no_mfa_on_role_activation_alert_configuration

            return no_mfa_on_role_activation_alert_configuration.NoMfaOnRoleActivationAlertConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.noMfaOnRoleActivationAlertIncident".casefold():
            from . import no_mfa_on_role_activation_alert_incident

            return no_mfa_on_role_activation_alert_incident.NoMfaOnRoleActivationAlertIncident()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.note".casefold():
            from . import note

            return note.Note()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.notebook".casefold():
            from . import notebook

            return notebook.Notebook()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.notification".casefold():
            from . import notification

            return notification.Notification()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.notificationMessageTemplate".casefold():
            from . import notification_message_template

            return notification_message_template.NotificationMessageTemplate()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.oAuth2PermissionGrant".casefold():
            from . import o_auth2_permission_grant

            return o_auth2_permission_grant.OAuth2PermissionGrant()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.offerShiftRequest".casefold():
            from . import offer_shift_request

            return offer_shift_request.OfferShiftRequest()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.office365ActiveUserCounts".casefold():
            from . import office365_active_user_counts

            return office365_active_user_counts.Office365ActiveUserCounts()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.office365ActiveUserDetail".casefold():
            from . import office365_active_user_detail

            return office365_active_user_detail.Office365ActiveUserDetail()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.office365GroupsActivityCounts".casefold():
            from . import office365_groups_activity_counts

            return office365_groups_activity_counts.Office365GroupsActivityCounts()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.office365GroupsActivityDetail".casefold():
            from . import office365_groups_activity_detail

            return office365_groups_activity_detail.Office365GroupsActivityDetail()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.office365GroupsActivityFileCounts".casefold():
            from . import office365_groups_activity_file_counts

            return office365_groups_activity_file_counts.Office365GroupsActivityFileCounts()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.office365GroupsActivityGroupCounts".casefold():
            from . import office365_groups_activity_group_counts

            return office365_groups_activity_group_counts.Office365GroupsActivityGroupCounts()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.office365GroupsActivityStorage".casefold():
            from . import office365_groups_activity_storage

            return office365_groups_activity_storage.Office365GroupsActivityStorage()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.office365ServicesUserCounts".casefold():
            from . import office365_services_user_counts

            return office365_services_user_counts.Office365ServicesUserCounts()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.officeGraphInsights".casefold():
            from . import office_graph_insights

            return office_graph_insights.OfficeGraphInsights()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.officeSuiteApp".casefold():
            from . import office_suite_app

            return office_suite_app.OfficeSuiteApp()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.onAttributeCollectionListener".casefold():
            from . import on_attribute_collection_listener

            return on_attribute_collection_listener.OnAttributeCollectionListener()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.onAuthenticationMethodLoadStartListener".casefold():
            from . import on_authentication_method_load_start_listener

            return on_authentication_method_load_start_listener.OnAuthenticationMethodLoadStartListener()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.onenote".casefold():
            from . import onenote

            return onenote.Onenote()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.onenoteEntityBaseModel".casefold():
            from . import onenote_entity_base_model

            return onenote_entity_base_model.OnenoteEntityBaseModel()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.onenoteEntityHierarchyModel".casefold():
            from . import onenote_entity_hierarchy_model

            return onenote_entity_hierarchy_model.OnenoteEntityHierarchyModel()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.onenoteEntitySchemaObjectModel".casefold():
            from . import onenote_entity_schema_object_model

            return onenote_entity_schema_object_model.OnenoteEntitySchemaObjectModel()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.onenoteOperation".casefold():
            from . import onenote_operation

            return onenote_operation.OnenoteOperation()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.onenotePage".casefold():
            from . import onenote_page

            return onenote_page.OnenotePage()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.onenoteResource".casefold():
            from . import onenote_resource

            return onenote_resource.OnenoteResource()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.onenoteSection".casefold():
            from . import onenote_section

            return onenote_section.OnenoteSection()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.onInteractiveAuthFlowStartListener".casefold():
            from . import on_interactive_auth_flow_start_listener

            return on_interactive_auth_flow_start_listener.OnInteractiveAuthFlowStartListener()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.onlineMeeting".casefold():
            from . import online_meeting

            return online_meeting.OnlineMeeting()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.onPremisesAgent".casefold():
            from . import on_premises_agent

            return on_premises_agent.OnPremisesAgent()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.onPremisesAgentGroup".casefold():
            from . import on_premises_agent_group

            return on_premises_agent_group.OnPremisesAgentGroup()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.onPremisesConditionalAccessSettings".casefold():
            from . import on_premises_conditional_access_settings

            return on_premises_conditional_access_settings.OnPremisesConditionalAccessSettings()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.onPremisesDirectorySynchronization".casefold():
            from . import on_premises_directory_synchronization

            return on_premises_directory_synchronization.OnPremisesDirectorySynchronization()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.onPremisesPublishingProfile".casefold():
            from . import on_premises_publishing_profile

            return on_premises_publishing_profile.OnPremisesPublishingProfile()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.onTokenIssuanceStartCustomExtension".casefold():
            from . import on_token_issuance_start_custom_extension

            return on_token_issuance_start_custom_extension.OnTokenIssuanceStartCustomExtension()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.onTokenIssuanceStartListener".casefold():
            from . import on_token_issuance_start_listener

            return on_token_issuance_start_listener.OnTokenIssuanceStartListener()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.onUserCreateStartListener".casefold():
            from . import on_user_create_start_listener

            return on_user_create_start_listener.OnUserCreateStartListener()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.openIdConnectIdentityProvider".casefold():
            from . import open_id_connect_identity_provider

            return open_id_connect_identity_provider.OpenIdConnectIdentityProvider()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.openIdConnectProvider".casefold():
            from . import open_id_connect_provider

            return open_id_connect_provider.OpenIdConnectProvider()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.openShift".casefold():
            from . import open_shift

            return open_shift.OpenShift()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.openShiftChangeRequest".casefold():
            from . import open_shift_change_request

            return open_shift_change_request.OpenShiftChangeRequest()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.openTypeExtension".casefold():
            from . import open_type_extension

            return open_type_extension.OpenTypeExtension()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.operation".casefold():
            from . import operation

            return operation.Operation()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.organization".casefold():
            from . import organization

            return organization.Organization()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.organizationalBranding".casefold():
            from . import organizational_branding

            return organizational_branding.OrganizationalBranding()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.organizationalBrandingLocalization".casefold():
            from . import organizational_branding_localization

            return organizational_branding_localization.OrganizationalBrandingLocalization()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.organizationalBrandingProperties".casefold():
            from . import organizational_branding_properties

            return organizational_branding_properties.OrganizationalBrandingProperties()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.organizationSettings".casefold():
            from . import organization_settings

            return organization_settings.OrganizationSettings()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.orgContact".casefold():
            from . import org_contact

            return org_contact.OrgContact()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.outlookCategory".casefold():
            from . import outlook_category

            return outlook_category.OutlookCategory()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.outlookItem".casefold():
            from . import outlook_item

            return outlook_item.OutlookItem()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.outlookTask".casefold():
            from . import outlook_task

            return outlook_task.OutlookTask()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.outlookTaskFolder".casefold():
            from . import outlook_task_folder

            return outlook_task_folder.OutlookTaskFolder()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.outlookTaskGroup".casefold():
            from . import outlook_task_group

            return outlook_task_group.OutlookTaskGroup()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.outlookUser".casefold():
            from . import outlook_user

            return outlook_user.OutlookUser()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.participant".casefold():
            from . import participant

            return participant.Participant()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.participantJoiningNotification".casefold():
            from . import participant_joining_notification

            return participant_joining_notification.ParticipantJoiningNotification()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.participantLeftNotification".casefold():
            from . import participant_left_notification

            return participant_left_notification.ParticipantLeftNotification()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.passwordAuthenticationMethod".casefold():
            from . import password_authentication_method

            return password_authentication_method.PasswordAuthenticationMethod()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.passwordlessMicrosoftAuthenticatorAuthenticationMethod".casefold():
            from . import passwordless_microsoft_authenticator_authentication_method

            return passwordless_microsoft_authenticator_authentication_method.PasswordlessMicrosoftAuthenticatorAuthenticationMethod()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.payload".casefold():
            from . import payload

            return payload.Payload()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.payloadCompatibleAssignmentFilter".casefold():
            from . import payload_compatible_assignment_filter

            return payload_compatible_assignment_filter.PayloadCompatibleAssignmentFilter()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.payloadResponse".casefold():
            from . import payload_response

            return payload_response.PayloadResponse()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.permission".casefold():
            from . import permission

            return permission.Permission()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.permissionGrantConditionSet".casefold():
            from . import permission_grant_condition_set

            return permission_grant_condition_set.PermissionGrantConditionSet()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.permissionGrantPolicy".casefold():
            from . import permission_grant_policy

            return permission_grant_policy.PermissionGrantPolicy()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.person".casefold():
            from . import person

            return person.Person()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.personAnnotation".casefold():
            from . import person_annotation

            return person_annotation.PersonAnnotation()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.personAnnualEvent".casefold():
            from . import person_annual_event

            return person_annual_event.PersonAnnualEvent()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.personAward".casefold():
            from . import person_award

            return person_award.PersonAward()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.personCertification".casefold():
            from . import person_certification

            return person_certification.PersonCertification()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.personExtension".casefold():
            from . import person_extension

            return person_extension.PersonExtension()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.personInterest".casefold():
            from . import person_interest

            return person_interest.PersonInterest()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.personName".casefold():
            from . import person_name

            return person_name.PersonName()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.personResponsibility".casefold():
            from . import person_responsibility

            return person_responsibility.PersonResponsibility()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.personWebsite".casefold():
            from . import person_website

            return person_website.PersonWebsite()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.phoneAuthenticationMethod".casefold():
            from . import phone_authentication_method

            return phone_authentication_method.PhoneAuthenticationMethod()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.pinnedChatMessageInfo".casefold():
            from . import pinned_chat_message_info

            return pinned_chat_message_info.PinnedChatMessageInfo()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.place".casefold():
            from . import place

            return place.Place()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.planner".casefold():
            from . import planner

            return planner.Planner()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.plannerAssignedToTaskBoardTaskFormat".casefold():
            from . import planner_assigned_to_task_board_task_format

            return planner_assigned_to_task_board_task_format.PlannerAssignedToTaskBoardTaskFormat()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.plannerBucket".casefold():
            from . import planner_bucket

            return planner_bucket.PlannerBucket()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.plannerBucketTaskBoardTaskFormat".casefold():
            from . import planner_bucket_task_board_task_format

            return planner_bucket_task_board_task_format.PlannerBucketTaskBoardTaskFormat()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.plannerDelta".casefold():
            from . import planner_delta

            return planner_delta.PlannerDelta()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.plannerGroup".casefold():
            from . import planner_group

            return planner_group.PlannerGroup()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.plannerPlan".casefold():
            from . import planner_plan

            return planner_plan.PlannerPlan()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.plannerPlanConfiguration".casefold():
            from . import planner_plan_configuration

            return planner_plan_configuration.PlannerPlanConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.plannerPlanConfigurationLocalization".casefold():
            from . import planner_plan_configuration_localization

            return planner_plan_configuration_localization.PlannerPlanConfigurationLocalization()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.plannerPlanDetails".casefold():
            from . import planner_plan_details

            return planner_plan_details.PlannerPlanDetails()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.plannerProgressTaskBoardTaskFormat".casefold():
            from . import planner_progress_task_board_task_format

            return planner_progress_task_board_task_format.PlannerProgressTaskBoardTaskFormat()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.plannerRoster".casefold():
            from . import planner_roster

            return planner_roster.PlannerRoster()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.plannerRosterMember".casefold():
            from . import planner_roster_member

            return planner_roster_member.PlannerRosterMember()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.plannerTask".casefold():
            from . import planner_task

            return planner_task.PlannerTask()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.plannerTaskConfiguration".casefold():
            from . import planner_task_configuration

            return planner_task_configuration.PlannerTaskConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.plannerTaskDetails".casefold():
            from . import planner_task_details

            return planner_task_details.PlannerTaskDetails()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.plannerUser".casefold():
            from . import planner_user

            return planner_user.PlannerUser()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.playPromptOperation".casefold():
            from . import play_prompt_operation

            return play_prompt_operation.PlayPromptOperation()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.policyBase".casefold():
            from . import policy_base
            from .security import policy_base

            return policy_base.PolicyBase()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.policySet".casefold():
            from . import policy_set

            return policy_set.PolicySet()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.policySetAssignment".casefold():
            from . import policy_set_assignment

            return policy_set_assignment.PolicySetAssignment()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.policySetItem".casefold():
            from . import policy_set_item

            return policy_set_item.PolicySetItem()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.post".casefold():
            from . import post

            return post.Post()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.presence".casefold():
            from . import presence

            return presence.Presence()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.presentation".casefold():
            from . import presentation

            return presentation.Presentation()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.printConnector".casefold():
            from . import print_connector

            return print_connector.PrintConnector()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.printDocument".casefold():
            from . import print_document

            return print_document.PrintDocument()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.printer".casefold():
            from . import printer

            return printer.Printer()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.printerBase".casefold():
            from . import printer_base

            return printer_base.PrinterBase()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.printerCreateOperation".casefold():
            from . import printer_create_operation

            return printer_create_operation.PrinterCreateOperation()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.printerShare".casefold():
            from . import printer_share

            return printer_share.PrinterShare()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.printJob".casefold():
            from . import print_job

            return print_job.PrintJob()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.printOperation".casefold():
            from . import print_operation

            return print_operation.PrintOperation()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.printService".casefold():
            from . import print_service

            return print_service.PrintService()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.printServiceEndpoint".casefold():
            from . import print_service_endpoint

            return print_service_endpoint.PrintServiceEndpoint()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.printTask".casefold():
            from . import print_task

            return print_task.PrintTask()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.printTaskDefinition".casefold():
            from . import print_task_definition

            return print_task_definition.PrintTaskDefinition()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.printTaskTrigger".casefold():
            from . import print_task_trigger

            return print_task_trigger.PrintTaskTrigger()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.printUsage".casefold():
            from . import print_usage

            return print_usage.PrintUsage()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.printUsageByPrinter".casefold():
            from . import print_usage_by_printer

            return print_usage_by_printer.PrintUsageByPrinter()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.printUsageByUser".casefold():
            from . import print_usage_by_user

            return print_usage_by_user.PrintUsageByUser()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.privilegedAccess".casefold():
            from . import privileged_access

            return privileged_access.PrivilegedAccess()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.privilegedAccessGroup".casefold():
            from . import privileged_access_group

            return privileged_access_group.PrivilegedAccessGroup()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.privilegedAccessGroupAssignmentSchedule".casefold():
            from . import privileged_access_group_assignment_schedule

            return privileged_access_group_assignment_schedule.PrivilegedAccessGroupAssignmentSchedule()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.privilegedAccessGroupAssignmentScheduleInstance".casefold():
            from . import privileged_access_group_assignment_schedule_instance

            return privileged_access_group_assignment_schedule_instance.PrivilegedAccessGroupAssignmentScheduleInstance()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.privilegedAccessGroupAssignmentScheduleRequest".casefold():
            from . import privileged_access_group_assignment_schedule_request

            return privileged_access_group_assignment_schedule_request.PrivilegedAccessGroupAssignmentScheduleRequest()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.privilegedAccessGroupEligibilitySchedule".casefold():
            from . import privileged_access_group_eligibility_schedule

            return privileged_access_group_eligibility_schedule.PrivilegedAccessGroupEligibilitySchedule()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.privilegedAccessGroupEligibilityScheduleInstance".casefold():
            from . import privileged_access_group_eligibility_schedule_instance

            return privileged_access_group_eligibility_schedule_instance.PrivilegedAccessGroupEligibilityScheduleInstance()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.privilegedAccessGroupEligibilityScheduleRequest".casefold():
            from . import privileged_access_group_eligibility_schedule_request

            return privileged_access_group_eligibility_schedule_request.PrivilegedAccessGroupEligibilityScheduleRequest()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.privilegedAccessRoot".casefold():
            from . import privileged_access_root

            return privileged_access_root.PrivilegedAccessRoot()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.privilegedAccessSchedule".casefold():
            from . import privileged_access_schedule

            return privileged_access_schedule.PrivilegedAccessSchedule()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.privilegedAccessScheduleInstance".casefold():
            from . import privileged_access_schedule_instance

            return privileged_access_schedule_instance.PrivilegedAccessScheduleInstance()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.privilegedAccessScheduleRequest".casefold():
            from . import privileged_access_schedule_request

            return privileged_access_schedule_request.PrivilegedAccessScheduleRequest()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.privilegedApproval".casefold():
            from . import privileged_approval

            return privileged_approval.PrivilegedApproval()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.privilegedOperationEvent".casefold():
            from . import privileged_operation_event

            return privileged_operation_event.PrivilegedOperationEvent()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.privilegedRole".casefold():
            from . import privileged_role

            return privileged_role.PrivilegedRole()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.privilegedRoleAssignment".casefold():
            from . import privileged_role_assignment

            return privileged_role_assignment.PrivilegedRoleAssignment()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.privilegedRoleAssignmentRequest".casefold():
            from . import privileged_role_assignment_request

            return privileged_role_assignment_request.PrivilegedRoleAssignmentRequest()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.privilegedRoleSettings".casefold():
            from . import privileged_role_settings

            return privileged_role_settings.PrivilegedRoleSettings()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.privilegedRoleSummary".casefold():
            from . import privileged_role_summary

            return privileged_role_summary.PrivilegedRoleSummary()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.privilegedSignupStatus".casefold():
            from . import privileged_signup_status

            return privileged_signup_status.PrivilegedSignupStatus()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.privilegeManagementElevation".casefold():
            from . import privilege_management_elevation

            return privilege_management_elevation.PrivilegeManagementElevation()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.profile".casefold():
            from . import profile
            from .networkaccess import profile

            return profile.Profile()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.profileCardProperty".casefold():
            from . import profile_card_property

            return profile_card_property.ProfileCardProperty()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.profilePhoto".casefold():
            from . import profile_photo

            return profile_photo.ProfilePhoto()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.program".casefold():
            from . import program

            return program.Program()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.programControl".casefold():
            from . import program_control

            return program_control.ProgramControl()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.programControlType".casefold():
            from . import program_control_type

            return program_control_type.ProgramControlType()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.projectParticipation".casefold():
            from . import project_participation

            return project_participation.ProjectParticipation()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.pronounsSettings".casefold():
            from . import pronouns_settings

            return pronouns_settings.PronounsSettings()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.providerTenantSetting".casefold():
            from . import provider_tenant_setting

            return provider_tenant_setting.ProviderTenantSetting()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.provisioningObjectSummary".casefold():
            from . import provisioning_object_summary

            return provisioning_object_summary.ProvisioningObjectSummary()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.publishedResource".casefold():
            from . import published_resource

            return published_resource.PublishedResource()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.purchaseInvoiceLine".casefold():
            from . import purchase_invoice_line

            return purchase_invoice_line.PurchaseInvoiceLine()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.rbacApplication".casefold():
            from . import rbac_application

            return rbac_application.RbacApplication()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.rbacApplicationMultiple".casefold():
            from . import rbac_application_multiple

            return rbac_application_multiple.RbacApplicationMultiple()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.recommendation".casefold():
            from . import recommendation

            return recommendation.Recommendation()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.recommendationBase".casefold():
            from . import recommendation_base

            return recommendation_base.RecommendationBase()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.recordOperation".casefold():
            from . import record_operation

            return record_operation.RecordOperation()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.redundantAssignmentAlertConfiguration".casefold():
            from . import redundant_assignment_alert_configuration

            return redundant_assignment_alert_configuration.RedundantAssignmentAlertConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.redundantAssignmentAlertIncident".casefold():
            from . import redundant_assignment_alert_incident

            return redundant_assignment_alert_incident.RedundantAssignmentAlertIncident()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.referenceAttachment".casefold():
            from . import reference_attachment

            return reference_attachment.ReferenceAttachment()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.regionalAndLanguageSettings".casefold():
            from . import regional_and_language_settings

            return regional_and_language_settings.RegionalAndLanguageSettings()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.relyingPartyDetailedSummary".casefold():
            from . import relying_party_detailed_summary

            return relying_party_detailed_summary.RelyingPartyDetailedSummary()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.remoteActionAudit".casefold():
            from . import remote_action_audit

            return remote_action_audit.RemoteActionAudit()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.remoteAssistancePartner".casefold():
            from . import remote_assistance_partner

            return remote_assistance_partner.RemoteAssistancePartner()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.remoteAssistanceSettings".casefold():
            from . import remote_assistance_settings

            return remote_assistance_settings.RemoteAssistanceSettings()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.reportRoot".casefold():
            from . import report_root

            return report_root.ReportRoot()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.request".casefold():
            from . import request

            return request.Request()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.resourceOperation".casefold():
            from . import resource_operation

            return resource_operation.ResourceOperation()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.resourceSpecificPermissionGrant".casefold():
            from . import resource_specific_permission_grant

            return resource_specific_permission_grant.ResourceSpecificPermissionGrant()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.restrictedAppsViolation".casefold():
            from . import restricted_apps_violation

            return restricted_apps_violation.RestrictedAppsViolation()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.richLongRunningOperation".casefold():
            from . import rich_long_running_operation

            return rich_long_running_operation.RichLongRunningOperation()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.riskDetection".casefold():
            from . import risk_detection

            return risk_detection.RiskDetection()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.riskyServicePrincipal".casefold():
            from . import risky_service_principal

            return risky_service_principal.RiskyServicePrincipal()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.riskyServicePrincipalHistoryItem".casefold():
            from . import risky_service_principal_history_item

            return risky_service_principal_history_item.RiskyServicePrincipalHistoryItem()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.riskyUser".casefold():
            from . import risky_user

            return risky_user.RiskyUser()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.riskyUserHistoryItem".casefold():
            from . import risky_user_history_item

            return risky_user_history_item.RiskyUserHistoryItem()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.roleAssignment".casefold():
            from . import role_assignment

            return role_assignment.RoleAssignment()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.roleDefinition".casefold():
            from . import role_definition

            return role_definition.RoleDefinition()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.roleManagementAlert".casefold():
            from . import role_management_alert

            return role_management_alert.RoleManagementAlert()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.rolesAssignedOutsidePrivilegedIdentityManagementAlertConfiguration".casefold():
            from . import roles_assigned_outside_privileged_identity_management_alert_configuration

            return roles_assigned_outside_privileged_identity_management_alert_configuration.RolesAssignedOutsidePrivilegedIdentityManagementAlertConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.rolesAssignedOutsidePrivilegedIdentityManagementAlertIncident".casefold():
            from . import roles_assigned_outside_privileged_identity_management_alert_incident

            return roles_assigned_outside_privileged_identity_management_alert_incident.RolesAssignedOutsidePrivilegedIdentityManagementAlertIncident()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.roleScopeTag".casefold():
            from . import role_scope_tag

            return role_scope_tag.RoleScopeTag()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.roleScopeTagAutoAssignment".casefold():
            from . import role_scope_tag_auto_assignment

            return role_scope_tag_auto_assignment.RoleScopeTagAutoAssignment()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.room".casefold():
            from . import room

            return room.Room()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.roomList".casefold():
            from . import room_list

            return room_list.RoomList()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.salesCreditMemoLine".casefold():
            from . import sales_credit_memo_line

            return sales_credit_memo_line.SalesCreditMemoLine()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.salesInvoiceLine".casefold():
            from . import sales_invoice_line

            return sales_invoice_line.SalesInvoiceLine()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.salesOrderLine".casefold():
            from . import sales_order_line

            return sales_order_line.SalesOrderLine()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.salesQuoteLine".casefold():
            from . import sales_quote_line

            return sales_quote_line.SalesQuoteLine()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.samlOrWsFedExternalDomainFederation".casefold():
            from . import saml_or_ws_fed_external_domain_federation

            return saml_or_ws_fed_external_domain_federation.SamlOrWsFedExternalDomainFederation()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.samlOrWsFedProvider".casefold():
            from . import saml_or_ws_fed_provider

            return saml_or_ws_fed_provider.SamlOrWsFedProvider()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.schedule".casefold():
            from . import schedule

            return schedule.Schedule()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.scheduleChangeRequest".casefold():
            from . import schedule_change_request

            return schedule_change_request.ScheduleChangeRequest()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.schedulingGroup".casefold():
            from . import scheduling_group

            return scheduling_group.SchedulingGroup()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.schema".casefold():
            from . import schema
            from .external_connectors import schema

            return schema.Schema()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.schemaExtension".casefold():
            from . import schema_extension

            return schema_extension.SchemaExtension()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.scopedRoleMembership".casefold():
            from . import scoped_role_membership

            return scoped_role_membership.ScopedRoleMembership()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.search.acronym".casefold():
            from .search import acronym

            return acronym.Acronym()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.search.bookmark".casefold():
            from .search import bookmark

            return bookmark.Bookmark()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.search.qna".casefold():
            from .search import qna

            return qna.Qna()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.search.searchAnswer".casefold():
            from .search import search_answer

            return search_answer.SearchAnswer()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.searchEntity".casefold():
            from . import search_entity

            return search_entity.SearchEntity()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.sectionGroup".casefold():
            from . import section_group

            return section_group.SectionGroup()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.secureScore".casefold():
            from . import secure_score

            return secure_score.SecureScore()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.secureScoreControlProfile".casefold():
            from . import secure_score_control_profile

            return secure_score_control_profile.SecureScoreControlProfile()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.security".casefold():
            from .security import security

            return security.Security()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.security.alert".casefold():
            from . import alert
            from .security import alert

            return alert.Alert()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.security.article".casefold():
            from .security import article

            return article.Article()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.security.articleIndicator".casefold():
            from .security import article_indicator

            return article_indicator.ArticleIndicator()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.security.artifact".casefold():
            from .security import artifact

            return artifact.Artifact()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.security.case".casefold():
            from .ediscovery import case
            from .security import case

            return case.Case()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.security.caseOperation".casefold():
            from .ediscovery import case_operation
            from .security import case_operation

            return case_operation.CaseOperation()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.security.casesRoot".casefold():
            from .security import cases_root

            return cases_root.CasesRoot()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.security.dataSet".casefold():
            from .security import data_set

            return data_set.DataSet()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.security.dataSource".casefold():
            from .ediscovery import data_source
            from .security import data_source

            return data_source.DataSource()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.security.dataSourceContainer".casefold():
            from .ediscovery import data_source_container
            from .security import data_source_container

            return data_source_container.DataSourceContainer()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.security.dispositionReviewStage".casefold():
            from .security import disposition_review_stage

            return disposition_review_stage.DispositionReviewStage()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.security.ediscoveryAddToReviewSetOperation".casefold():
            from .security import ediscovery_add_to_review_set_operation

            return ediscovery_add_to_review_set_operation.EdiscoveryAddToReviewSetOperation()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.security.ediscoveryCase".casefold():
            from .security import ediscovery_case

            return ediscovery_case.EdiscoveryCase()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.security.ediscoveryCaseSettings".casefold():
            from .security import ediscovery_case_settings

            return ediscovery_case_settings.EdiscoveryCaseSettings()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.security.ediscoveryCustodian".casefold():
            from .security import ediscovery_custodian

            return ediscovery_custodian.EdiscoveryCustodian()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.security.ediscoveryEstimateOperation".casefold():
            from .security import ediscovery_estimate_operation

            return ediscovery_estimate_operation.EdiscoveryEstimateOperation()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.security.ediscoveryExportOperation".casefold():
            from .security import ediscovery_export_operation

            return ediscovery_export_operation.EdiscoveryExportOperation()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.security.ediscoveryFile".casefold():
            from .security import ediscovery_file

            return ediscovery_file.EdiscoveryFile()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.security.ediscoveryHoldOperation".casefold():
            from .security import ediscovery_hold_operation

            return ediscovery_hold_operation.EdiscoveryHoldOperation()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.security.ediscoveryHoldPolicy".casefold():
            from .security import ediscovery_hold_policy

            return ediscovery_hold_policy.EdiscoveryHoldPolicy()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.security.ediscoveryIndexOperation".casefold():
            from .security import ediscovery_index_operation

            return ediscovery_index_operation.EdiscoveryIndexOperation()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.security.ediscoveryNoncustodialDataSource".casefold():
            from .security import ediscovery_noncustodial_data_source

            return ediscovery_noncustodial_data_source.EdiscoveryNoncustodialDataSource()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.security.ediscoveryPurgeDataOperation".casefold():
            from .security import ediscovery_purge_data_operation

            return ediscovery_purge_data_operation.EdiscoveryPurgeDataOperation()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.security.ediscoveryReviewSet".casefold():
            from .security import ediscovery_review_set

            return ediscovery_review_set.EdiscoveryReviewSet()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.security.ediscoveryReviewSetQuery".casefold():
            from .security import ediscovery_review_set_query

            return ediscovery_review_set_query.EdiscoveryReviewSetQuery()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.security.ediscoveryReviewTag".casefold():
            from .security import ediscovery_review_tag

            return ediscovery_review_tag.EdiscoveryReviewTag()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.security.ediscoverySearch".casefold():
            from .security import ediscovery_search

            return ediscovery_search.EdiscoverySearch()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.security.ediscoveryTagOperation".casefold():
            from .security import ediscovery_tag_operation

            return ediscovery_tag_operation.EdiscoveryTagOperation()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.security.emailContentThreatSubmission".casefold():
            from .security import email_content_threat_submission

            return email_content_threat_submission.EmailContentThreatSubmission()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.security.emailThreatSubmission".casefold():
            from .security import email_threat_submission

            return email_threat_submission.EmailThreatSubmission()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.security.emailThreatSubmissionPolicy".casefold():
            from .security import email_threat_submission_policy

            return email_threat_submission_policy.EmailThreatSubmissionPolicy()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.security.emailUrlThreatSubmission".casefold():
            from .security import email_url_threat_submission

            return email_url_threat_submission.EmailUrlThreatSubmission()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.security.file".casefold():
            from .security import file

            return file.File()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.security.fileContentThreatSubmission".casefold():
            from .security import file_content_threat_submission

            return file_content_threat_submission.FileContentThreatSubmission()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.security.fileThreatSubmission".casefold():
            from .security import file_threat_submission

            return file_threat_submission.FileThreatSubmission()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.security.fileUrlThreatSubmission".casefold():
            from .security import file_url_threat_submission

            return file_url_threat_submission.FileUrlThreatSubmission()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.security.host".casefold():
            from .security import host

            return host.Host()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.security.hostComponent".casefold():
            from .security import host_component

            return host_component.HostComponent()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.security.hostCookie".casefold():
            from .security import host_cookie

            return host_cookie.HostCookie()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.security.hostname".casefold():
            from .security import hostname

            return hostname.Hostname()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.security.hostReputation".casefold():
            from .security import host_reputation

            return host_reputation.HostReputation()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.security.hostTracker".casefold():
            from .security import host_tracker

            return host_tracker.HostTracker()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.security.incident".casefold():
            from .security import incident

            return incident.Incident()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.security.indicator".casefold():
            from .security import indicator

            return indicator.Indicator()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.security.informationProtection".casefold():
            from . import information_protection
            from .security import information_protection

            return information_protection.InformationProtection()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.security.informationProtectionPolicySetting".casefold():
            from .security import information_protection_policy_setting

            return information_protection_policy_setting.InformationProtectionPolicySetting()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.security.intelligenceProfile".casefold():
            from .security import intelligence_profile

            return intelligence_profile.IntelligenceProfile()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.security.intelligenceProfileIndicator".casefold():
            from .security import intelligence_profile_indicator

            return intelligence_profile_indicator.IntelligenceProfileIndicator()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.security.ipAddress".casefold():
            from .security import ip_address

            return ip_address.IpAddress()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.security.labelsRoot".casefold():
            from .security import labels_root

            return labels_root.LabelsRoot()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.security.passiveDnsRecord".casefold():
            from .security import passive_dns_record

            return passive_dns_record.PassiveDnsRecord()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.security.policyBase".casefold():
            from . import policy_base
            from .security import policy_base

            return policy_base.PolicyBase()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.security.retentionEvent".casefold():
            from .security import retention_event

            return retention_event.RetentionEvent()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.security.retentionEventType".casefold():
            from .security import retention_event_type

            return retention_event_type.RetentionEventType()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.security.retentionLabel".casefold():
            from .security import retention_label

            return retention_label.RetentionLabel()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.security.search".casefold():
            from .security import search

            return search.Search()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.security.security".casefold():
            from .security import security

            return security.Security()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.security.sensitivityLabel".casefold():
            from . import sensitivity_label
            from .security import sensitivity_label

            return sensitivity_label.SensitivityLabel()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.security.siteSource".casefold():
            from .ediscovery import site_source
            from .security import site_source

            return site_source.SiteSource()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.security.tag".casefold():
            from .ediscovery import tag
            from .security import tag

            return tag.Tag()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.security.threatIntelligence".casefold():
            from .security import threat_intelligence

            return threat_intelligence.ThreatIntelligence()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.security.threatSubmission".casefold():
            from .security import threat_submission

            return threat_submission.ThreatSubmission()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.security.threatSubmissionRoot".casefold():
            from .security import threat_submission_root

            return threat_submission_root.ThreatSubmissionRoot()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.security.triggersRoot".casefold():
            from .security import triggers_root

            return triggers_root.TriggersRoot()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.security.triggerTypesRoot".casefold():
            from .security import trigger_types_root

            return trigger_types_root.TriggerTypesRoot()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.security.unclassifiedArtifact".casefold():
            from .security import unclassified_artifact

            return unclassified_artifact.UnclassifiedArtifact()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.security.unifiedGroupSource".casefold():
            from .ediscovery import unified_group_source
            from .security import unified_group_source

            return unified_group_source.UnifiedGroupSource()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.security.urlThreatSubmission".casefold():
            from .security import url_threat_submission

            return url_threat_submission.UrlThreatSubmission()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.security.userSource".casefold():
            from .ediscovery import user_source
            from .security import user_source

            return user_source.UserSource()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.security.vulnerability".casefold():
            from .security import vulnerability

            return vulnerability.Vulnerability()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.security.vulnerabilityComponent".casefold():
            from .security import vulnerability_component

            return vulnerability_component.VulnerabilityComponent()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.securityAction".casefold():
            from . import security_action

            return security_action.SecurityAction()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.securityBaselineCategoryStateSummary".casefold():
            from . import security_baseline_category_state_summary

            return security_baseline_category_state_summary.SecurityBaselineCategoryStateSummary()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.securityBaselineDeviceState".casefold():
            from . import security_baseline_device_state

            return security_baseline_device_state.SecurityBaselineDeviceState()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.securityBaselineSettingState".casefold():
            from . import security_baseline_setting_state

            return security_baseline_setting_state.SecurityBaselineSettingState()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.securityBaselineState".casefold():
            from . import security_baseline_state

            return security_baseline_state.SecurityBaselineState()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.securityBaselineStateSummary".casefold():
            from . import security_baseline_state_summary

            return security_baseline_state_summary.SecurityBaselineStateSummary()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.securityBaselineTemplate".casefold():
            from . import security_baseline_template

            return security_baseline_template.SecurityBaselineTemplate()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.securityConfigurationTask".casefold():
            from . import security_configuration_task

            return security_configuration_task.SecurityConfigurationTask()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.securityReportsRoot".casefold():
            from . import security_reports_root

            return security_reports_root.SecurityReportsRoot()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.sensitiveType".casefold():
            from . import sensitive_type

            return sensitive_type.SensitiveType()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.sensitivityLabel".casefold():
            from . import sensitivity_label
            from .security import sensitivity_label

            return sensitivity_label.SensitivityLabel()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.sensitivityPolicySettings".casefold():
            from . import sensitivity_policy_settings

            return sensitivity_policy_settings.SensitivityPolicySettings()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.sequentialActivationRenewalsAlertConfiguration".casefold():
            from . import sequential_activation_renewals_alert_configuration

            return sequential_activation_renewals_alert_configuration.SequentialActivationRenewalsAlertConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.sequentialActivationRenewalsAlertIncident".casefold():
            from . import sequential_activation_renewals_alert_incident

            return sequential_activation_renewals_alert_incident.SequentialActivationRenewalsAlertIncident()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.serviceAnnouncement".casefold():
            from . import service_announcement

            return service_announcement.ServiceAnnouncement()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.serviceAnnouncementAttachment".casefold():
            from . import service_announcement_attachment

            return service_announcement_attachment.ServiceAnnouncementAttachment()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.serviceAnnouncementBase".casefold():
            from . import service_announcement_base

            return service_announcement_base.ServiceAnnouncementBase()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.serviceHealth".casefold():
            from . import service_health

            return service_health.ServiceHealth()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.serviceHealthIssue".casefold():
            from . import service_health_issue

            return service_health_issue.ServiceHealthIssue()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.serviceNowConnection".casefold():
            from . import service_now_connection

            return service_now_connection.ServiceNowConnection()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.servicePrincipal".casefold():
            from . import service_principal

            return service_principal.ServicePrincipal()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.servicePrincipalCreationConditionSet".casefold():
            from . import service_principal_creation_condition_set

            return service_principal_creation_condition_set.ServicePrincipalCreationConditionSet()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.servicePrincipalCreationPolicy".casefold():
            from . import service_principal_creation_policy

            return service_principal_creation_policy.ServicePrincipalCreationPolicy()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.servicePrincipalRiskDetection".casefold():
            from . import service_principal_risk_detection

            return service_principal_risk_detection.ServicePrincipalRiskDetection()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.servicePrincipalSignInActivity".casefold():
            from . import service_principal_sign_in_activity

            return service_principal_sign_in_activity.ServicePrincipalSignInActivity()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.serviceUpdateMessage".casefold():
            from . import service_update_message

            return service_update_message.ServiceUpdateMessage()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.settingStateDeviceSummary".casefold():
            from . import setting_state_device_summary

            return setting_state_device_summary.SettingStateDeviceSummary()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.sharedDriveItem".casefold():
            from . import shared_drive_item

            return shared_drive_item.SharedDriveItem()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.sharedEmailDomain".casefold():
            from . import shared_email_domain

            return shared_email_domain.SharedEmailDomain()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.sharedEmailDomainInvitation".casefold():
            from . import shared_email_domain_invitation

            return shared_email_domain_invitation.SharedEmailDomainInvitation()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.sharedInsight".casefold():
            from . import shared_insight

            return shared_insight.SharedInsight()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.sharedPCConfiguration".casefold():
            from . import shared_p_c_configuration

            return shared_p_c_configuration.SharedPCConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.sharedWithChannelTeamInfo".casefold():
            from . import shared_with_channel_team_info

            return shared_with_channel_team_info.SharedWithChannelTeamInfo()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.sharepoint".casefold():
            from . import sharepoint

            return sharepoint.Sharepoint()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.sharepointSettings".casefold():
            from . import sharepoint_settings

            return sharepoint_settings.SharepointSettings()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.shift".casefold():
            from . import shift

            return shift.Shift()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.shiftPreferences".casefold():
            from . import shift_preferences

            return shift_preferences.ShiftPreferences()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.signIn".casefold():
            from . import sign_in

            return sign_in.SignIn()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.simulation".casefold():
            from . import simulation

            return simulation.Simulation()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.simulationAutomation".casefold():
            from . import simulation_automation

            return simulation_automation.SimulationAutomation()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.simulationAutomationRun".casefold():
            from . import simulation_automation_run

            return simulation_automation_run.SimulationAutomationRun()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.singleValueLegacyExtendedProperty".casefold():
            from . import single_value_legacy_extended_property

            return single_value_legacy_extended_property.SingleValueLegacyExtendedProperty()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.site".casefold():
            from . import site

            return site.Site()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.sitePage".casefold():
            from . import site_page

            return site_page.SitePage()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.skillProficiency".casefold():
            from . import skill_proficiency

            return skill_proficiency.SkillProficiency()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.skypeForBusinessUserConversationMember".casefold():
            from . import skype_for_business_user_conversation_member

            return skype_for_business_user_conversation_member.SkypeForBusinessUserConversationMember()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.skypeUserConversationMember".casefold():
            from . import skype_user_conversation_member

            return skype_user_conversation_member.SkypeUserConversationMember()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.smsAuthenticationMethodConfiguration".casefold():
            from . import sms_authentication_method_configuration

            return sms_authentication_method_configuration.SmsAuthenticationMethodConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.smsAuthenticationMethodTarget".casefold():
            from . import sms_authentication_method_target

            return sms_authentication_method_target.SmsAuthenticationMethodTarget()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.socialIdentityProvider".casefold():
            from . import social_identity_provider

            return social_identity_provider.SocialIdentityProvider()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.softwareOathAuthenticationMethod".casefold():
            from . import software_oath_authentication_method

            return software_oath_authentication_method.SoftwareOathAuthenticationMethod()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.softwareOathAuthenticationMethodConfiguration".casefold():
            from . import software_oath_authentication_method_configuration

            return software_oath_authentication_method_configuration.SoftwareOathAuthenticationMethodConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.softwareUpdateStatusSummary".casefold():
            from . import software_update_status_summary

            return software_update_status_summary.SoftwareUpdateStatusSummary()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.staleSignInAlertConfiguration".casefold():
            from . import stale_sign_in_alert_configuration

            return stale_sign_in_alert_configuration.StaleSignInAlertConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.staleSignInAlertIncident".casefold():
            from . import stale_sign_in_alert_incident

            return stale_sign_in_alert_incident.StaleSignInAlertIncident()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.standardWebPart".casefold():
            from . import standard_web_part

            return standard_web_part.StandardWebPart()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.startHoldMusicOperation".casefold():
            from . import start_hold_music_operation

            return start_hold_music_operation.StartHoldMusicOperation()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.stopHoldMusicOperation".casefold():
            from . import stop_hold_music_operation

            return stop_hold_music_operation.StopHoldMusicOperation()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.strongAuthenticationDetail".casefold():
            from . import strong_authentication_detail

            return strong_authentication_detail.StrongAuthenticationDetail()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.strongAuthenticationPhoneAppDetail".casefold():
            from . import strong_authentication_phone_app_detail

            return strong_authentication_phone_app_detail.StrongAuthenticationPhoneAppDetail()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.stsPolicy".casefold():
            from . import sts_policy

            return sts_policy.StsPolicy()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.subjectRightsRequest".casefold():
            from . import subject_rights_request

            return subject_rights_request.SubjectRightsRequest()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.subscribedSku".casefold():
            from . import subscribed_sku

            return subscribed_sku.SubscribedSku()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.subscribeToToneOperation".casefold():
            from . import subscribe_to_tone_operation

            return subscribe_to_tone_operation.SubscribeToToneOperation()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.subscription".casefold():
            from . import subscription

            return subscription.Subscription()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.swapShiftsChangeRequest".casefold():
            from . import swap_shifts_change_request

            return swap_shifts_change_request.SwapShiftsChangeRequest()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.symantecCodeSigningCertificate".casefold():
            from . import symantec_code_signing_certificate

            return symantec_code_signing_certificate.SymantecCodeSigningCertificate()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.synchronization".casefold():
            from . import synchronization

            return synchronization.Synchronization()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.synchronizationJob".casefold():
            from . import synchronization_job

            return synchronization_job.SynchronizationJob()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.synchronizationSchema".casefold():
            from . import synchronization_schema

            return synchronization_schema.SynchronizationSchema()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.synchronizationTemplate".casefold():
            from . import synchronization_template

            return synchronization_template.SynchronizationTemplate()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.targetedManagedAppConfiguration".casefold():
            from . import targeted_managed_app_configuration

            return targeted_managed_app_configuration.TargetedManagedAppConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.targetedManagedAppConfigurationPolicySetItem".casefold():
            from . import targeted_managed_app_configuration_policy_set_item

            return targeted_managed_app_configuration_policy_set_item.TargetedManagedAppConfigurationPolicySetItem()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.targetedManagedAppPolicyAssignment".casefold():
            from . import targeted_managed_app_policy_assignment

            return targeted_managed_app_policy_assignment.TargetedManagedAppPolicyAssignment()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.targetedManagedAppProtection".casefold():
            from . import targeted_managed_app_protection

            return targeted_managed_app_protection.TargetedManagedAppProtection()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.taskFileAttachment".casefold():
            from . import task_file_attachment

            return task_file_attachment.TaskFileAttachment()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.taxGroup".casefold():
            from . import tax_group

            return tax_group.TaxGroup()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.team".casefold():
            from . import team

            return team.Team()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.teamInfo".casefold():
            from . import team_info

            return team_info.TeamInfo()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.teamsApp".casefold():
            from . import teams_app

            return teams_app.TeamsApp()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.teamsAppDefinition".casefold():
            from . import teams_app_definition

            return teams_app_definition.TeamsAppDefinition()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.teamsAppIcon".casefold():
            from . import teams_app_icon

            return teams_app_icon.TeamsAppIcon()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.teamsAppInstallation".casefold():
            from . import teams_app_installation

            return teams_app_installation.TeamsAppInstallation()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.teamsAppSettings".casefold():
            from . import teams_app_settings

            return teams_app_settings.TeamsAppSettings()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.teamsAsyncOperation".casefold():
            from . import teams_async_operation

            return teams_async_operation.TeamsAsyncOperation()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.teamsTab".casefold():
            from . import teams_tab

            return teams_tab.TeamsTab()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.teamsTemplate".casefold():
            from . import teams_template

            return teams_template.TeamsTemplate()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.teamTemplate".casefold():
            from . import team_template

            return team_template.TeamTemplate()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.teamTemplateDefinition".casefold():
            from . import team_template_definition

            return team_template_definition.TeamTemplateDefinition()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.teamwork".casefold():
            from . import teamwork

            return teamwork.Teamwork()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.teamworkBot".casefold():
            from . import teamwork_bot

            return teamwork_bot.TeamworkBot()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.teamworkDevice".casefold():
            from . import teamwork_device

            return teamwork_device.TeamworkDevice()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.teamworkDeviceActivity".casefold():
            from . import teamwork_device_activity

            return teamwork_device_activity.TeamworkDeviceActivity()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.teamworkDeviceConfiguration".casefold():
            from . import teamwork_device_configuration

            return teamwork_device_configuration.TeamworkDeviceConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.teamworkDeviceHealth".casefold():
            from . import teamwork_device_health

            return teamwork_device_health.TeamworkDeviceHealth()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.teamworkDeviceOperation".casefold():
            from . import teamwork_device_operation

            return teamwork_device_operation.TeamworkDeviceOperation()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.teamworkHostedContent".casefold():
            from . import teamwork_hosted_content

            return teamwork_hosted_content.TeamworkHostedContent()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.teamworkPeripheral".casefold():
            from . import teamwork_peripheral

            return teamwork_peripheral.TeamworkPeripheral()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.teamworkTag".casefold():
            from . import teamwork_tag

            return teamwork_tag.TeamworkTag()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.teamworkTagMember".casefold():
            from . import teamwork_tag_member

            return teamwork_tag_member.TeamworkTagMember()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.telecomExpenseManagementPartner".casefold():
            from . import telecom_expense_management_partner

            return telecom_expense_management_partner.TelecomExpenseManagementPartner()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.temporaryAccessPassAuthenticationMethod".casefold():
            from . import temporary_access_pass_authentication_method

            return temporary_access_pass_authentication_method.TemporaryAccessPassAuthenticationMethod()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.temporaryAccessPassAuthenticationMethodConfiguration".casefold():
            from . import temporary_access_pass_authentication_method_configuration

            return temporary_access_pass_authentication_method_configuration.TemporaryAccessPassAuthenticationMethodConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.tenantAppManagementPolicy".casefold():
            from . import tenant_app_management_policy

            return tenant_app_management_policy.TenantAppManagementPolicy()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.tenantAttachRBAC".casefold():
            from . import tenant_attach_r_b_a_c

            return tenant_attach_r_b_a_c.TenantAttachRBAC()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.tenantRelationshipAccessPolicyBase".casefold():
            from . import tenant_relationship_access_policy_base

            return tenant_relationship_access_policy_base.TenantRelationshipAccessPolicyBase()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.tenantSetupInfo".casefold():
            from . import tenant_setup_info

            return tenant_setup_info.TenantSetupInfo()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.termsAndConditions".casefold():
            from . import terms_and_conditions

            return terms_and_conditions.TermsAndConditions()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.termsAndConditionsAcceptanceStatus".casefold():
            from . import terms_and_conditions_acceptance_status

            return terms_and_conditions_acceptance_status.TermsAndConditionsAcceptanceStatus()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.termsAndConditionsAssignment".casefold():
            from . import terms_and_conditions_assignment

            return terms_and_conditions_assignment.TermsAndConditionsAssignment()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.termsAndConditionsGroupAssignment".casefold():
            from . import terms_and_conditions_group_assignment

            return terms_and_conditions_group_assignment.TermsAndConditionsGroupAssignment()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.termsOfUseContainer".casefold():
            from . import terms_of_use_container

            return terms_of_use_container.TermsOfUseContainer()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.termStore.group".casefold():
            from . import group
            from .term_store import group

            return group.Group()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.termStore.relation".casefold():
            from .term_store import relation

            return relation.Relation()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.termStore.set".casefold():
            from .term_store import set

            return set.Set()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.termStore.store".casefold():
            from .term_store import store

            return store.Store()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.termStore.term".casefold():
            from .term_store import term

            return term.Term()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.textClassificationRequest".casefold():
            from . import text_classification_request

            return text_classification_request.TextClassificationRequest()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.textWebPart".casefold():
            from . import text_web_part

            return text_web_part.TextWebPart()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.threatAssessmentRequest".casefold():
            from . import threat_assessment_request

            return threat_assessment_request.ThreatAssessmentRequest()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.threatAssessmentResult".casefold():
            from . import threat_assessment_result

            return threat_assessment_result.ThreatAssessmentResult()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.thumbnailSet".casefold():
            from . import thumbnail_set

            return thumbnail_set.ThumbnailSet()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.tiIndicator".casefold():
            from . import ti_indicator

            return ti_indicator.TiIndicator()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.timeCard".casefold():
            from . import time_card

            return time_card.TimeCard()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.timeOff".casefold():
            from . import time_off

            return time_off.TimeOff()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.timeOffReason".casefold():
            from . import time_off_reason

            return time_off_reason.TimeOffReason()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.timeOffRequest".casefold():
            from . import time_off_request

            return time_off_request.TimeOffRequest()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.todo".casefold():
            from . import todo

            return todo.Todo()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.todoTask".casefold():
            from . import todo_task

            return todo_task.TodoTask()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.todoTaskList".casefold():
            from . import todo_task_list

            return todo_task_list.TodoTaskList()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.tokenIssuancePolicy".casefold():
            from . import token_issuance_policy

            return token_issuance_policy.TokenIssuancePolicy()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.tokenLifetimePolicy".casefold():
            from . import token_lifetime_policy

            return token_lifetime_policy.TokenLifetimePolicy()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.tooManyGlobalAdminsAssignedToTenantAlertConfiguration".casefold():
            from . import too_many_global_admins_assigned_to_tenant_alert_configuration

            return too_many_global_admins_assigned_to_tenant_alert_configuration.TooManyGlobalAdminsAssignedToTenantAlertConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.tooManyGlobalAdminsAssignedToTenantAlertIncident".casefold():
            from . import too_many_global_admins_assigned_to_tenant_alert_incident

            return too_many_global_admins_assigned_to_tenant_alert_incident.TooManyGlobalAdminsAssignedToTenantAlertIncident()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.trending".casefold():
            from . import trending

            return trending.Trending()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.trustedCertificateAuthorityAsEntityBase".casefold():
            from . import trusted_certificate_authority_as_entity_base

            return trusted_certificate_authority_as_entity_base.TrustedCertificateAuthorityAsEntityBase()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.trustFrameworkKeySet".casefold():
            from . import trust_framework_key_set

            return trust_framework_key_set.TrustFrameworkKeySet()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.trustFrameworkPolicy".casefold():
            from . import trust_framework_policy

            return trust_framework_policy.TrustFrameworkPolicy()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.unifiedRbacApplication".casefold():
            from . import unified_rbac_application

            return unified_rbac_application.UnifiedRbacApplication()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.unifiedRbacResourceAction".casefold():
            from . import unified_rbac_resource_action

            return unified_rbac_resource_action.UnifiedRbacResourceAction()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.unifiedRbacResourceNamespace".casefold():
            from . import unified_rbac_resource_namespace

            return unified_rbac_resource_namespace.UnifiedRbacResourceNamespace()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.unifiedRbacResourceScope".casefold():
            from . import unified_rbac_resource_scope

            return unified_rbac_resource_scope.UnifiedRbacResourceScope()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.unifiedRoleAssignment".casefold():
            from . import unified_role_assignment

            return unified_role_assignment.UnifiedRoleAssignment()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.unifiedRoleAssignmentMultiple".casefold():
            from . import unified_role_assignment_multiple

            return unified_role_assignment_multiple.UnifiedRoleAssignmentMultiple()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.unifiedRoleAssignmentSchedule".casefold():
            from . import unified_role_assignment_schedule

            return unified_role_assignment_schedule.UnifiedRoleAssignmentSchedule()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.unifiedRoleAssignmentScheduleInstance".casefold():
            from . import unified_role_assignment_schedule_instance

            return unified_role_assignment_schedule_instance.UnifiedRoleAssignmentScheduleInstance()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.unifiedRoleAssignmentScheduleRequest".casefold():
            from . import unified_role_assignment_schedule_request

            return unified_role_assignment_schedule_request.UnifiedRoleAssignmentScheduleRequest()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.unifiedRoleDefinition".casefold():
            from . import unified_role_definition

            return unified_role_definition.UnifiedRoleDefinition()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.unifiedRoleEligibilitySchedule".casefold():
            from . import unified_role_eligibility_schedule

            return unified_role_eligibility_schedule.UnifiedRoleEligibilitySchedule()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.unifiedRoleEligibilityScheduleInstance".casefold():
            from . import unified_role_eligibility_schedule_instance

            return unified_role_eligibility_schedule_instance.UnifiedRoleEligibilityScheduleInstance()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.unifiedRoleEligibilityScheduleRequest".casefold():
            from . import unified_role_eligibility_schedule_request

            return unified_role_eligibility_schedule_request.UnifiedRoleEligibilityScheduleRequest()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.unifiedRoleManagementAlert".casefold():
            from . import unified_role_management_alert

            return unified_role_management_alert.UnifiedRoleManagementAlert()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.unifiedRoleManagementAlertConfiguration".casefold():
            from . import unified_role_management_alert_configuration

            return unified_role_management_alert_configuration.UnifiedRoleManagementAlertConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.unifiedRoleManagementAlertDefinition".casefold():
            from . import unified_role_management_alert_definition

            return unified_role_management_alert_definition.UnifiedRoleManagementAlertDefinition()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.unifiedRoleManagementAlertIncident".casefold():
            from . import unified_role_management_alert_incident

            return unified_role_management_alert_incident.UnifiedRoleManagementAlertIncident()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.unifiedRoleManagementPolicy".casefold():
            from . import unified_role_management_policy

            return unified_role_management_policy.UnifiedRoleManagementPolicy()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.unifiedRoleManagementPolicyApprovalRule".casefold():
            from . import unified_role_management_policy_approval_rule

            return unified_role_management_policy_approval_rule.UnifiedRoleManagementPolicyApprovalRule()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.unifiedRoleManagementPolicyAssignment".casefold():
            from . import unified_role_management_policy_assignment

            return unified_role_management_policy_assignment.UnifiedRoleManagementPolicyAssignment()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.unifiedRoleManagementPolicyAuthenticationContextRule".casefold():
            from . import unified_role_management_policy_authentication_context_rule

            return unified_role_management_policy_authentication_context_rule.UnifiedRoleManagementPolicyAuthenticationContextRule()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.unifiedRoleManagementPolicyEnablementRule".casefold():
            from . import unified_role_management_policy_enablement_rule

            return unified_role_management_policy_enablement_rule.UnifiedRoleManagementPolicyEnablementRule()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.unifiedRoleManagementPolicyExpirationRule".casefold():
            from . import unified_role_management_policy_expiration_rule

            return unified_role_management_policy_expiration_rule.UnifiedRoleManagementPolicyExpirationRule()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.unifiedRoleManagementPolicyNotificationRule".casefold():
            from . import unified_role_management_policy_notification_rule

            return unified_role_management_policy_notification_rule.UnifiedRoleManagementPolicyNotificationRule()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.unifiedRoleManagementPolicyRule".casefold():
            from . import unified_role_management_policy_rule

            return unified_role_management_policy_rule.UnifiedRoleManagementPolicyRule()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.unifiedRoleScheduleBase".casefold():
            from . import unified_role_schedule_base

            return unified_role_schedule_base.UnifiedRoleScheduleBase()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.unifiedRoleScheduleInstanceBase".casefold():
            from . import unified_role_schedule_instance_base

            return unified_role_schedule_instance_base.UnifiedRoleScheduleInstanceBase()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.unmanagedDeviceDiscoveryTask".casefold():
            from . import unmanaged_device_discovery_task

            return unmanaged_device_discovery_task.UnmanagedDeviceDiscoveryTask()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.unmuteParticipantOperation".casefold():
            from . import unmute_participant_operation

            return unmute_participant_operation.UnmuteParticipantOperation()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.unsupportedDeviceConfiguration".casefold():
            from . import unsupported_device_configuration

            return unsupported_device_configuration.UnsupportedDeviceConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.unsupportedGroupPolicyExtension".casefold():
            from . import unsupported_group_policy_extension

            return unsupported_group_policy_extension.UnsupportedGroupPolicyExtension()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.updateRecordingStatusOperation".casefold():
            from . import update_recording_status_operation

            return update_recording_status_operation.UpdateRecordingStatusOperation()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.urlAssessmentRequest".casefold():
            from . import url_assessment_request

            return url_assessment_request.UrlAssessmentRequest()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.usageRight".casefold():
            from . import usage_right

            return usage_right.UsageRight()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.usedInsight".casefold():
            from . import used_insight

            return used_insight.UsedInsight()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.user".casefold():
            from . import user

            return user.User()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.userAccountInformation".casefold():
            from . import user_account_information

            return user_account_information.UserAccountInformation()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.userActivity".casefold():
            from . import user_activity

            return user_activity.UserActivity()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.userAnalytics".casefold():
            from . import user_analytics

            return user_analytics.UserAnalytics()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.userAppInstallStatus".casefold():
            from . import user_app_install_status

            return user_app_install_status.UserAppInstallStatus()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.userConfiguration".casefold():
            from . import user_configuration

            return user_configuration.UserConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.userConsentRequest".casefold():
            from . import user_consent_request

            return user_consent_request.UserConsentRequest()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.userCredentialUsageDetails".casefold():
            from . import user_credential_usage_details

            return user_credential_usage_details.UserCredentialUsageDetails()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.userExperienceAnalyticsAnomaly".casefold():
            from . import user_experience_analytics_anomaly

            return user_experience_analytics_anomaly.UserExperienceAnalyticsAnomaly()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.userExperienceAnalyticsAnomalyCorrelationGroupOverview".casefold():
            from . import user_experience_analytics_anomaly_correlation_group_overview

            return user_experience_analytics_anomaly_correlation_group_overview.UserExperienceAnalyticsAnomalyCorrelationGroupOverview()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.userExperienceAnalyticsAnomalyDevice".casefold():
            from . import user_experience_analytics_anomaly_device

            return user_experience_analytics_anomaly_device.UserExperienceAnalyticsAnomalyDevice()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.userExperienceAnalyticsAppHealthApplicationPerformance".casefold():
            from . import user_experience_analytics_app_health_application_performance

            return user_experience_analytics_app_health_application_performance.UserExperienceAnalyticsAppHealthApplicationPerformance()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.userExperienceAnalyticsAppHealthAppPerformanceByAppVersion".casefold():
            from . import user_experience_analytics_app_health_app_performance_by_app_version

            return user_experience_analytics_app_health_app_performance_by_app_version.UserExperienceAnalyticsAppHealthAppPerformanceByAppVersion()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.userExperienceAnalyticsAppHealthAppPerformanceByAppVersionDetails".casefold():
            from . import user_experience_analytics_app_health_app_performance_by_app_version_details

            return user_experience_analytics_app_health_app_performance_by_app_version_details.UserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDetails()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.userExperienceAnalyticsAppHealthAppPerformanceByAppVersionDeviceId".casefold():
            from . import user_experience_analytics_app_health_app_performance_by_app_version_device_id

            return user_experience_analytics_app_health_app_performance_by_app_version_device_id.UserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDeviceId()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.userExperienceAnalyticsAppHealthAppPerformanceByOSVersion".casefold():
            from . import user_experience_analytics_app_health_app_performance_by_o_s_version

            return user_experience_analytics_app_health_app_performance_by_o_s_version.UserExperienceAnalyticsAppHealthAppPerformanceByOSVersion()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.userExperienceAnalyticsAppHealthDeviceModelPerformance".casefold():
            from . import user_experience_analytics_app_health_device_model_performance

            return user_experience_analytics_app_health_device_model_performance.UserExperienceAnalyticsAppHealthDeviceModelPerformance()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.userExperienceAnalyticsAppHealthDevicePerformance".casefold():
            from . import user_experience_analytics_app_health_device_performance

            return user_experience_analytics_app_health_device_performance.UserExperienceAnalyticsAppHealthDevicePerformance()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.userExperienceAnalyticsAppHealthDevicePerformanceDetails".casefold():
            from . import user_experience_analytics_app_health_device_performance_details

            return user_experience_analytics_app_health_device_performance_details.UserExperienceAnalyticsAppHealthDevicePerformanceDetails()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.userExperienceAnalyticsAppHealthOSVersionPerformance".casefold():
            from . import user_experience_analytics_app_health_o_s_version_performance

            return user_experience_analytics_app_health_o_s_version_performance.UserExperienceAnalyticsAppHealthOSVersionPerformance()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.userExperienceAnalyticsBaseline".casefold():
            from . import user_experience_analytics_baseline

            return user_experience_analytics_baseline.UserExperienceAnalyticsBaseline()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.userExperienceAnalyticsBatteryHealthAppImpact".casefold():
            from . import user_experience_analytics_battery_health_app_impact

            return user_experience_analytics_battery_health_app_impact.UserExperienceAnalyticsBatteryHealthAppImpact()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.userExperienceAnalyticsBatteryHealthCapacityDetails".casefold():
            from . import user_experience_analytics_battery_health_capacity_details

            return user_experience_analytics_battery_health_capacity_details.UserExperienceAnalyticsBatteryHealthCapacityDetails()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.userExperienceAnalyticsBatteryHealthDeviceAppImpact".casefold():
            from . import user_experience_analytics_battery_health_device_app_impact

            return user_experience_analytics_battery_health_device_app_impact.UserExperienceAnalyticsBatteryHealthDeviceAppImpact()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.userExperienceAnalyticsBatteryHealthDevicePerformance".casefold():
            from . import user_experience_analytics_battery_health_device_performance

            return user_experience_analytics_battery_health_device_performance.UserExperienceAnalyticsBatteryHealthDevicePerformance()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.userExperienceAnalyticsBatteryHealthDeviceRuntimeHistory".casefold():
            from . import user_experience_analytics_battery_health_device_runtime_history

            return user_experience_analytics_battery_health_device_runtime_history.UserExperienceAnalyticsBatteryHealthDeviceRuntimeHistory()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.userExperienceAnalyticsBatteryHealthModelPerformance".casefold():
            from . import user_experience_analytics_battery_health_model_performance

            return user_experience_analytics_battery_health_model_performance.UserExperienceAnalyticsBatteryHealthModelPerformance()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.userExperienceAnalyticsBatteryHealthOsPerformance".casefold():
            from . import user_experience_analytics_battery_health_os_performance

            return user_experience_analytics_battery_health_os_performance.UserExperienceAnalyticsBatteryHealthOsPerformance()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.userExperienceAnalyticsBatteryHealthRuntimeDetails".casefold():
            from . import user_experience_analytics_battery_health_runtime_details

            return user_experience_analytics_battery_health_runtime_details.UserExperienceAnalyticsBatteryHealthRuntimeDetails()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.userExperienceAnalyticsCategory".casefold():
            from . import user_experience_analytics_category

            return user_experience_analytics_category.UserExperienceAnalyticsCategory()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.userExperienceAnalyticsDevicePerformance".casefold():
            from . import user_experience_analytics_device_performance

            return user_experience_analytics_device_performance.UserExperienceAnalyticsDevicePerformance()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.userExperienceAnalyticsDeviceScope".casefold():
            from . import user_experience_analytics_device_scope

            return user_experience_analytics_device_scope.UserExperienceAnalyticsDeviceScope()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.userExperienceAnalyticsDeviceScores".casefold():
            from . import user_experience_analytics_device_scores

            return user_experience_analytics_device_scores.UserExperienceAnalyticsDeviceScores()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.userExperienceAnalyticsDeviceStartupHistory".casefold():
            from . import user_experience_analytics_device_startup_history

            return user_experience_analytics_device_startup_history.UserExperienceAnalyticsDeviceStartupHistory()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.userExperienceAnalyticsDeviceStartupProcess".casefold():
            from . import user_experience_analytics_device_startup_process

            return user_experience_analytics_device_startup_process.UserExperienceAnalyticsDeviceStartupProcess()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.userExperienceAnalyticsDeviceStartupProcessPerformance".casefold():
            from . import user_experience_analytics_device_startup_process_performance

            return user_experience_analytics_device_startup_process_performance.UserExperienceAnalyticsDeviceStartupProcessPerformance()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.userExperienceAnalyticsDeviceTimelineEvent".casefold():
            from . import user_experience_analytics_device_timeline_event

            return user_experience_analytics_device_timeline_event.UserExperienceAnalyticsDeviceTimelineEvent()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.userExperienceAnalyticsDeviceWithoutCloudIdentity".casefold():
            from . import user_experience_analytics_device_without_cloud_identity

            return user_experience_analytics_device_without_cloud_identity.UserExperienceAnalyticsDeviceWithoutCloudIdentity()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.userExperienceAnalyticsImpactingProcess".casefold():
            from . import user_experience_analytics_impacting_process

            return user_experience_analytics_impacting_process.UserExperienceAnalyticsImpactingProcess()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.userExperienceAnalyticsMetric".casefold():
            from . import user_experience_analytics_metric

            return user_experience_analytics_metric.UserExperienceAnalyticsMetric()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.userExperienceAnalyticsMetricHistory".casefold():
            from . import user_experience_analytics_metric_history

            return user_experience_analytics_metric_history.UserExperienceAnalyticsMetricHistory()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.userExperienceAnalyticsModelScores".casefold():
            from . import user_experience_analytics_model_scores

            return user_experience_analytics_model_scores.UserExperienceAnalyticsModelScores()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.userExperienceAnalyticsNotAutopilotReadyDevice".casefold():
            from . import user_experience_analytics_not_autopilot_ready_device

            return user_experience_analytics_not_autopilot_ready_device.UserExperienceAnalyticsNotAutopilotReadyDevice()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.userExperienceAnalyticsOverview".casefold():
            from . import user_experience_analytics_overview

            return user_experience_analytics_overview.UserExperienceAnalyticsOverview()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.userExperienceAnalyticsRemoteConnection".casefold():
            from . import user_experience_analytics_remote_connection

            return user_experience_analytics_remote_connection.UserExperienceAnalyticsRemoteConnection()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.userExperienceAnalyticsResourcePerformance".casefold():
            from . import user_experience_analytics_resource_performance

            return user_experience_analytics_resource_performance.UserExperienceAnalyticsResourcePerformance()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.userExperienceAnalyticsScoreHistory".casefold():
            from . import user_experience_analytics_score_history

            return user_experience_analytics_score_history.UserExperienceAnalyticsScoreHistory()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.userExperienceAnalyticsWorkFromAnywhereDevice".casefold():
            from . import user_experience_analytics_work_from_anywhere_device

            return user_experience_analytics_work_from_anywhere_device.UserExperienceAnalyticsWorkFromAnywhereDevice()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.userExperienceAnalyticsWorkFromAnywhereHardwareReadinessMetric".casefold():
            from . import user_experience_analytics_work_from_anywhere_hardware_readiness_metric

            return user_experience_analytics_work_from_anywhere_hardware_readiness_metric.UserExperienceAnalyticsWorkFromAnywhereHardwareReadinessMetric()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.userExperienceAnalyticsWorkFromAnywhereMetric".casefold():
            from . import user_experience_analytics_work_from_anywhere_metric

            return user_experience_analytics_work_from_anywhere_metric.UserExperienceAnalyticsWorkFromAnywhereMetric()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.userExperienceAnalyticsWorkFromAnywhereModelPerformance".casefold():
            from . import user_experience_analytics_work_from_anywhere_model_performance

            return user_experience_analytics_work_from_anywhere_model_performance.UserExperienceAnalyticsWorkFromAnywhereModelPerformance()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.userFlowLanguageConfiguration".casefold():
            from . import user_flow_language_configuration

            return user_flow_language_configuration.UserFlowLanguageConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.userFlowLanguagePage".casefold():
            from . import user_flow_language_page

            return user_flow_language_page.UserFlowLanguagePage()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.userInsightsSettings".casefold():
            from . import user_insights_settings

            return user_insights_settings.UserInsightsSettings()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.userInstallStateSummary".casefold():
            from . import user_install_state_summary

            return user_install_state_summary.UserInstallStateSummary()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.userPFXCertificate".casefold():
            from . import user_p_f_x_certificate

            return user_p_f_x_certificate.UserPFXCertificate()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.userRegistrationDetails".casefold():
            from . import user_registration_details

            return user_registration_details.UserRegistrationDetails()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.userScopeTeamsAppInstallation".casefold():
            from . import user_scope_teams_app_installation

            return user_scope_teams_app_installation.UserScopeTeamsAppInstallation()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.userSecurityProfile".casefold():
            from . import user_security_profile

            return user_security_profile.UserSecurityProfile()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.userSettings".casefold():
            from . import user_settings

            return user_settings.UserSettings()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.userSignInInsight".casefold():
            from . import user_sign_in_insight

            return user_sign_in_insight.UserSignInInsight()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.userTeamwork".casefold():
            from . import user_teamwork

            return user_teamwork.UserTeamwork()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.verticalSection".casefold():
            from . import vertical_section

            return vertical_section.VerticalSection()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.virtualAppointment".casefold():
            from . import virtual_appointment

            return virtual_appointment.VirtualAppointment()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.virtualEndpoint".casefold():
            from . import virtual_endpoint

            return virtual_endpoint.VirtualEndpoint()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.virtualEvent".casefold():
            from . import virtual_event

            return virtual_event.VirtualEvent()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.virtualEventPresenter".casefold():
            from . import virtual_event_presenter

            return virtual_event_presenter.VirtualEventPresenter()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.virtualEventRegistrant".casefold():
            from . import virtual_event_registrant

            return virtual_event_registrant.VirtualEventRegistrant()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.virtualEventRegistration".casefold():
            from . import virtual_event_registration

            return virtual_event_registration.VirtualEventRegistration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.virtualEventRegistrationQuestion".casefold():
            from . import virtual_event_registration_question

            return virtual_event_registration_question.VirtualEventRegistrationQuestion()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.virtualEventSession".casefold():
            from . import virtual_event_session

            return virtual_event_session.VirtualEventSession()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.virtualEventsRoot".casefold():
            from . import virtual_events_root

            return virtual_events_root.VirtualEventsRoot()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.virtualEventWebinar".casefold():
            from . import virtual_event_webinar

            return virtual_event_webinar.VirtualEventWebinar()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.voiceAuthenticationMethodConfiguration".casefold():
            from . import voice_authentication_method_configuration

            return voice_authentication_method_configuration.VoiceAuthenticationMethodConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.voiceAuthenticationMethodTarget".casefold():
            from . import voice_authentication_method_target

            return voice_authentication_method_target.VoiceAuthenticationMethodTarget()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.vpnConfiguration".casefold():
            from . import vpn_configuration

            return vpn_configuration.VpnConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.vppToken".casefold():
            from . import vpp_token

            return vpp_token.VppToken()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.vulnerableManagedDevice".casefold():
            from . import vulnerable_managed_device

            return vulnerable_managed_device.VulnerableManagedDevice()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.webAccount".casefold():
            from . import web_account

            return web_account.WebAccount()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.webApp".casefold():
            from . import web_app

            return web_app.WebApp()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.webApplicationSegment".casefold():
            from . import web_application_segment

            return web_application_segment.WebApplicationSegment()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.webPart".casefold():
            from . import web_part

            return web_part.WebPart()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.win32LobApp".casefold():
            from . import win32_lob_app

            return win32_lob_app.Win32LobApp()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windows10CertificateProfileBase".casefold():
            from . import windows10_certificate_profile_base

            return windows10_certificate_profile_base.Windows10CertificateProfileBase()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windows10CompliancePolicy".casefold():
            from . import windows10_compliance_policy

            return windows10_compliance_policy.Windows10CompliancePolicy()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windows10CustomConfiguration".casefold():
            from . import windows10_custom_configuration

            return windows10_custom_configuration.Windows10CustomConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windows10DeviceFirmwareConfigurationInterface".casefold():
            from . import windows10_device_firmware_configuration_interface

            return windows10_device_firmware_configuration_interface.Windows10DeviceFirmwareConfigurationInterface()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windows10EasEmailProfileConfiguration".casefold():
            from . import windows10_eas_email_profile_configuration

            return windows10_eas_email_profile_configuration.Windows10EasEmailProfileConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windows10EndpointProtectionConfiguration".casefold():
            from . import windows10_endpoint_protection_configuration

            return windows10_endpoint_protection_configuration.Windows10EndpointProtectionConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windows10EnrollmentCompletionPageConfiguration".casefold():
            from . import windows10_enrollment_completion_page_configuration

            return windows10_enrollment_completion_page_configuration.Windows10EnrollmentCompletionPageConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windows10EnrollmentCompletionPageConfigurationPolicySetItem".casefold():
            from . import windows10_enrollment_completion_page_configuration_policy_set_item

            return windows10_enrollment_completion_page_configuration_policy_set_item.Windows10EnrollmentCompletionPageConfigurationPolicySetItem()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windows10EnterpriseModernAppManagementConfiguration".casefold():
            from . import windows10_enterprise_modern_app_management_configuration

            return windows10_enterprise_modern_app_management_configuration.Windows10EnterpriseModernAppManagementConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windows10GeneralConfiguration".casefold():
            from . import windows10_general_configuration

            return windows10_general_configuration.Windows10GeneralConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windows10ImportedPFXCertificateProfile".casefold():
            from . import windows10_imported_p_f_x_certificate_profile

            return windows10_imported_p_f_x_certificate_profile.Windows10ImportedPFXCertificateProfile()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windows10MobileCompliancePolicy".casefold():
            from . import windows10_mobile_compliance_policy

            return windows10_mobile_compliance_policy.Windows10MobileCompliancePolicy()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windows10NetworkBoundaryConfiguration".casefold():
            from . import windows10_network_boundary_configuration

            return windows10_network_boundary_configuration.Windows10NetworkBoundaryConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windows10PFXImportCertificateProfile".casefold():
            from . import windows10_p_f_x_import_certificate_profile

            return windows10_p_f_x_import_certificate_profile.Windows10PFXImportCertificateProfile()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windows10PkcsCertificateProfile".casefold():
            from . import windows10_pkcs_certificate_profile

            return windows10_pkcs_certificate_profile.Windows10PkcsCertificateProfile()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windows10SecureAssessmentConfiguration".casefold():
            from . import windows10_secure_assessment_configuration

            return windows10_secure_assessment_configuration.Windows10SecureAssessmentConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windows10TeamGeneralConfiguration".casefold():
            from . import windows10_team_general_configuration

            return windows10_team_general_configuration.Windows10TeamGeneralConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windows10VpnConfiguration".casefold():
            from . import windows10_vpn_configuration

            return windows10_vpn_configuration.Windows10VpnConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windows10XCertificateProfile".casefold():
            from . import windows10_x_certificate_profile

            return windows10_x_certificate_profile.Windows10XCertificateProfile()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windows10XSCEPCertificateProfile".casefold():
            from . import windows10_x_s_c_e_p_certificate_profile

            return windows10_x_s_c_e_p_certificate_profile.Windows10XSCEPCertificateProfile()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windows10XTrustedRootCertificate".casefold():
            from . import windows10_x_trusted_root_certificate

            return windows10_x_trusted_root_certificate.Windows10XTrustedRootCertificate()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windows10XVpnConfiguration".casefold():
            from . import windows10_x_vpn_configuration

            return windows10_x_vpn_configuration.Windows10XVpnConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windows10XWifiConfiguration".casefold():
            from . import windows10_x_wifi_configuration

            return windows10_x_wifi_configuration.Windows10XWifiConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windows81CertificateProfileBase".casefold():
            from . import windows81_certificate_profile_base

            return windows81_certificate_profile_base.Windows81CertificateProfileBase()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windows81CompliancePolicy".casefold():
            from . import windows81_compliance_policy

            return windows81_compliance_policy.Windows81CompliancePolicy()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windows81GeneralConfiguration".casefold():
            from . import windows81_general_configuration

            return windows81_general_configuration.Windows81GeneralConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windows81SCEPCertificateProfile".casefold():
            from . import windows81_s_c_e_p_certificate_profile

            return windows81_s_c_e_p_certificate_profile.Windows81SCEPCertificateProfile()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windows81TrustedRootCertificate".casefold():
            from . import windows81_trusted_root_certificate

            return windows81_trusted_root_certificate.Windows81TrustedRootCertificate()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windows81VpnConfiguration".casefold():
            from . import windows81_vpn_configuration

            return windows81_vpn_configuration.Windows81VpnConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windows81WifiImportConfiguration".casefold():
            from . import windows81_wifi_import_configuration

            return windows81_wifi_import_configuration.Windows81WifiImportConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windowsAppX".casefold():
            from . import windows_app_x

            return windows_app_x.WindowsAppX()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windowsAssignedAccessProfile".casefold():
            from . import windows_assigned_access_profile

            return windows_assigned_access_profile.WindowsAssignedAccessProfile()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windowsAutopilotDeploymentProfile".casefold():
            from . import windows_autopilot_deployment_profile

            return windows_autopilot_deployment_profile.WindowsAutopilotDeploymentProfile()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windowsAutopilotDeploymentProfileAssignment".casefold():
            from . import windows_autopilot_deployment_profile_assignment

            return windows_autopilot_deployment_profile_assignment.WindowsAutopilotDeploymentProfileAssignment()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windowsAutopilotDeploymentProfilePolicySetItem".casefold():
            from . import windows_autopilot_deployment_profile_policy_set_item

            return windows_autopilot_deployment_profile_policy_set_item.WindowsAutopilotDeploymentProfilePolicySetItem()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windowsAutopilotDeviceIdentity".casefold():
            from . import windows_autopilot_device_identity

            return windows_autopilot_device_identity.WindowsAutopilotDeviceIdentity()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windowsAutopilotSettings".casefold():
            from . import windows_autopilot_settings

            return windows_autopilot_settings.WindowsAutopilotSettings()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windowsCertificateProfileBase".casefold():
            from . import windows_certificate_profile_base

            return windows_certificate_profile_base.WindowsCertificateProfileBase()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windowsDefenderAdvancedThreatProtectionConfiguration".casefold():
            from . import windows_defender_advanced_threat_protection_configuration

            return windows_defender_advanced_threat_protection_configuration.WindowsDefenderAdvancedThreatProtectionConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windowsDefenderApplicationControlSupplementalPolicy".casefold():
            from . import windows_defender_application_control_supplemental_policy

            return windows_defender_application_control_supplemental_policy.WindowsDefenderApplicationControlSupplementalPolicy()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windowsDefenderApplicationControlSupplementalPolicyAssignment".casefold():
            from . import windows_defender_application_control_supplemental_policy_assignment

            return windows_defender_application_control_supplemental_policy_assignment.WindowsDefenderApplicationControlSupplementalPolicyAssignment()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windowsDefenderApplicationControlSupplementalPolicyDeploymentStatus".casefold():
            from . import windows_defender_application_control_supplemental_policy_deployment_status

            return windows_defender_application_control_supplemental_policy_deployment_status.WindowsDefenderApplicationControlSupplementalPolicyDeploymentStatus()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windowsDefenderApplicationControlSupplementalPolicyDeploymentSummary".casefold():
            from . import windows_defender_application_control_supplemental_policy_deployment_summary

            return windows_defender_application_control_supplemental_policy_deployment_summary.WindowsDefenderApplicationControlSupplementalPolicyDeploymentSummary()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windowsDeliveryOptimizationConfiguration".casefold():
            from . import windows_delivery_optimization_configuration

            return windows_delivery_optimization_configuration.WindowsDeliveryOptimizationConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windowsDeviceMalwareState".casefold():
            from . import windows_device_malware_state
            from .managed_tenants import windows_device_malware_state

            return windows_device_malware_state.WindowsDeviceMalwareState()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windowsDomainJoinConfiguration".casefold():
            from . import windows_domain_join_configuration

            return windows_domain_join_configuration.WindowsDomainJoinConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windowsDriverUpdateInventory".casefold():
            from . import windows_driver_update_inventory

            return windows_driver_update_inventory.WindowsDriverUpdateInventory()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windowsDriverUpdateProfile".casefold():
            from . import windows_driver_update_profile

            return windows_driver_update_profile.WindowsDriverUpdateProfile()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windowsDriverUpdateProfileAssignment".casefold():
            from . import windows_driver_update_profile_assignment

            return windows_driver_update_profile_assignment.WindowsDriverUpdateProfileAssignment()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windowsFeatureUpdateCatalogItem".casefold():
            from . import windows_feature_update_catalog_item

            return windows_feature_update_catalog_item.WindowsFeatureUpdateCatalogItem()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windowsFeatureUpdateProfile".casefold():
            from . import windows_feature_update_profile

            return windows_feature_update_profile.WindowsFeatureUpdateProfile()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windowsFeatureUpdateProfileAssignment".casefold():
            from . import windows_feature_update_profile_assignment

            return windows_feature_update_profile_assignment.WindowsFeatureUpdateProfileAssignment()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windowsHealthMonitoringConfiguration".casefold():
            from . import windows_health_monitoring_configuration

            return windows_health_monitoring_configuration.WindowsHealthMonitoringConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windowsHelloForBusinessAuthenticationMethod".casefold():
            from . import windows_hello_for_business_authentication_method

            return windows_hello_for_business_authentication_method.WindowsHelloForBusinessAuthenticationMethod()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windowsIdentityProtectionConfiguration".casefold():
            from . import windows_identity_protection_configuration

            return windows_identity_protection_configuration.WindowsIdentityProtectionConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windowsInformationProtection".casefold():
            from . import windows_information_protection

            return windows_information_protection.WindowsInformationProtection()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windowsInformationProtectionAppLearningSummary".casefold():
            from . import windows_information_protection_app_learning_summary

            return windows_information_protection_app_learning_summary.WindowsInformationProtectionAppLearningSummary()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windowsInformationProtectionAppLockerFile".casefold():
            from . import windows_information_protection_app_locker_file

            return windows_information_protection_app_locker_file.WindowsInformationProtectionAppLockerFile()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windowsInformationProtectionDeviceRegistration".casefold():
            from . import windows_information_protection_device_registration

            return windows_information_protection_device_registration.WindowsInformationProtectionDeviceRegistration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windowsInformationProtectionNetworkLearningSummary".casefold():
            from . import windows_information_protection_network_learning_summary

            return windows_information_protection_network_learning_summary.WindowsInformationProtectionNetworkLearningSummary()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windowsInformationProtectionPolicy".casefold():
            from . import windows_information_protection_policy

            return windows_information_protection_policy.WindowsInformationProtectionPolicy()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windowsInformationProtectionWipeAction".casefold():
            from . import windows_information_protection_wipe_action

            return windows_information_protection_wipe_action.WindowsInformationProtectionWipeAction()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windowsKioskConfiguration".casefold():
            from . import windows_kiosk_configuration

            return windows_kiosk_configuration.WindowsKioskConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windowsMalwareInformation".casefold():
            from . import windows_malware_information

            return windows_malware_information.WindowsMalwareInformation()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windowsManagedAppProtection".casefold():
            from . import windows_managed_app_protection

            return windows_managed_app_protection.WindowsManagedAppProtection()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windowsManagedDevice".casefold():
            from . import windows_managed_device

            return windows_managed_device.WindowsManagedDevice()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windowsManagementApp".casefold():
            from . import windows_management_app

            return windows_management_app.WindowsManagementApp()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windowsManagementAppHealthState".casefold():
            from . import windows_management_app_health_state

            return windows_management_app_health_state.WindowsManagementAppHealthState()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windowsManagementAppHealthSummary".casefold():
            from . import windows_management_app_health_summary

            return windows_management_app_health_summary.WindowsManagementAppHealthSummary()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windowsMicrosoftEdgeApp".casefold():
            from . import windows_microsoft_edge_app

            return windows_microsoft_edge_app.WindowsMicrosoftEdgeApp()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windowsMobileMSI".casefold():
            from . import windows_mobile_m_s_i

            return windows_mobile_m_s_i.WindowsMobileMSI()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windowsPhone81AppX".casefold():
            from . import windows_phone81_app_x

            return windows_phone81_app_x.WindowsPhone81AppX()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windowsPhone81AppXBundle".casefold():
            from . import windows_phone81_app_x_bundle

            return windows_phone81_app_x_bundle.WindowsPhone81AppXBundle()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windowsPhone81CertificateProfileBase".casefold():
            from . import windows_phone81_certificate_profile_base

            return windows_phone81_certificate_profile_base.WindowsPhone81CertificateProfileBase()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windowsPhone81CompliancePolicy".casefold():
            from . import windows_phone81_compliance_policy

            return windows_phone81_compliance_policy.WindowsPhone81CompliancePolicy()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windowsPhone81CustomConfiguration".casefold():
            from . import windows_phone81_custom_configuration

            return windows_phone81_custom_configuration.WindowsPhone81CustomConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windowsPhone81GeneralConfiguration".casefold():
            from . import windows_phone81_general_configuration

            return windows_phone81_general_configuration.WindowsPhone81GeneralConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windowsPhone81ImportedPFXCertificateProfile".casefold():
            from . import windows_phone81_imported_p_f_x_certificate_profile

            return windows_phone81_imported_p_f_x_certificate_profile.WindowsPhone81ImportedPFXCertificateProfile()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windowsPhone81SCEPCertificateProfile".casefold():
            from . import windows_phone81_s_c_e_p_certificate_profile

            return windows_phone81_s_c_e_p_certificate_profile.WindowsPhone81SCEPCertificateProfile()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windowsPhone81StoreApp".casefold():
            from . import windows_phone81_store_app

            return windows_phone81_store_app.WindowsPhone81StoreApp()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windowsPhone81TrustedRootCertificate".casefold():
            from . import windows_phone81_trusted_root_certificate

            return windows_phone81_trusted_root_certificate.WindowsPhone81TrustedRootCertificate()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windowsPhone81VpnConfiguration".casefold():
            from . import windows_phone81_vpn_configuration

            return windows_phone81_vpn_configuration.WindowsPhone81VpnConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windowsPhoneEASEmailProfileConfiguration".casefold():
            from . import windows_phone_e_a_s_email_profile_configuration

            return windows_phone_e_a_s_email_profile_configuration.WindowsPhoneEASEmailProfileConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windowsPhoneXAP".casefold():
            from . import windows_phone_x_a_p

            return windows_phone_x_a_p.WindowsPhoneXAP()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windowsPrivacyDataAccessControlItem".casefold():
            from . import windows_privacy_data_access_control_item

            return windows_privacy_data_access_control_item.WindowsPrivacyDataAccessControlItem()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windowsProtectionState".casefold():
            from . import windows_protection_state
            from .managed_tenants import windows_protection_state

            return windows_protection_state.WindowsProtectionState()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windowsQualityUpdateCatalogItem".casefold():
            from . import windows_quality_update_catalog_item

            return windows_quality_update_catalog_item.WindowsQualityUpdateCatalogItem()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windowsQualityUpdateProfile".casefold():
            from . import windows_quality_update_profile

            return windows_quality_update_profile.WindowsQualityUpdateProfile()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windowsQualityUpdateProfileAssignment".casefold():
            from . import windows_quality_update_profile_assignment

            return windows_quality_update_profile_assignment.WindowsQualityUpdateProfileAssignment()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windowsStoreApp".casefold():
            from . import windows_store_app

            return windows_store_app.WindowsStoreApp()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windowsUniversalAppX".casefold():
            from . import windows_universal_app_x

            return windows_universal_app_x.WindowsUniversalAppX()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windowsUniversalAppXContainedApp".casefold():
            from . import windows_universal_app_x_contained_app

            return windows_universal_app_x_contained_app.WindowsUniversalAppXContainedApp()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windowsUpdateCatalogItem".casefold():
            from . import windows_update_catalog_item

            return windows_update_catalog_item.WindowsUpdateCatalogItem()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windowsUpdateForBusinessConfiguration".casefold():
            from . import windows_update_for_business_configuration

            return windows_update_for_business_configuration.WindowsUpdateForBusinessConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windowsUpdates.azureADDevice".casefold():
            from .windows_updates import azure_a_d_device

            return azure_a_d_device.AzureADDevice()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windowsUpdates.catalog".casefold():
            from .windows_updates import catalog

            return catalog.Catalog()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windowsUpdates.catalogEntry".casefold():
            from .windows_updates import catalog_entry

            return catalog_entry.CatalogEntry()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windowsUpdates.complianceChange".casefold():
            from .windows_updates import compliance_change

            return compliance_change.ComplianceChange()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windowsUpdates.contentApproval".casefold():
            from .windows_updates import content_approval

            return content_approval.ContentApproval()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windowsUpdates.deployment".casefold():
            from .windows_updates import deployment

            return deployment.Deployment()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windowsUpdates.deploymentAudience".casefold():
            from .windows_updates import deployment_audience

            return deployment_audience.DeploymentAudience()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windowsUpdates.driverUpdateCatalogEntry".casefold():
            from .windows_updates import driver_update_catalog_entry

            return driver_update_catalog_entry.DriverUpdateCatalogEntry()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windowsUpdates.featureUpdateCatalogEntry".casefold():
            from .windows_updates import feature_update_catalog_entry

            return feature_update_catalog_entry.FeatureUpdateCatalogEntry()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windowsUpdates.operationalInsightsConnection".casefold():
            from .windows_updates import operational_insights_connection

            return operational_insights_connection.OperationalInsightsConnection()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windowsUpdates.qualityUpdateCatalogEntry".casefold():
            from .windows_updates import quality_update_catalog_entry

            return quality_update_catalog_entry.QualityUpdateCatalogEntry()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windowsUpdates.resourceConnection".casefold():
            from .windows_updates import resource_connection

            return resource_connection.ResourceConnection()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windowsUpdates.softwareUpdateCatalogEntry".casefold():
            from .windows_updates import software_update_catalog_entry

            return software_update_catalog_entry.SoftwareUpdateCatalogEntry()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windowsUpdates.updatableAsset".casefold():
            from .windows_updates import updatable_asset

            return updatable_asset.UpdatableAsset()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windowsUpdates.updatableAssetGroup".casefold():
            from .windows_updates import updatable_asset_group

            return updatable_asset_group.UpdatableAssetGroup()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windowsUpdates.updatePolicy".casefold():
            from .windows_updates import update_policy

            return update_policy.UpdatePolicy()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windowsUpdateState".casefold():
            from . import windows_update_state

            return windows_update_state.WindowsUpdateState()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windowsVpnConfiguration".casefold():
            from . import windows_vpn_configuration

            return windows_vpn_configuration.WindowsVpnConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windowsWebApp".casefold():
            from . import windows_web_app

            return windows_web_app.WindowsWebApp()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windowsWifiConfiguration".casefold():
            from . import windows_wifi_configuration

            return windows_wifi_configuration.WindowsWifiConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windowsWifiEnterpriseEAPConfiguration".casefold():
            from . import windows_wifi_enterprise_e_a_p_configuration

            return windows_wifi_enterprise_e_a_p_configuration.WindowsWifiEnterpriseEAPConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.windowsWiredNetworkConfiguration".casefold():
            from . import windows_wired_network_configuration

            return windows_wired_network_configuration.WindowsWiredNetworkConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.winGetApp".casefold():
            from . import win_get_app

            return win_get_app.WinGetApp()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.workbook".casefold():
            from . import workbook

            return workbook.Workbook()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.workbookApplication".casefold():
            from . import workbook_application

            return workbook_application.WorkbookApplication()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.workbookChart".casefold():
            from . import workbook_chart

            return workbook_chart.WorkbookChart()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.workbookChartAreaFormat".casefold():
            from . import workbook_chart_area_format

            return workbook_chart_area_format.WorkbookChartAreaFormat()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.workbookChartAxes".casefold():
            from . import workbook_chart_axes

            return workbook_chart_axes.WorkbookChartAxes()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.workbookChartAxis".casefold():
            from . import workbook_chart_axis

            return workbook_chart_axis.WorkbookChartAxis()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.workbookChartAxisFormat".casefold():
            from . import workbook_chart_axis_format

            return workbook_chart_axis_format.WorkbookChartAxisFormat()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.workbookChartAxisTitle".casefold():
            from . import workbook_chart_axis_title

            return workbook_chart_axis_title.WorkbookChartAxisTitle()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.workbookChartAxisTitleFormat".casefold():
            from . import workbook_chart_axis_title_format

            return workbook_chart_axis_title_format.WorkbookChartAxisTitleFormat()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.workbookChartDataLabelFormat".casefold():
            from . import workbook_chart_data_label_format

            return workbook_chart_data_label_format.WorkbookChartDataLabelFormat()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.workbookChartDataLabels".casefold():
            from . import workbook_chart_data_labels

            return workbook_chart_data_labels.WorkbookChartDataLabels()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.workbookChartFill".casefold():
            from . import workbook_chart_fill

            return workbook_chart_fill.WorkbookChartFill()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.workbookChartFont".casefold():
            from . import workbook_chart_font

            return workbook_chart_font.WorkbookChartFont()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.workbookChartGridlines".casefold():
            from . import workbook_chart_gridlines

            return workbook_chart_gridlines.WorkbookChartGridlines()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.workbookChartGridlinesFormat".casefold():
            from . import workbook_chart_gridlines_format

            return workbook_chart_gridlines_format.WorkbookChartGridlinesFormat()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.workbookChartLegend".casefold():
            from . import workbook_chart_legend

            return workbook_chart_legend.WorkbookChartLegend()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.workbookChartLegendFormat".casefold():
            from . import workbook_chart_legend_format

            return workbook_chart_legend_format.WorkbookChartLegendFormat()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.workbookChartLineFormat".casefold():
            from . import workbook_chart_line_format

            return workbook_chart_line_format.WorkbookChartLineFormat()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.workbookChartPoint".casefold():
            from . import workbook_chart_point

            return workbook_chart_point.WorkbookChartPoint()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.workbookChartPointFormat".casefold():
            from . import workbook_chart_point_format

            return workbook_chart_point_format.WorkbookChartPointFormat()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.workbookChartSeries".casefold():
            from . import workbook_chart_series

            return workbook_chart_series.WorkbookChartSeries()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.workbookChartSeriesFormat".casefold():
            from . import workbook_chart_series_format

            return workbook_chart_series_format.WorkbookChartSeriesFormat()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.workbookChartTitle".casefold():
            from . import workbook_chart_title

            return workbook_chart_title.WorkbookChartTitle()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.workbookChartTitleFormat".casefold():
            from . import workbook_chart_title_format

            return workbook_chart_title_format.WorkbookChartTitleFormat()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.workbookComment".casefold():
            from . import workbook_comment

            return workbook_comment.WorkbookComment()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.workbookCommentReply".casefold():
            from . import workbook_comment_reply

            return workbook_comment_reply.WorkbookCommentReply()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.workbookFilter".casefold():
            from . import workbook_filter

            return workbook_filter.WorkbookFilter()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.workbookFormatProtection".casefold():
            from . import workbook_format_protection

            return workbook_format_protection.WorkbookFormatProtection()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.workbookFunctionResult".casefold():
            from . import workbook_function_result

            return workbook_function_result.WorkbookFunctionResult()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.workbookFunctions".casefold():
            from . import workbook_functions

            return workbook_functions.WorkbookFunctions()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.workbookNamedItem".casefold():
            from . import workbook_named_item

            return workbook_named_item.WorkbookNamedItem()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.workbookOperation".casefold():
            from . import workbook_operation

            return workbook_operation.WorkbookOperation()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.workbookPivotTable".casefold():
            from . import workbook_pivot_table

            return workbook_pivot_table.WorkbookPivotTable()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.workbookRange".casefold():
            from . import workbook_range

            return workbook_range.WorkbookRange()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.workbookRangeBorder".casefold():
            from . import workbook_range_border

            return workbook_range_border.WorkbookRangeBorder()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.workbookRangeFill".casefold():
            from . import workbook_range_fill

            return workbook_range_fill.WorkbookRangeFill()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.workbookRangeFont".casefold():
            from . import workbook_range_font

            return workbook_range_font.WorkbookRangeFont()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.workbookRangeFormat".casefold():
            from . import workbook_range_format

            return workbook_range_format.WorkbookRangeFormat()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.workbookRangeSort".casefold():
            from . import workbook_range_sort

            return workbook_range_sort.WorkbookRangeSort()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.workbookRangeView".casefold():
            from . import workbook_range_view

            return workbook_range_view.WorkbookRangeView()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.workbookTable".casefold():
            from . import workbook_table

            return workbook_table.WorkbookTable()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.workbookTableColumn".casefold():
            from . import workbook_table_column

            return workbook_table_column.WorkbookTableColumn()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.workbookTableRow".casefold():
            from . import workbook_table_row

            return workbook_table_row.WorkbookTableRow()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.workbookTableSort".casefold():
            from . import workbook_table_sort

            return workbook_table_sort.WorkbookTableSort()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.workbookWorksheet".casefold():
            from . import workbook_worksheet

            return workbook_worksheet.WorkbookWorksheet()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.workbookWorksheetProtection".casefold():
            from . import workbook_worksheet_protection

            return workbook_worksheet_protection.WorkbookWorksheetProtection()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.workforceIntegration".casefold():
            from . import workforce_integration

            return workforce_integration.WorkforceIntegration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.workPosition".casefold():
            from . import work_position

            return work_position.WorkPosition()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.workspace".casefold():
            from . import workspace

            return workspace.Workspace()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.x509CertificateAuthenticationMethodConfiguration".casefold():
            from . import x509_certificate_authentication_method_configuration

            return x509_certificate_authentication_method_configuration.X509CertificateAuthenticationMethodConfiguration()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.zebraFotaArtifact".casefold():
            from . import zebra_fota_artifact

            return zebra_fota_artifact.ZebraFotaArtifact()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.zebraFotaConnector".casefold():
            from . import zebra_fota_connector

            return zebra_fota_connector.ZebraFotaConnector()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.zebraFotaDeployment".casefold():
            from . import zebra_fota_deployment

            return zebra_fota_deployment.ZebraFotaDeployment()
        return Entity()
    
    def get_field_deserializers(self,) -> Dict[str, Callable[[ParseNode], None]]:
        """
        The deserialization information for the current model
        Returns: Dict[str, Callable[[ParseNode], None]]
        """
        from . import aad_user_conversation_member, access_package, access_package_assignment, access_package_assignment_policy, access_package_assignment_request, access_package_assignment_request_workflow_extension, access_package_assignment_resource_role, access_package_assignment_workflow_extension, access_package_catalog, access_package_resource, access_package_resource_environment, access_package_resource_request, access_package_resource_role, access_package_resource_role_scope, access_package_resource_scope, access_package_subject, access_review, access_review_decision, access_review_history_definition, access_review_history_instance, access_review_instance, access_review_instance_decision_item, access_review_policy, access_review_reviewer, access_review_schedule_definition, access_review_set, access_review_stage, active_directory_windows_autopilot_deployment_profile, activity_based_timeout_policy, activity_history_item, activity_statistics, add_large_gallery_view_operation, administrative_unit, admin_consent_request_policy, admin_report_settings, admin_windows, admin_windows_updates, advanced_threat_protection_onboarding_device_setting_state, advanced_threat_protection_onboarding_state_summary, agreement, agreement_acceptance, agreement_file, agreement_file_localization, agreement_file_properties, agreement_file_version, alert, allowed_data_location, allowed_value, android_certificate_profile_base, android_compliance_policy, android_custom_configuration, android_device_compliance_local_action_base, android_device_compliance_local_action_lock_device, android_device_compliance_local_action_lock_device_with_passcode, android_device_owner_certificate_profile_base, android_device_owner_compliance_policy, android_device_owner_derived_credential_authentication_configuration, android_device_owner_enrollment_profile, android_device_owner_enterprise_wi_fi_configuration, android_device_owner_general_device_configuration, android_device_owner_imported_p_f_x_certificate_profile, android_device_owner_pkcs_certificate_profile, android_device_owner_scep_certificate_profile, android_device_owner_trusted_root_certificate, android_device_owner_vpn_configuration, android_device_owner_wi_fi_configuration, android_eas_email_profile_configuration, android_enterprise_wi_fi_configuration, android_for_work_app, android_for_work_app_configuration_schema, android_for_work_certificate_profile_base, android_for_work_compliance_policy, android_for_work_custom_configuration, android_for_work_eas_email_profile_base, android_for_work_enrollment_profile, android_for_work_enterprise_wi_fi_configuration, android_for_work_general_device_configuration, android_for_work_gmail_eas_configuration, android_for_work_imported_p_f_x_certificate_profile, android_for_work_mobile_app_configuration, android_for_work_nine_work_eas_configuration, android_for_work_pkcs_certificate_profile, android_for_work_scep_certificate_profile, android_for_work_settings, android_for_work_trusted_root_certificate, android_for_work_vpn_configuration, android_for_work_wi_fi_configuration, android_general_device_configuration, android_imported_p_f_x_certificate_profile, android_lob_app, android_managed_app_protection, android_managed_app_registration, android_managed_store_account_enterprise_settings, android_managed_store_app, android_managed_store_app_configuration, android_managed_store_app_configuration_schema, android_managed_store_web_app, android_oma_cp_configuration, android_pkcs_certificate_profile, android_scep_certificate_profile, android_store_app, android_trusted_root_certificate, android_vpn_configuration, android_wi_fi_configuration, android_work_profile_certificate_profile_base, android_work_profile_compliance_policy, android_work_profile_custom_configuration, android_work_profile_eas_email_profile_base, android_work_profile_enterprise_wi_fi_configuration, android_work_profile_general_device_configuration, android_work_profile_gmail_eas_configuration, android_work_profile_nine_work_eas_configuration, android_work_profile_pkcs_certificate_profile, android_work_profile_scep_certificate_profile, android_work_profile_trusted_root_certificate, android_work_profile_vpn_configuration, android_work_profile_wi_fi_configuration, anonymous_guest_conversation_member, aosp_device_owner_certificate_profile_base, aosp_device_owner_compliance_policy, aosp_device_owner_device_configuration, aosp_device_owner_enterprise_wi_fi_configuration, aosp_device_owner_pkcs_certificate_profile, aosp_device_owner_scep_certificate_profile, aosp_device_owner_trusted_root_certificate, aosp_device_owner_wi_fi_configuration, apple_device_features_configuration_base, apple_enrollment_profile_assignment, apple_expedited_checkin_configuration_base, apple_managed_identity_provider, apple_push_notification_certificate, apple_user_initiated_enrollment_profile, apple_vpn_configuration, apple_vpp_token_troubleshooting_event, application, application_segment, application_sign_in_detailed_summary, application_sign_in_summary, application_template, approval, approval_step, approval_workflow_provider, app_consent_approval_route, app_consent_request, app_credential_sign_in_activity, app_log_collection_request, app_management_policy, app_role_assignment, app_scope, app_vulnerability_managed_device, app_vulnerability_mobile_app, app_vulnerability_task, assignment_filter_evaluation_status_details, associated_team_info, attachment, attachment_base, attachment_session, attack_simulation_operation, attack_simulation_root, attendance_record, attribute_mapping_function_schema, attribute_set, audio_routing_group, audit_event, authentication, authentication_combination_configuration, authentication_context_class_reference, authentication_events_flow, authentication_events_policy, authentication_event_listener, authentication_flows_policy, authentication_listener, authentication_method, authentication_methods_policy, authentication_methods_root, authentication_method_configuration, authentication_method_mode_detail, authentication_method_target, authentication_strength_policy, authentication_strength_root, authored_note, authorization_policy, azure_a_d_windows_autopilot_deployment_profile, azure_communication_services_user_conversation_member, b2c_authentication_methods_policy, b2c_identity_user_flow, b2x_identity_user_flow, base_item, base_item_version, bitlocker, bitlocker_recovery_key, booking_appointment, booking_business, booking_currency, booking_customer, booking_custom_question, booking_named_entity, booking_person, booking_service, booking_staff_member, browser_shared_cookie, browser_site, browser_site_list, built_in_identity_provider, business_flow, business_flow_template, business_scenario, business_scenario_planner, business_scenario_plan_reference, business_scenario_task, calendar, calendar_group, calendar_permission, calendar_sharing_message, call, call_activity_statistics, call_recording, call_transcript, cancel_media_processing_operation, canvas_layout, cart_to_class_association, certificate_authority_as_entity, certificate_authority_path, certificate_based_application_configuration, certificate_based_auth_configuration, certificate_connector_details, change_tracked_entity, channel, chat, chat_activity_statistics, chat_message, chat_message_hosted_content, chat_message_info, checklist_item, chrome_o_s_onboarding_settings, claims_mapping_policy, classification_job_response, cloud_app_security_profile, cloud_pc_audit_event, cloud_pc_bulk_action, cloud_pc_bulk_power_off, cloud_pc_bulk_power_on, cloud_pc_cross_cloud_government_organization_mapping, cloud_pc_device_image, cloud_pc_export_job, cloud_pc_external_partner_setting, cloud_pc_gallery_image, cloud_pc_on_premises_connection, cloud_pc_organization_settings, cloud_pc_provisioning_policy, cloud_pc_provisioning_policy_assignment, cloud_pc_reports, cloud_pc_service_plan, cloud_pc_shared_use_service_plan, cloud_pc_snapshot, cloud_pc_supported_region, cloud_pc_user_setting, cloud_pc_user_setting_assignment, cloud_p_c, cloud_p_c_connectivity_issue, column_definition, column_link, comanagement_eligible_device, command, comms_operation, company_subscription, compliance_management_partner, conditional_access_policy, conditional_access_root, conditional_access_template, config_manager_collection, connected_organization, connection_operation, connector, connector_group, contact, contact_folder, contact_merge_suggestions, content_sharing_session, content_type, continuous_access_evaluation_policy, contract, conversation, conversation_member, conversation_thread, cors_configuration_v2, country_named_location, credential_usage_summary, credential_user_registration_count, credential_user_registration_details, cross_tenant_access_policy, cross_tenant_access_policy_configuration_default, custom_access_package_workflow_extension, custom_app_scope, custom_authentication_extension, custom_callout_extension, custom_extension_handler, custom_extension_stage_setting, custom_security_attribute_definition, data_classification_service, data_loss_prevention_policy, data_policy_operation, data_sharing_consent, default_device_compliance_policy, default_managed_app_protection, default_user_role_override, delegated_admin_access_assignment, delegated_admin_customer, delegated_admin_relationship, delegated_admin_relationship_operation, delegated_admin_relationship_request, delegated_admin_service_management_detail, delegated_permission_classification, deleted_item_container, deleted_team, delta_participants, dep_enrollment_base_profile, dep_enrollment_profile, dep_i_o_s_enrollment_profile, dep_mac_o_s_enrollment_profile, dep_onboarding_setting, detected_app, device, device_and_app_management_assignment_filter, device_and_app_management_role_assignment, device_and_app_management_role_definition, device_app_management, device_app_management_task, device_category, device_comanagement_authority_configuration, device_compliance_action_item, device_compliance_device_overview, device_compliance_device_status, device_compliance_policy, device_compliance_policy_assignment, device_compliance_policy_device_state_summary, device_compliance_policy_group_assignment, device_compliance_policy_policy_set_item, device_compliance_policy_setting_state_summary, device_compliance_policy_state, device_compliance_scheduled_action_for_rule, device_compliance_script, device_compliance_script_device_state, device_compliance_script_run_summary, device_compliance_setting_state, device_compliance_user_overview, device_compliance_user_status, device_configuration, device_configuration_assignment, device_configuration_conflict_summary, device_configuration_device_overview, device_configuration_device_state_summary, device_configuration_device_status, device_configuration_group_assignment, device_configuration_policy_set_item, device_configuration_state, device_configuration_user_overview, device_configuration_user_state_summary, device_configuration_user_status, device_custom_attribute_shell_script, device_enrollment_configuration, device_enrollment_limit_configuration, device_enrollment_notification_configuration, device_enrollment_platform_restrictions_configuration, device_enrollment_platform_restriction_configuration, device_enrollment_windows_hello_for_business_configuration, device_health_script, device_health_script_assignment, device_health_script_device_state, device_health_script_run_summary, device_install_state, device_local_credential_info, device_log_collection_response, device_management_abstract_complex_setting_definition, device_management_abstract_complex_setting_instance, device_management_autopilot_event, device_management_autopilot_policy_status_detail, device_management_boolean_setting_instance, device_management_cached_report_configuration, device_management_collection_setting_definition, device_management_collection_setting_instance, device_management_complex_setting_definition, device_management_complex_setting_instance, device_management_compliance_action_item, device_management_compliance_policy, device_management_compliance_scheduled_action_for_rule, device_management_configuration_category, device_management_configuration_choice_setting_collection_definition, device_management_configuration_choice_setting_definition, device_management_configuration_policy, device_management_configuration_policy_assignment, device_management_configuration_policy_policy_set_item, device_management_configuration_policy_template, device_management_configuration_redirect_setting_definition, device_management_configuration_setting, device_management_configuration_setting_definition, device_management_configuration_setting_group_collection_definition, device_management_configuration_setting_group_definition, device_management_configuration_setting_template, device_management_configuration_simple_setting_collection_definition, device_management_configuration_simple_setting_definition, device_management_derived_credential_settings, device_management_domain_join_connector, device_management_exchange_connector, device_management_exchange_on_premises_policy, device_management_export_job, device_management_integer_setting_instance, device_management_intent, device_management_intent_assignment, device_management_intent_device_setting_state_summary, device_management_intent_device_state, device_management_intent_device_state_summary, device_management_intent_setting_category, device_management_intent_user_state, device_management_intent_user_state_summary, device_management_partner, device_management_reports, device_management_resource_access_profile_assignment, device_management_resource_access_profile_base, device_management_reusable_policy_setting, device_management_script, device_management_script_assignment, device_management_script_device_state, device_management_script_group_assignment, device_management_script_policy_set_item, device_management_script_run_summary, device_management_script_user_state, device_management_setting_category, device_management_setting_definition, device_management_setting_instance, device_management_string_setting_instance, device_management_template, device_management_template_insights_definition, device_management_template_setting_category, device_management_troubleshooting_event, device_registration_policy, device_setup_configuration, device_shell_script, directory, directory_audit, directory_definition, directory_object, directory_object_partner_reference, directory_role, directory_role_access_review_policy, directory_role_template, directory_setting, directory_setting_template, dlp_evaluate_policies_job_response, document, document_comment, document_comment_reply, document_set_version, domain, domain_dns_cname_record, domain_dns_mx_record, domain_dns_record, domain_dns_srv_record, domain_dns_txt_record, domain_dns_unavailable_record, domain_security_profile, drive, drive_item, drive_item_version, eas_email_profile_configuration_base, edge, edition_upgrade_configuration, educational_activity, education_assignment, education_assignment_defaults, education_assignment_resource, education_assignment_settings, education_category, education_class, education_feedback_outcome, education_feedback_resource_outcome, education_grading_category, education_organization, education_outcome, education_points_outcome, education_rubric, education_rubric_outcome, education_school, education_submission, education_submission_resource, education_synchronization_error, education_synchronization_profile, education_synchronization_profile_status, education_user, email_activity_statistics, email_authentication_method, email_authentication_method_configuration, email_file_assessment_request, embedded_s_i_m_activation_code_pool, embedded_s_i_m_activation_code_pool_assignment, embedded_s_i_m_device_state, employee_experience_user, endpoint, enrollment_configuration_assignment, enrollment_profile, enrollment_restrictions_configuration_policy_set_item, enrollment_troubleshooting_event, enterprise_code_signing_certificate, entitlement_management, entitlement_management_settings, evaluate_label_job_response, event, event_message, event_message_request, event_message_response, exact_match_data_store, exact_match_data_store_base, exact_match_job_base, exact_match_lookup_job, exact_match_session, exact_match_session_base, exact_match_upload_agent, extension, extension_property, external, external_connection, external_domain_name, external_group, external_identities_policy, external_item, external_meeting_registrant, external_meeting_registration, external_users_self_service_sign_up_events_flow, e_book_install_summary, feature_rollout_policy, federated_identity_credential, fido2_authentication_method, fido2_authentication_method_configuration, fido2_combination_configuration, field_value_set, file_assessment_request, file_attachment, file_classification_request, file_security_profile, filter_operator_schema, focus_activity_statistics, governance_insight, governance_policy_template, governance_resource, governance_role_assignment, governance_role_assignment_request, governance_role_definition, governance_role_setting, governance_subject, group, group_lifecycle_policy, group_policy_category, group_policy_configuration, group_policy_configuration_assignment, group_policy_definition, group_policy_definition_file, group_policy_definition_value, group_policy_migration_report, group_policy_object_file, group_policy_operation, group_policy_presentation, group_policy_presentation_check_box, group_policy_presentation_combo_box, group_policy_presentation_decimal_text_box, group_policy_presentation_dropdown_list, group_policy_presentation_list_box, group_policy_presentation_long_decimal_text_box, group_policy_presentation_multi_text_box, group_policy_presentation_text, group_policy_presentation_text_box, group_policy_presentation_value, group_policy_presentation_value_boolean, group_policy_presentation_value_decimal, group_policy_presentation_value_list, group_policy_presentation_value_long_decimal, group_policy_presentation_value_multi_text, group_policy_presentation_value_text, group_policy_setting_mapping, group_policy_uploaded_definition_file, group_policy_uploaded_presentation, home_realm_discovery_policy, horizontal_section, horizontal_section_column, host_security_profile, identity_api_connector, identity_built_in_user_flow_attribute, identity_custom_user_flow_attribute, identity_provider, identity_provider_base, identity_security_defaults_enforcement_policy, identity_user_flow, identity_user_flow_attribute, identity_user_flow_attribute_assignment, impacted_resource, imported_apple_device_identity, imported_apple_device_identity_result, imported_device_identity, imported_device_identity_result, imported_windows_autopilot_device_identity, imported_windows_autopilot_device_identity_upload, inference_classification, inference_classification_override, information_protection, information_protection_label, information_protection_policy, insights_settings, internal_domain_federation, internet_explorer_mode, intune_branding_profile, intune_branding_profile_assignment, invalid_license_alert_configuration, invalid_license_alert_incident, invitation, invite_participants_operation, invoke_user_flow_listener, iosik_ev2_vpn_configuration, iosi_pad_o_s_web_clip, ios_certificate_profile, ios_certificate_profile_base, ios_compliance_policy, ios_custom_configuration, ios_derived_credential_authentication_configuration, ios_device_features_configuration, ios_eas_email_profile_configuration, ios_education_device_configuration, ios_edu_device_configuration, ios_enterprise_wi_fi_configuration, ios_expedited_checkin_configuration, ios_general_device_configuration, ios_imported_p_f_x_certificate_profile, ios_lob_app, ios_lob_app_provisioning_configuration, ios_lob_app_provisioning_configuration_assignment, ios_lob_app_provisioning_configuration_policy_set_item, ios_managed_app_protection, ios_managed_app_registration, ios_mobile_app_configuration, ios_pkcs_certificate_profile, ios_scep_certificate_profile, ios_store_app, ios_trusted_root_certificate, ios_update_configuration, ios_update_device_status, ios_vpn_configuration, ios_vpp_app, ios_vpp_app_assigned_device_license, ios_vpp_app_assigned_license, ios_vpp_app_assigned_user_license, ios_vpp_e_book, ios_vpp_e_book_assignment, ios_wi_fi_configuration, ip_application_segment, ip_named_location, ip_security_profile, item_activity, item_activity_o_l_d, item_activity_stat, item_address, item_analytics, item_attachment, item_email, item_facet, item_insights, item_patent, item_phone, item_publication, item_retention_label, job_response_base, language_proficiency, learning_assignment, learning_content, learning_course_activity, learning_provider, learning_self_initiated_course, license_details, linked_resource, list, list_item, list_item_version, localized_notification_message, long_running_operation, lookup_result_row, mac_os_vpp_app, mac_os_vpp_app_assigned_license, mac_o_s_certificate_profile_base, mac_o_s_compliance_policy, mac_o_s_custom_app_configuration, mac_o_s_custom_configuration, mac_o_s_device_features_configuration, mac_o_s_dmg_app, mac_o_s_endpoint_protection_configuration, mac_o_s_enterprise_wi_fi_configuration, mac_o_s_extensions_configuration, mac_o_s_general_device_configuration, mac_o_s_imported_p_f_x_certificate_profile, mac_o_s_lob_app, mac_o_s_mdatp_app, mac_o_s_microsoft_defender_app, mac_o_s_microsoft_edge_app, mac_o_s_office_suite_app, mac_o_s_pkcs_certificate_profile, mac_o_s_pkg_app, mac_o_s_scep_certificate_profile, mac_o_s_software_update_account_summary, mac_o_s_software_update_category_summary, mac_o_s_software_update_configuration, mac_o_s_software_update_state_summary, mac_o_s_trusted_root_certificate, mac_o_s_vpn_configuration, mac_o_s_wired_network_configuration, mac_o_s_wi_fi_configuration, mail_assessment_request, mail_folder, mail_search_folder, malware_state_for_windows_device, managed_all_device_certificate_state, managed_android_lob_app, managed_android_store_app, managed_app, managed_app_configuration, managed_app_operation, managed_app_policy, managed_app_policy_deployment_summary, managed_app_protection, managed_app_protection_policy_set_item, managed_app_registration, managed_app_status, managed_app_status_raw, managed_device, managed_device_certificate_state, managed_device_encryption_state, managed_device_mobile_app_configuration, managed_device_mobile_app_configuration_assignment, managed_device_mobile_app_configuration_device_status, managed_device_mobile_app_configuration_device_summary, managed_device_mobile_app_configuration_policy_set_item, managed_device_mobile_app_configuration_state, managed_device_mobile_app_configuration_user_status, managed_device_mobile_app_configuration_user_summary, managed_device_overview, managed_e_book, managed_e_book_assignment, managed_e_book_category, managed_i_o_s_lob_app, managed_i_o_s_store_app, managed_mobile_app, managed_mobile_lob_app, mdm_windows_information_protection_policy, mdm_windows_information_protection_policy_policy_set_item, meeting_activity_statistics, meeting_attendance_report, meeting_registrant, meeting_registrant_base, meeting_registration, meeting_registration_base, meeting_registration_question, membership_outlier_insight, mention, message, message_event, message_recipient, message_rule, message_trace, microsoft_account_user_conversation_member, microsoft_application_data_access_settings, microsoft_authenticator_authentication_method, microsoft_authenticator_authentication_method_configuration, microsoft_authenticator_authentication_method_target, microsoft_store_for_business_app, microsoft_store_for_business_contained_app, microsoft_tunnel_configuration, microsoft_tunnel_health_threshold, microsoft_tunnel_server, microsoft_tunnel_server_log_collection_response, microsoft_tunnel_site, mobile_app, mobile_app_assignment, mobile_app_category, mobile_app_content, mobile_app_content_file, mobile_app_dependency, mobile_app_install_status, mobile_app_install_summary, mobile_app_intent_and_state, mobile_app_policy_set_item, mobile_app_provisioning_config_group_assignment, mobile_app_relationship, mobile_app_supersedence, mobile_app_troubleshooting_event, mobile_contained_app, mobile_lob_app, mobile_threat_defense_connector, mobility_management_policy, multi_value_legacy_extended_property, mute_participants_operation, mute_participant_operation, named_location, ndes_connector, note, notebook, notification, notification_message_template, no_mfa_on_role_activation_alert_configuration, no_mfa_on_role_activation_alert_incident, offer_shift_request, office365_active_user_counts, office365_active_user_detail, office365_groups_activity_counts, office365_groups_activity_detail, office365_groups_activity_file_counts, office365_groups_activity_group_counts, office365_groups_activity_storage, office365_services_user_counts, office_graph_insights, office_suite_app, onenote, onenote_entity_base_model, onenote_entity_hierarchy_model, onenote_entity_schema_object_model, onenote_operation, onenote_page, onenote_resource, onenote_section, online_meeting, on_attribute_collection_listener, on_authentication_method_load_start_listener, on_interactive_auth_flow_start_listener, on_premises_agent, on_premises_agent_group, on_premises_conditional_access_settings, on_premises_directory_synchronization, on_premises_publishing_profile, on_token_issuance_start_custom_extension, on_token_issuance_start_listener, on_user_create_start_listener, open_id_connect_identity_provider, open_id_connect_provider, open_shift, open_shift_change_request, open_type_extension, operation, organization, organizational_branding, organizational_branding_localization, organizational_branding_properties, organization_settings, org_contact, outlook_category, outlook_item, outlook_task, outlook_task_folder, outlook_task_group, outlook_user, o_auth2_permission_grant, participant, participant_joining_notification, participant_left_notification, passwordless_microsoft_authenticator_authentication_method, password_authentication_method, payload, payload_compatible_assignment_filter, payload_response, permission, permission_grant_condition_set, permission_grant_policy, person, person_annotation, person_annual_event, person_award, person_certification, person_extension, person_interest, person_name, person_responsibility, person_website, phone_authentication_method, pinned_chat_message_info, place, planner, planner_assigned_to_task_board_task_format, planner_bucket, planner_bucket_task_board_task_format, planner_delta, planner_group, planner_plan, planner_plan_configuration, planner_plan_configuration_localization, planner_plan_details, planner_progress_task_board_task_format, planner_roster, planner_roster_member, planner_task, planner_task_configuration, planner_task_details, planner_user, play_prompt_operation, policy_base, policy_set, policy_set_assignment, policy_set_item, post, presence, presentation, printer, printer_base, printer_create_operation, printer_share, print_connector, print_document, print_job, print_operation, print_service, print_service_endpoint, print_task, print_task_definition, print_task_trigger, print_usage, print_usage_by_printer, print_usage_by_user, privileged_access, privileged_access_group, privileged_access_group_assignment_schedule, privileged_access_group_assignment_schedule_instance, privileged_access_group_assignment_schedule_request, privileged_access_group_eligibility_schedule, privileged_access_group_eligibility_schedule_instance, privileged_access_group_eligibility_schedule_request, privileged_access_root, privileged_access_schedule, privileged_access_schedule_instance, privileged_access_schedule_request, privileged_approval, privileged_operation_event, privileged_role, privileged_role_assignment, privileged_role_assignment_request, privileged_role_settings, privileged_role_summary, privileged_signup_status, privilege_management_elevation, profile, profile_card_property, profile_photo, program, program_control, program_control_type, project_participation, pronouns_settings, provider_tenant_setting, provisioning_object_summary, published_resource, purchase_invoice_line, rbac_application, rbac_application_multiple, recommendation, recommendation_base, record_operation, redundant_assignment_alert_configuration, redundant_assignment_alert_incident, reference_attachment, regional_and_language_settings, relying_party_detailed_summary, remote_action_audit, remote_assistance_partner, remote_assistance_settings, report_root, request, resource_operation, resource_specific_permission_grant, restricted_apps_violation, rich_long_running_operation, risky_service_principal, risky_service_principal_history_item, risky_user, risky_user_history_item, risk_detection, roles_assigned_outside_privileged_identity_management_alert_configuration, roles_assigned_outside_privileged_identity_management_alert_incident, role_assignment, role_definition, role_management_alert, role_scope_tag, role_scope_tag_auto_assignment, room, room_list, sales_credit_memo_line, sales_invoice_line, sales_order_line, sales_quote_line, saml_or_ws_fed_external_domain_federation, saml_or_ws_fed_provider, schedule, schedule_change_request, scheduling_group, schema, schema_extension, scoped_role_membership, search_entity, section_group, secure_score, secure_score_control_profile, security_action, security_baseline_category_state_summary, security_baseline_device_state, security_baseline_setting_state, security_baseline_state, security_baseline_state_summary, security_baseline_template, security_configuration_task, security_reports_root, sensitive_type, sensitivity_label, sensitivity_policy_settings, sequential_activation_renewals_alert_configuration, sequential_activation_renewals_alert_incident, service_announcement, service_announcement_attachment, service_announcement_base, service_health, service_health_issue, service_now_connection, service_principal, service_principal_creation_condition_set, service_principal_creation_policy, service_principal_risk_detection, service_principal_sign_in_activity, service_update_message, setting_state_device_summary, shared_drive_item, shared_email_domain, shared_email_domain_invitation, shared_insight, shared_p_c_configuration, shared_with_channel_team_info, sharepoint, sharepoint_settings, shift, shift_preferences, sign_in, simulation, simulation_automation, simulation_automation_run, single_value_legacy_extended_property, site, site_page, skill_proficiency, skype_for_business_user_conversation_member, skype_user_conversation_member, sms_authentication_method_configuration, sms_authentication_method_target, social_identity_provider, software_oath_authentication_method, software_oath_authentication_method_configuration, software_update_status_summary, stale_sign_in_alert_configuration, stale_sign_in_alert_incident, standard_web_part, start_hold_music_operation, stop_hold_music_operation, strong_authentication_detail, strong_authentication_phone_app_detail, sts_policy, subject_rights_request, subscribed_sku, subscribe_to_tone_operation, subscription, swap_shifts_change_request, symantec_code_signing_certificate, synchronization, synchronization_job, synchronization_schema, synchronization_template, targeted_managed_app_configuration, targeted_managed_app_configuration_policy_set_item, targeted_managed_app_policy_assignment, targeted_managed_app_protection, task_file_attachment, tax_group, team, teams_app, teams_app_definition, teams_app_icon, teams_app_installation, teams_app_settings, teams_async_operation, teams_tab, teams_template, teamwork, teamwork_bot, teamwork_device, teamwork_device_activity, teamwork_device_configuration, teamwork_device_health, teamwork_device_operation, teamwork_hosted_content, teamwork_peripheral, teamwork_tag, teamwork_tag_member, team_info, team_template, team_template_definition, telecom_expense_management_partner, temporary_access_pass_authentication_method, temporary_access_pass_authentication_method_configuration, tenant_app_management_policy, tenant_attach_r_b_a_c, tenant_relationship_access_policy_base, tenant_setup_info, terms_and_conditions, terms_and_conditions_acceptance_status, terms_and_conditions_assignment, terms_and_conditions_group_assignment, terms_of_use_container, text_classification_request, text_web_part, threat_assessment_request, threat_assessment_result, thumbnail_set, time_card, time_off, time_off_reason, time_off_request, ti_indicator, todo, todo_task, todo_task_list, token_issuance_policy, token_lifetime_policy, too_many_global_admins_assigned_to_tenant_alert_configuration, too_many_global_admins_assigned_to_tenant_alert_incident, trending, trusted_certificate_authority_as_entity_base, trust_framework_key_set, trust_framework_policy, unified_rbac_application, unified_rbac_resource_action, unified_rbac_resource_namespace, unified_rbac_resource_scope, unified_role_assignment, unified_role_assignment_multiple, unified_role_assignment_schedule, unified_role_assignment_schedule_instance, unified_role_assignment_schedule_request, unified_role_definition, unified_role_eligibility_schedule, unified_role_eligibility_schedule_instance, unified_role_eligibility_schedule_request, unified_role_management_alert, unified_role_management_alert_configuration, unified_role_management_alert_definition, unified_role_management_alert_incident, unified_role_management_policy, unified_role_management_policy_approval_rule, unified_role_management_policy_assignment, unified_role_management_policy_authentication_context_rule, unified_role_management_policy_enablement_rule, unified_role_management_policy_expiration_rule, unified_role_management_policy_notification_rule, unified_role_management_policy_rule, unified_role_schedule_base, unified_role_schedule_instance_base, unmanaged_device_discovery_task, unmute_participant_operation, unsupported_device_configuration, unsupported_group_policy_extension, update_recording_status_operation, url_assessment_request, usage_right, used_insight, user, user_account_information, user_activity, user_analytics, user_app_install_status, user_configuration, user_consent_request, user_credential_usage_details, user_experience_analytics_anomaly, user_experience_analytics_anomaly_correlation_group_overview, user_experience_analytics_anomaly_device, user_experience_analytics_app_health_application_performance, user_experience_analytics_app_health_app_performance_by_app_version, user_experience_analytics_app_health_app_performance_by_app_version_details, user_experience_analytics_app_health_app_performance_by_app_version_device_id, user_experience_analytics_app_health_app_performance_by_o_s_version, user_experience_analytics_app_health_device_model_performance, user_experience_analytics_app_health_device_performance, user_experience_analytics_app_health_device_performance_details, user_experience_analytics_app_health_o_s_version_performance, user_experience_analytics_baseline, user_experience_analytics_battery_health_app_impact, user_experience_analytics_battery_health_capacity_details, user_experience_analytics_battery_health_device_app_impact, user_experience_analytics_battery_health_device_performance, user_experience_analytics_battery_health_device_runtime_history, user_experience_analytics_battery_health_model_performance, user_experience_analytics_battery_health_os_performance, user_experience_analytics_battery_health_runtime_details, user_experience_analytics_category, user_experience_analytics_device_performance, user_experience_analytics_device_scope, user_experience_analytics_device_scores, user_experience_analytics_device_startup_history, user_experience_analytics_device_startup_process, user_experience_analytics_device_startup_process_performance, user_experience_analytics_device_timeline_event, user_experience_analytics_device_without_cloud_identity, user_experience_analytics_impacting_process, user_experience_analytics_metric, user_experience_analytics_metric_history, user_experience_analytics_model_scores, user_experience_analytics_not_autopilot_ready_device, user_experience_analytics_overview, user_experience_analytics_remote_connection, user_experience_analytics_resource_performance, user_experience_analytics_score_history, user_experience_analytics_work_from_anywhere_device, user_experience_analytics_work_from_anywhere_hardware_readiness_metric, user_experience_analytics_work_from_anywhere_metric, user_experience_analytics_work_from_anywhere_model_performance, user_flow_language_configuration, user_flow_language_page, user_insights_settings, user_install_state_summary, user_p_f_x_certificate, user_registration_details, user_scope_teams_app_installation, user_security_profile, user_settings, user_sign_in_insight, user_teamwork, vertical_section, virtual_appointment, virtual_endpoint, virtual_event, virtual_events_root, virtual_event_presenter, virtual_event_registrant, virtual_event_registration, virtual_event_registration_question, virtual_event_session, virtual_event_webinar, voice_authentication_method_configuration, voice_authentication_method_target, vpn_configuration, vpp_token, vulnerable_managed_device, web_account, web_app, web_application_segment, web_part, win32_lob_app, windows10_certificate_profile_base, windows10_compliance_policy, windows10_custom_configuration, windows10_device_firmware_configuration_interface, windows10_eas_email_profile_configuration, windows10_endpoint_protection_configuration, windows10_enrollment_completion_page_configuration, windows10_enrollment_completion_page_configuration_policy_set_item, windows10_enterprise_modern_app_management_configuration, windows10_general_configuration, windows10_imported_p_f_x_certificate_profile, windows10_mobile_compliance_policy, windows10_network_boundary_configuration, windows10_pkcs_certificate_profile, windows10_p_f_x_import_certificate_profile, windows10_secure_assessment_configuration, windows10_team_general_configuration, windows10_vpn_configuration, windows10_x_certificate_profile, windows10_x_s_c_e_p_certificate_profile, windows10_x_trusted_root_certificate, windows10_x_vpn_configuration, windows10_x_wifi_configuration, windows81_certificate_profile_base, windows81_compliance_policy, windows81_general_configuration, windows81_s_c_e_p_certificate_profile, windows81_trusted_root_certificate, windows81_vpn_configuration, windows81_wifi_import_configuration, windows_app_x, windows_assigned_access_profile, windows_autopilot_deployment_profile, windows_autopilot_deployment_profile_assignment, windows_autopilot_deployment_profile_policy_set_item, windows_autopilot_device_identity, windows_autopilot_settings, windows_certificate_profile_base, windows_defender_advanced_threat_protection_configuration, windows_defender_application_control_supplemental_policy, windows_defender_application_control_supplemental_policy_assignment, windows_defender_application_control_supplemental_policy_deployment_status, windows_defender_application_control_supplemental_policy_deployment_summary, windows_delivery_optimization_configuration, windows_device_malware_state, windows_domain_join_configuration, windows_driver_update_inventory, windows_driver_update_profile, windows_driver_update_profile_assignment, windows_feature_update_catalog_item, windows_feature_update_profile, windows_feature_update_profile_assignment, windows_health_monitoring_configuration, windows_hello_for_business_authentication_method, windows_identity_protection_configuration, windows_information_protection, windows_information_protection_app_learning_summary, windows_information_protection_app_locker_file, windows_information_protection_device_registration, windows_information_protection_network_learning_summary, windows_information_protection_policy, windows_information_protection_wipe_action, windows_kiosk_configuration, windows_malware_information, windows_managed_app_protection, windows_managed_device, windows_management_app, windows_management_app_health_state, windows_management_app_health_summary, windows_microsoft_edge_app, windows_mobile_m_s_i, windows_phone81_app_x, windows_phone81_app_x_bundle, windows_phone81_certificate_profile_base, windows_phone81_compliance_policy, windows_phone81_custom_configuration, windows_phone81_general_configuration, windows_phone81_imported_p_f_x_certificate_profile, windows_phone81_store_app, windows_phone81_s_c_e_p_certificate_profile, windows_phone81_trusted_root_certificate, windows_phone81_vpn_configuration, windows_phone_e_a_s_email_profile_configuration, windows_phone_x_a_p, windows_privacy_data_access_control_item, windows_protection_state, windows_quality_update_catalog_item, windows_quality_update_profile, windows_quality_update_profile_assignment, windows_store_app, windows_universal_app_x, windows_universal_app_x_contained_app, windows_update_catalog_item, windows_update_for_business_configuration, windows_update_state, windows_vpn_configuration, windows_web_app, windows_wifi_configuration, windows_wifi_enterprise_e_a_p_configuration, windows_wired_network_configuration, win_get_app, workbook, workbook_application, workbook_chart, workbook_chart_area_format, workbook_chart_axes, workbook_chart_axis, workbook_chart_axis_format, workbook_chart_axis_title, workbook_chart_axis_title_format, workbook_chart_data_labels, workbook_chart_data_label_format, workbook_chart_fill, workbook_chart_font, workbook_chart_gridlines, workbook_chart_gridlines_format, workbook_chart_legend, workbook_chart_legend_format, workbook_chart_line_format, workbook_chart_point, workbook_chart_point_format, workbook_chart_series, workbook_chart_series_format, workbook_chart_title, workbook_chart_title_format, workbook_comment, workbook_comment_reply, workbook_filter, workbook_format_protection, workbook_functions, workbook_function_result, workbook_named_item, workbook_operation, workbook_pivot_table, workbook_range, workbook_range_border, workbook_range_fill, workbook_range_font, workbook_range_format, workbook_range_sort, workbook_range_view, workbook_table, workbook_table_column, workbook_table_row, workbook_table_sort, workbook_worksheet, workbook_worksheet_protection, workforce_integration, workspace, work_position, x509_certificate_authentication_method_configuration, zebra_fota_artifact, zebra_fota_connector, zebra_fota_deployment
        from .call_records import call_record, segment, session
        from .device_management import alert_record, alert_rule, device_management, monitoring
        from .ediscovery import add_to_review_set_operation, case, case_export_operation, case_hold_operation, case_index_operation, case_operation, case_settings, custodian, data_source, data_source_container, ediscoveryroot, estimate_statistics_operation, legal_hold, noncustodial_data_source, purge_data_operation, review_set, review_set_query, site_source, source_collection, tag, tag_operation, unified_group_source, user_source
        from .external_connectors import connection_operation, connection_quota, external_activity, external_activity_result, external_connection, external_group, external_item, identity, schema
        from .identity_governance import custom_task_extension, lifecycle_management_settings, lifecycle_workflows_container, run, task, task_definition, task_processing_result, task_report, user_processing_result, workflow_template
        from .industry_data import azure_data_lake_connector, file_data_connector, file_validate_operation, inbound_file_flow, inbound_flow, inbound_flow_activity, industry_data_activity, industry_data_connector, industry_data_root, industry_data_run, industry_data_run_activity, outbound_flow_activity, reference_definition, role_group, source_system_definition, validate_operation, year_time_period_definition
        from .managed_tenants import aggregated_policy_compliance, app_performance, audit_event, cloud_pc_connection, cloud_pc_device, cloud_pc_overview, conditional_access_policy_coverage, credential_user_registrations_summary, device_app_performance, device_compliance_policy_setting_state_summary, device_health_status, managed_device_compliance, managed_device_compliance_trend, managed_tenant, managed_tenant_alert, managed_tenant_alert_log, managed_tenant_alert_rule, managed_tenant_alert_rule_definition, managed_tenant_api_notification, managed_tenant_email_notification, managed_tenant_ticketing_endpoint, management_action, management_action_tenant_deployment_status, management_intent, management_template, management_template_collection, management_template_collection_tenant_summary, management_template_step, management_template_step_deployment, management_template_step_tenant_summary, management_template_step_version, tenant, tenant_customized_information, tenant_detailed_information, tenant_group, tenant_tag, windows_device_malware_state, windows_protection_state
        from .networkaccess import branch_site, conditional_access_policy, conditional_access_settings, connectivity, cross_tenant_access_settings, device_link, enriched_audit_logs, forwarding_options, forwarding_policy, forwarding_policy_link, forwarding_profile, forwarding_rule, logs, m365_forwarding_rule, network_access_root, policy, policy_link, policy_rule, private_access_forwarding_rule, profile, reports, settings, tenant_status
        from .search import acronym, bookmark, qna, search_answer
        from .security import alert, article, article_indicator, artifact, case, cases_root, case_operation, data_set, data_source, data_source_container, disposition_review_stage, ediscovery_add_to_review_set_operation, ediscovery_case, ediscovery_case_settings, ediscovery_custodian, ediscovery_estimate_operation, ediscovery_export_operation, ediscovery_file, ediscovery_hold_operation, ediscovery_hold_policy, ediscovery_index_operation, ediscovery_noncustodial_data_source, ediscovery_purge_data_operation, ediscovery_review_set, ediscovery_review_set_query, ediscovery_review_tag, ediscovery_search, ediscovery_tag_operation, email_content_threat_submission, email_threat_submission, email_threat_submission_policy, email_url_threat_submission, file, file_content_threat_submission, file_threat_submission, file_url_threat_submission, host, hostname, host_component, host_cookie, host_reputation, host_tracker, incident, indicator, information_protection, information_protection_policy_setting, intelligence_profile, intelligence_profile_indicator, ip_address, labels_root, passive_dns_record, policy_base, retention_event, retention_event_type, retention_label, search, security, sensitivity_label, site_source, tag, threat_intelligence, threat_submission, threat_submission_root, triggers_root, trigger_types_root, unclassified_artifact, unified_group_source, url_threat_submission, user_source, vulnerability, vulnerability_component
        from .term_store import group, relation, set, store, term
        from .windows_updates import azure_a_d_device, catalog, catalog_entry, compliance_change, content_approval, deployment, deployment_audience, driver_update_catalog_entry, feature_update_catalog_entry, operational_insights_connection, quality_update_catalog_entry, resource_connection, software_update_catalog_entry, updatable_asset, updatable_asset_group, update_policy

        from . import aad_user_conversation_member, access_package, access_package_assignment, access_package_assignment_policy, access_package_assignment_request, access_package_assignment_request_workflow_extension, access_package_assignment_resource_role, access_package_assignment_workflow_extension, access_package_catalog, access_package_resource, access_package_resource_environment, access_package_resource_request, access_package_resource_role, access_package_resource_role_scope, access_package_resource_scope, access_package_subject, access_review, access_review_decision, access_review_history_definition, access_review_history_instance, access_review_instance, access_review_instance_decision_item, access_review_policy, access_review_reviewer, access_review_schedule_definition, access_review_set, access_review_stage, active_directory_windows_autopilot_deployment_profile, activity_based_timeout_policy, activity_history_item, activity_statistics, add_large_gallery_view_operation, administrative_unit, admin_consent_request_policy, admin_report_settings, admin_windows, admin_windows_updates, advanced_threat_protection_onboarding_device_setting_state, advanced_threat_protection_onboarding_state_summary, agreement, agreement_acceptance, agreement_file, agreement_file_localization, agreement_file_properties, agreement_file_version, alert, allowed_data_location, allowed_value, android_certificate_profile_base, android_compliance_policy, android_custom_configuration, android_device_compliance_local_action_base, android_device_compliance_local_action_lock_device, android_device_compliance_local_action_lock_device_with_passcode, android_device_owner_certificate_profile_base, android_device_owner_compliance_policy, android_device_owner_derived_credential_authentication_configuration, android_device_owner_enrollment_profile, android_device_owner_enterprise_wi_fi_configuration, android_device_owner_general_device_configuration, android_device_owner_imported_p_f_x_certificate_profile, android_device_owner_pkcs_certificate_profile, android_device_owner_scep_certificate_profile, android_device_owner_trusted_root_certificate, android_device_owner_vpn_configuration, android_device_owner_wi_fi_configuration, android_eas_email_profile_configuration, android_enterprise_wi_fi_configuration, android_for_work_app, android_for_work_app_configuration_schema, android_for_work_certificate_profile_base, android_for_work_compliance_policy, android_for_work_custom_configuration, android_for_work_eas_email_profile_base, android_for_work_enrollment_profile, android_for_work_enterprise_wi_fi_configuration, android_for_work_general_device_configuration, android_for_work_gmail_eas_configuration, android_for_work_imported_p_f_x_certificate_profile, android_for_work_mobile_app_configuration, android_for_work_nine_work_eas_configuration, android_for_work_pkcs_certificate_profile, android_for_work_scep_certificate_profile, android_for_work_settings, android_for_work_trusted_root_certificate, android_for_work_vpn_configuration, android_for_work_wi_fi_configuration, android_general_device_configuration, android_imported_p_f_x_certificate_profile, android_lob_app, android_managed_app_protection, android_managed_app_registration, android_managed_store_account_enterprise_settings, android_managed_store_app, android_managed_store_app_configuration, android_managed_store_app_configuration_schema, android_managed_store_web_app, android_oma_cp_configuration, android_pkcs_certificate_profile, android_scep_certificate_profile, android_store_app, android_trusted_root_certificate, android_vpn_configuration, android_wi_fi_configuration, android_work_profile_certificate_profile_base, android_work_profile_compliance_policy, android_work_profile_custom_configuration, android_work_profile_eas_email_profile_base, android_work_profile_enterprise_wi_fi_configuration, android_work_profile_general_device_configuration, android_work_profile_gmail_eas_configuration, android_work_profile_nine_work_eas_configuration, android_work_profile_pkcs_certificate_profile, android_work_profile_scep_certificate_profile, android_work_profile_trusted_root_certificate, android_work_profile_vpn_configuration, android_work_profile_wi_fi_configuration, anonymous_guest_conversation_member, aosp_device_owner_certificate_profile_base, aosp_device_owner_compliance_policy, aosp_device_owner_device_configuration, aosp_device_owner_enterprise_wi_fi_configuration, aosp_device_owner_pkcs_certificate_profile, aosp_device_owner_scep_certificate_profile, aosp_device_owner_trusted_root_certificate, aosp_device_owner_wi_fi_configuration, apple_device_features_configuration_base, apple_enrollment_profile_assignment, apple_expedited_checkin_configuration_base, apple_managed_identity_provider, apple_push_notification_certificate, apple_user_initiated_enrollment_profile, apple_vpn_configuration, apple_vpp_token_troubleshooting_event, application, application_segment, application_sign_in_detailed_summary, application_sign_in_summary, application_template, approval, approval_step, approval_workflow_provider, app_consent_approval_route, app_consent_request, app_credential_sign_in_activity, app_log_collection_request, app_management_policy, app_role_assignment, app_scope, app_vulnerability_managed_device, app_vulnerability_mobile_app, app_vulnerability_task, assignment_filter_evaluation_status_details, associated_team_info, attachment, attachment_base, attachment_session, attack_simulation_operation, attack_simulation_root, attendance_record, attribute_mapping_function_schema, attribute_set, audio_routing_group, audit_event, authentication, authentication_combination_configuration, authentication_context_class_reference, authentication_events_flow, authentication_events_policy, authentication_event_listener, authentication_flows_policy, authentication_listener, authentication_method, authentication_methods_policy, authentication_methods_root, authentication_method_configuration, authentication_method_mode_detail, authentication_method_target, authentication_strength_policy, authentication_strength_root, authored_note, authorization_policy, azure_a_d_windows_autopilot_deployment_profile, azure_communication_services_user_conversation_member, b2c_authentication_methods_policy, b2c_identity_user_flow, b2x_identity_user_flow, base_item, base_item_version, bitlocker, bitlocker_recovery_key, booking_appointment, booking_business, booking_currency, booking_customer, booking_custom_question, booking_named_entity, booking_person, booking_service, booking_staff_member, browser_shared_cookie, browser_site, browser_site_list, built_in_identity_provider, business_flow, business_flow_template, business_scenario, business_scenario_planner, business_scenario_plan_reference, business_scenario_task, calendar, calendar_group, calendar_permission, calendar_sharing_message, call, call_activity_statistics, call_recording, call_transcript, cancel_media_processing_operation, canvas_layout, cart_to_class_association, certificate_authority_as_entity, certificate_authority_path, certificate_based_application_configuration, certificate_based_auth_configuration, certificate_connector_details, change_tracked_entity, channel, chat, chat_activity_statistics, chat_message, chat_message_hosted_content, chat_message_info, checklist_item, chrome_o_s_onboarding_settings, claims_mapping_policy, classification_job_response, cloud_app_security_profile, cloud_pc_audit_event, cloud_pc_bulk_action, cloud_pc_bulk_power_off, cloud_pc_bulk_power_on, cloud_pc_cross_cloud_government_organization_mapping, cloud_pc_device_image, cloud_pc_export_job, cloud_pc_external_partner_setting, cloud_pc_gallery_image, cloud_pc_on_premises_connection, cloud_pc_organization_settings, cloud_pc_provisioning_policy, cloud_pc_provisioning_policy_assignment, cloud_pc_reports, cloud_pc_service_plan, cloud_pc_shared_use_service_plan, cloud_pc_snapshot, cloud_pc_supported_region, cloud_pc_user_setting, cloud_pc_user_setting_assignment, cloud_p_c, cloud_p_c_connectivity_issue, column_definition, column_link, comanagement_eligible_device, command, comms_operation, company_subscription, compliance_management_partner, conditional_access_policy, conditional_access_root, conditional_access_template, config_manager_collection, connected_organization, connection_operation, connector, connector_group, contact, contact_folder, contact_merge_suggestions, content_sharing_session, content_type, continuous_access_evaluation_policy, contract, conversation, conversation_member, conversation_thread, cors_configuration_v2, country_named_location, credential_usage_summary, credential_user_registration_count, credential_user_registration_details, cross_tenant_access_policy, cross_tenant_access_policy_configuration_default, custom_access_package_workflow_extension, custom_app_scope, custom_authentication_extension, custom_callout_extension, custom_extension_handler, custom_extension_stage_setting, custom_security_attribute_definition, data_classification_service, data_loss_prevention_policy, data_policy_operation, data_sharing_consent, default_device_compliance_policy, default_managed_app_protection, default_user_role_override, delegated_admin_access_assignment, delegated_admin_customer, delegated_admin_relationship, delegated_admin_relationship_operation, delegated_admin_relationship_request, delegated_admin_service_management_detail, delegated_permission_classification, deleted_item_container, deleted_team, delta_participants, dep_enrollment_base_profile, dep_enrollment_profile, dep_i_o_s_enrollment_profile, dep_mac_o_s_enrollment_profile, dep_onboarding_setting, detected_app, device, device_and_app_management_assignment_filter, device_and_app_management_role_assignment, device_and_app_management_role_definition, device_app_management, device_app_management_task, device_category, device_comanagement_authority_configuration, device_compliance_action_item, device_compliance_device_overview, device_compliance_device_status, device_compliance_policy, device_compliance_policy_assignment, device_compliance_policy_device_state_summary, device_compliance_policy_group_assignment, device_compliance_policy_policy_set_item, device_compliance_policy_setting_state_summary, device_compliance_policy_state, device_compliance_scheduled_action_for_rule, device_compliance_script, device_compliance_script_device_state, device_compliance_script_run_summary, device_compliance_setting_state, device_compliance_user_overview, device_compliance_user_status, device_configuration, device_configuration_assignment, device_configuration_conflict_summary, device_configuration_device_overview, device_configuration_device_state_summary, device_configuration_device_status, device_configuration_group_assignment, device_configuration_policy_set_item, device_configuration_state, device_configuration_user_overview, device_configuration_user_state_summary, device_configuration_user_status, device_custom_attribute_shell_script, device_enrollment_configuration, device_enrollment_limit_configuration, device_enrollment_notification_configuration, device_enrollment_platform_restrictions_configuration, device_enrollment_platform_restriction_configuration, device_enrollment_windows_hello_for_business_configuration, device_health_script, device_health_script_assignment, device_health_script_device_state, device_health_script_run_summary, device_install_state, device_local_credential_info, device_log_collection_response, device_management_abstract_complex_setting_definition, device_management_abstract_complex_setting_instance, device_management_autopilot_event, device_management_autopilot_policy_status_detail, device_management_boolean_setting_instance, device_management_cached_report_configuration, device_management_collection_setting_definition, device_management_collection_setting_instance, device_management_complex_setting_definition, device_management_complex_setting_instance, device_management_compliance_action_item, device_management_compliance_policy, device_management_compliance_scheduled_action_for_rule, device_management_configuration_category, device_management_configuration_choice_setting_collection_definition, device_management_configuration_choice_setting_definition, device_management_configuration_policy, device_management_configuration_policy_assignment, device_management_configuration_policy_policy_set_item, device_management_configuration_policy_template, device_management_configuration_redirect_setting_definition, device_management_configuration_setting, device_management_configuration_setting_definition, device_management_configuration_setting_group_collection_definition, device_management_configuration_setting_group_definition, device_management_configuration_setting_template, device_management_configuration_simple_setting_collection_definition, device_management_configuration_simple_setting_definition, device_management_derived_credential_settings, device_management_domain_join_connector, device_management_exchange_connector, device_management_exchange_on_premises_policy, device_management_export_job, device_management_integer_setting_instance, device_management_intent, device_management_intent_assignment, device_management_intent_device_setting_state_summary, device_management_intent_device_state, device_management_intent_device_state_summary, device_management_intent_setting_category, device_management_intent_user_state, device_management_intent_user_state_summary, device_management_partner, device_management_reports, device_management_resource_access_profile_assignment, device_management_resource_access_profile_base, device_management_reusable_policy_setting, device_management_script, device_management_script_assignment, device_management_script_device_state, device_management_script_group_assignment, device_management_script_policy_set_item, device_management_script_run_summary, device_management_script_user_state, device_management_setting_category, device_management_setting_definition, device_management_setting_instance, device_management_string_setting_instance, device_management_template, device_management_template_insights_definition, device_management_template_setting_category, device_management_troubleshooting_event, device_registration_policy, device_setup_configuration, device_shell_script, directory, directory_audit, directory_definition, directory_object, directory_object_partner_reference, directory_role, directory_role_access_review_policy, directory_role_template, directory_setting, directory_setting_template, dlp_evaluate_policies_job_response, document, document_comment, document_comment_reply, document_set_version, domain, domain_dns_cname_record, domain_dns_mx_record, domain_dns_record, domain_dns_srv_record, domain_dns_txt_record, domain_dns_unavailable_record, domain_security_profile, drive, drive_item, drive_item_version, eas_email_profile_configuration_base, edge, edition_upgrade_configuration, educational_activity, education_assignment, education_assignment_defaults, education_assignment_resource, education_assignment_settings, education_category, education_class, education_feedback_outcome, education_feedback_resource_outcome, education_grading_category, education_organization, education_outcome, education_points_outcome, education_rubric, education_rubric_outcome, education_school, education_submission, education_submission_resource, education_synchronization_error, education_synchronization_profile, education_synchronization_profile_status, education_user, email_activity_statistics, email_authentication_method, email_authentication_method_configuration, email_file_assessment_request, embedded_s_i_m_activation_code_pool, embedded_s_i_m_activation_code_pool_assignment, embedded_s_i_m_device_state, employee_experience_user, endpoint, enrollment_configuration_assignment, enrollment_profile, enrollment_restrictions_configuration_policy_set_item, enrollment_troubleshooting_event, enterprise_code_signing_certificate, entitlement_management, entitlement_management_settings, evaluate_label_job_response, event, event_message, event_message_request, event_message_response, exact_match_data_store, exact_match_data_store_base, exact_match_job_base, exact_match_lookup_job, exact_match_session, exact_match_session_base, exact_match_upload_agent, extension, extension_property, external, external_connection, external_domain_name, external_group, external_identities_policy, external_item, external_meeting_registrant, external_meeting_registration, external_users_self_service_sign_up_events_flow, e_book_install_summary, feature_rollout_policy, federated_identity_credential, fido2_authentication_method, fido2_authentication_method_configuration, fido2_combination_configuration, field_value_set, file_assessment_request, file_attachment, file_classification_request, file_security_profile, filter_operator_schema, focus_activity_statistics, governance_insight, governance_policy_template, governance_resource, governance_role_assignment, governance_role_assignment_request, governance_role_definition, governance_role_setting, governance_subject, group, group_lifecycle_policy, group_policy_category, group_policy_configuration, group_policy_configuration_assignment, group_policy_definition, group_policy_definition_file, group_policy_definition_value, group_policy_migration_report, group_policy_object_file, group_policy_operation, group_policy_presentation, group_policy_presentation_check_box, group_policy_presentation_combo_box, group_policy_presentation_decimal_text_box, group_policy_presentation_dropdown_list, group_policy_presentation_list_box, group_policy_presentation_long_decimal_text_box, group_policy_presentation_multi_text_box, group_policy_presentation_text, group_policy_presentation_text_box, group_policy_presentation_value, group_policy_presentation_value_boolean, group_policy_presentation_value_decimal, group_policy_presentation_value_list, group_policy_presentation_value_long_decimal, group_policy_presentation_value_multi_text, group_policy_presentation_value_text, group_policy_setting_mapping, group_policy_uploaded_definition_file, group_policy_uploaded_presentation, home_realm_discovery_policy, horizontal_section, horizontal_section_column, host_security_profile, identity_api_connector, identity_built_in_user_flow_attribute, identity_custom_user_flow_attribute, identity_provider, identity_provider_base, identity_security_defaults_enforcement_policy, identity_user_flow, identity_user_flow_attribute, identity_user_flow_attribute_assignment, impacted_resource, imported_apple_device_identity, imported_apple_device_identity_result, imported_device_identity, imported_device_identity_result, imported_windows_autopilot_device_identity, imported_windows_autopilot_device_identity_upload, inference_classification, inference_classification_override, information_protection, information_protection_label, information_protection_policy, insights_settings, internal_domain_federation, internet_explorer_mode, intune_branding_profile, intune_branding_profile_assignment, invalid_license_alert_configuration, invalid_license_alert_incident, invitation, invite_participants_operation, invoke_user_flow_listener, iosik_ev2_vpn_configuration, iosi_pad_o_s_web_clip, ios_certificate_profile, ios_certificate_profile_base, ios_compliance_policy, ios_custom_configuration, ios_derived_credential_authentication_configuration, ios_device_features_configuration, ios_eas_email_profile_configuration, ios_education_device_configuration, ios_edu_device_configuration, ios_enterprise_wi_fi_configuration, ios_expedited_checkin_configuration, ios_general_device_configuration, ios_imported_p_f_x_certificate_profile, ios_lob_app, ios_lob_app_provisioning_configuration, ios_lob_app_provisioning_configuration_assignment, ios_lob_app_provisioning_configuration_policy_set_item, ios_managed_app_protection, ios_managed_app_registration, ios_mobile_app_configuration, ios_pkcs_certificate_profile, ios_scep_certificate_profile, ios_store_app, ios_trusted_root_certificate, ios_update_configuration, ios_update_device_status, ios_vpn_configuration, ios_vpp_app, ios_vpp_app_assigned_device_license, ios_vpp_app_assigned_license, ios_vpp_app_assigned_user_license, ios_vpp_e_book, ios_vpp_e_book_assignment, ios_wi_fi_configuration, ip_application_segment, ip_named_location, ip_security_profile, item_activity, item_activity_o_l_d, item_activity_stat, item_address, item_analytics, item_attachment, item_email, item_facet, item_insights, item_patent, item_phone, item_publication, item_retention_label, job_response_base, language_proficiency, learning_assignment, learning_content, learning_course_activity, learning_provider, learning_self_initiated_course, license_details, linked_resource, list, list_item, list_item_version, localized_notification_message, long_running_operation, lookup_result_row, mac_os_vpp_app, mac_os_vpp_app_assigned_license, mac_o_s_certificate_profile_base, mac_o_s_compliance_policy, mac_o_s_custom_app_configuration, mac_o_s_custom_configuration, mac_o_s_device_features_configuration, mac_o_s_dmg_app, mac_o_s_endpoint_protection_configuration, mac_o_s_enterprise_wi_fi_configuration, mac_o_s_extensions_configuration, mac_o_s_general_device_configuration, mac_o_s_imported_p_f_x_certificate_profile, mac_o_s_lob_app, mac_o_s_mdatp_app, mac_o_s_microsoft_defender_app, mac_o_s_microsoft_edge_app, mac_o_s_office_suite_app, mac_o_s_pkcs_certificate_profile, mac_o_s_pkg_app, mac_o_s_scep_certificate_profile, mac_o_s_software_update_account_summary, mac_o_s_software_update_category_summary, mac_o_s_software_update_configuration, mac_o_s_software_update_state_summary, mac_o_s_trusted_root_certificate, mac_o_s_vpn_configuration, mac_o_s_wired_network_configuration, mac_o_s_wi_fi_configuration, mail_assessment_request, mail_folder, mail_search_folder, malware_state_for_windows_device, managed_all_device_certificate_state, managed_android_lob_app, managed_android_store_app, managed_app, managed_app_configuration, managed_app_operation, managed_app_policy, managed_app_policy_deployment_summary, managed_app_protection, managed_app_protection_policy_set_item, managed_app_registration, managed_app_status, managed_app_status_raw, managed_device, managed_device_certificate_state, managed_device_encryption_state, managed_device_mobile_app_configuration, managed_device_mobile_app_configuration_assignment, managed_device_mobile_app_configuration_device_status, managed_device_mobile_app_configuration_device_summary, managed_device_mobile_app_configuration_policy_set_item, managed_device_mobile_app_configuration_state, managed_device_mobile_app_configuration_user_status, managed_device_mobile_app_configuration_user_summary, managed_device_overview, managed_e_book, managed_e_book_assignment, managed_e_book_category, managed_i_o_s_lob_app, managed_i_o_s_store_app, managed_mobile_app, managed_mobile_lob_app, mdm_windows_information_protection_policy, mdm_windows_information_protection_policy_policy_set_item, meeting_activity_statistics, meeting_attendance_report, meeting_registrant, meeting_registrant_base, meeting_registration, meeting_registration_base, meeting_registration_question, membership_outlier_insight, mention, message, message_event, message_recipient, message_rule, message_trace, microsoft_account_user_conversation_member, microsoft_application_data_access_settings, microsoft_authenticator_authentication_method, microsoft_authenticator_authentication_method_configuration, microsoft_authenticator_authentication_method_target, microsoft_store_for_business_app, microsoft_store_for_business_contained_app, microsoft_tunnel_configuration, microsoft_tunnel_health_threshold, microsoft_tunnel_server, microsoft_tunnel_server_log_collection_response, microsoft_tunnel_site, mobile_app, mobile_app_assignment, mobile_app_category, mobile_app_content, mobile_app_content_file, mobile_app_dependency, mobile_app_install_status, mobile_app_install_summary, mobile_app_intent_and_state, mobile_app_policy_set_item, mobile_app_provisioning_config_group_assignment, mobile_app_relationship, mobile_app_supersedence, mobile_app_troubleshooting_event, mobile_contained_app, mobile_lob_app, mobile_threat_defense_connector, mobility_management_policy, multi_value_legacy_extended_property, mute_participants_operation, mute_participant_operation, named_location, ndes_connector, note, notebook, notification, notification_message_template, no_mfa_on_role_activation_alert_configuration, no_mfa_on_role_activation_alert_incident, offer_shift_request, office365_active_user_counts, office365_active_user_detail, office365_groups_activity_counts, office365_groups_activity_detail, office365_groups_activity_file_counts, office365_groups_activity_group_counts, office365_groups_activity_storage, office365_services_user_counts, office_graph_insights, office_suite_app, onenote, onenote_entity_base_model, onenote_entity_hierarchy_model, onenote_entity_schema_object_model, onenote_operation, onenote_page, onenote_resource, onenote_section, online_meeting, on_attribute_collection_listener, on_authentication_method_load_start_listener, on_interactive_auth_flow_start_listener, on_premises_agent, on_premises_agent_group, on_premises_conditional_access_settings, on_premises_directory_synchronization, on_premises_publishing_profile, on_token_issuance_start_custom_extension, on_token_issuance_start_listener, on_user_create_start_listener, open_id_connect_identity_provider, open_id_connect_provider, open_shift, open_shift_change_request, open_type_extension, operation, organization, organizational_branding, organizational_branding_localization, organizational_branding_properties, organization_settings, org_contact, outlook_category, outlook_item, outlook_task, outlook_task_folder, outlook_task_group, outlook_user, o_auth2_permission_grant, participant, participant_joining_notification, participant_left_notification, passwordless_microsoft_authenticator_authentication_method, password_authentication_method, payload, payload_compatible_assignment_filter, payload_response, permission, permission_grant_condition_set, permission_grant_policy, person, person_annotation, person_annual_event, person_award, person_certification, person_extension, person_interest, person_name, person_responsibility, person_website, phone_authentication_method, pinned_chat_message_info, place, planner, planner_assigned_to_task_board_task_format, planner_bucket, planner_bucket_task_board_task_format, planner_delta, planner_group, planner_plan, planner_plan_configuration, planner_plan_configuration_localization, planner_plan_details, planner_progress_task_board_task_format, planner_roster, planner_roster_member, planner_task, planner_task_configuration, planner_task_details, planner_user, play_prompt_operation, policy_base, policy_set, policy_set_assignment, policy_set_item, post, presence, presentation, printer, printer_base, printer_create_operation, printer_share, print_connector, print_document, print_job, print_operation, print_service, print_service_endpoint, print_task, print_task_definition, print_task_trigger, print_usage, print_usage_by_printer, print_usage_by_user, privileged_access, privileged_access_group, privileged_access_group_assignment_schedule, privileged_access_group_assignment_schedule_instance, privileged_access_group_assignment_schedule_request, privileged_access_group_eligibility_schedule, privileged_access_group_eligibility_schedule_instance, privileged_access_group_eligibility_schedule_request, privileged_access_root, privileged_access_schedule, privileged_access_schedule_instance, privileged_access_schedule_request, privileged_approval, privileged_operation_event, privileged_role, privileged_role_assignment, privileged_role_assignment_request, privileged_role_settings, privileged_role_summary, privileged_signup_status, privilege_management_elevation, profile, profile_card_property, profile_photo, program, program_control, program_control_type, project_participation, pronouns_settings, provider_tenant_setting, provisioning_object_summary, published_resource, purchase_invoice_line, rbac_application, rbac_application_multiple, recommendation, recommendation_base, record_operation, redundant_assignment_alert_configuration, redundant_assignment_alert_incident, reference_attachment, regional_and_language_settings, relying_party_detailed_summary, remote_action_audit, remote_assistance_partner, remote_assistance_settings, report_root, request, resource_operation, resource_specific_permission_grant, restricted_apps_violation, rich_long_running_operation, risky_service_principal, risky_service_principal_history_item, risky_user, risky_user_history_item, risk_detection, roles_assigned_outside_privileged_identity_management_alert_configuration, roles_assigned_outside_privileged_identity_management_alert_incident, role_assignment, role_definition, role_management_alert, role_scope_tag, role_scope_tag_auto_assignment, room, room_list, sales_credit_memo_line, sales_invoice_line, sales_order_line, sales_quote_line, saml_or_ws_fed_external_domain_federation, saml_or_ws_fed_provider, schedule, schedule_change_request, scheduling_group, schema, schema_extension, scoped_role_membership, search_entity, section_group, secure_score, secure_score_control_profile, security_action, security_baseline_category_state_summary, security_baseline_device_state, security_baseline_setting_state, security_baseline_state, security_baseline_state_summary, security_baseline_template, security_configuration_task, security_reports_root, sensitive_type, sensitivity_label, sensitivity_policy_settings, sequential_activation_renewals_alert_configuration, sequential_activation_renewals_alert_incident, service_announcement, service_announcement_attachment, service_announcement_base, service_health, service_health_issue, service_now_connection, service_principal, service_principal_creation_condition_set, service_principal_creation_policy, service_principal_risk_detection, service_principal_sign_in_activity, service_update_message, setting_state_device_summary, shared_drive_item, shared_email_domain, shared_email_domain_invitation, shared_insight, shared_p_c_configuration, shared_with_channel_team_info, sharepoint, sharepoint_settings, shift, shift_preferences, sign_in, simulation, simulation_automation, simulation_automation_run, single_value_legacy_extended_property, site, site_page, skill_proficiency, skype_for_business_user_conversation_member, skype_user_conversation_member, sms_authentication_method_configuration, sms_authentication_method_target, social_identity_provider, software_oath_authentication_method, software_oath_authentication_method_configuration, software_update_status_summary, stale_sign_in_alert_configuration, stale_sign_in_alert_incident, standard_web_part, start_hold_music_operation, stop_hold_music_operation, strong_authentication_detail, strong_authentication_phone_app_detail, sts_policy, subject_rights_request, subscribed_sku, subscribe_to_tone_operation, subscription, swap_shifts_change_request, symantec_code_signing_certificate, synchronization, synchronization_job, synchronization_schema, synchronization_template, targeted_managed_app_configuration, targeted_managed_app_configuration_policy_set_item, targeted_managed_app_policy_assignment, targeted_managed_app_protection, task_file_attachment, tax_group, team, teams_app, teams_app_definition, teams_app_icon, teams_app_installation, teams_app_settings, teams_async_operation, teams_tab, teams_template, teamwork, teamwork_bot, teamwork_device, teamwork_device_activity, teamwork_device_configuration, teamwork_device_health, teamwork_device_operation, teamwork_hosted_content, teamwork_peripheral, teamwork_tag, teamwork_tag_member, team_info, team_template, team_template_definition, telecom_expense_management_partner, temporary_access_pass_authentication_method, temporary_access_pass_authentication_method_configuration, tenant_app_management_policy, tenant_attach_r_b_a_c, tenant_relationship_access_policy_base, tenant_setup_info, terms_and_conditions, terms_and_conditions_acceptance_status, terms_and_conditions_assignment, terms_and_conditions_group_assignment, terms_of_use_container, text_classification_request, text_web_part, threat_assessment_request, threat_assessment_result, thumbnail_set, time_card, time_off, time_off_reason, time_off_request, ti_indicator, todo, todo_task, todo_task_list, token_issuance_policy, token_lifetime_policy, too_many_global_admins_assigned_to_tenant_alert_configuration, too_many_global_admins_assigned_to_tenant_alert_incident, trending, trusted_certificate_authority_as_entity_base, trust_framework_key_set, trust_framework_policy, unified_rbac_application, unified_rbac_resource_action, unified_rbac_resource_namespace, unified_rbac_resource_scope, unified_role_assignment, unified_role_assignment_multiple, unified_role_assignment_schedule, unified_role_assignment_schedule_instance, unified_role_assignment_schedule_request, unified_role_definition, unified_role_eligibility_schedule, unified_role_eligibility_schedule_instance, unified_role_eligibility_schedule_request, unified_role_management_alert, unified_role_management_alert_configuration, unified_role_management_alert_definition, unified_role_management_alert_incident, unified_role_management_policy, unified_role_management_policy_approval_rule, unified_role_management_policy_assignment, unified_role_management_policy_authentication_context_rule, unified_role_management_policy_enablement_rule, unified_role_management_policy_expiration_rule, unified_role_management_policy_notification_rule, unified_role_management_policy_rule, unified_role_schedule_base, unified_role_schedule_instance_base, unmanaged_device_discovery_task, unmute_participant_operation, unsupported_device_configuration, unsupported_group_policy_extension, update_recording_status_operation, url_assessment_request, usage_right, used_insight, user, user_account_information, user_activity, user_analytics, user_app_install_status, user_configuration, user_consent_request, user_credential_usage_details, user_experience_analytics_anomaly, user_experience_analytics_anomaly_correlation_group_overview, user_experience_analytics_anomaly_device, user_experience_analytics_app_health_application_performance, user_experience_analytics_app_health_app_performance_by_app_version, user_experience_analytics_app_health_app_performance_by_app_version_details, user_experience_analytics_app_health_app_performance_by_app_version_device_id, user_experience_analytics_app_health_app_performance_by_o_s_version, user_experience_analytics_app_health_device_model_performance, user_experience_analytics_app_health_device_performance, user_experience_analytics_app_health_device_performance_details, user_experience_analytics_app_health_o_s_version_performance, user_experience_analytics_baseline, user_experience_analytics_battery_health_app_impact, user_experience_analytics_battery_health_capacity_details, user_experience_analytics_battery_health_device_app_impact, user_experience_analytics_battery_health_device_performance, user_experience_analytics_battery_health_device_runtime_history, user_experience_analytics_battery_health_model_performance, user_experience_analytics_battery_health_os_performance, user_experience_analytics_battery_health_runtime_details, user_experience_analytics_category, user_experience_analytics_device_performance, user_experience_analytics_device_scope, user_experience_analytics_device_scores, user_experience_analytics_device_startup_history, user_experience_analytics_device_startup_process, user_experience_analytics_device_startup_process_performance, user_experience_analytics_device_timeline_event, user_experience_analytics_device_without_cloud_identity, user_experience_analytics_impacting_process, user_experience_analytics_metric, user_experience_analytics_metric_history, user_experience_analytics_model_scores, user_experience_analytics_not_autopilot_ready_device, user_experience_analytics_overview, user_experience_analytics_remote_connection, user_experience_analytics_resource_performance, user_experience_analytics_score_history, user_experience_analytics_work_from_anywhere_device, user_experience_analytics_work_from_anywhere_hardware_readiness_metric, user_experience_analytics_work_from_anywhere_metric, user_experience_analytics_work_from_anywhere_model_performance, user_flow_language_configuration, user_flow_language_page, user_insights_settings, user_install_state_summary, user_p_f_x_certificate, user_registration_details, user_scope_teams_app_installation, user_security_profile, user_settings, user_sign_in_insight, user_teamwork, vertical_section, virtual_appointment, virtual_endpoint, virtual_event, virtual_events_root, virtual_event_presenter, virtual_event_registrant, virtual_event_registration, virtual_event_registration_question, virtual_event_session, virtual_event_webinar, voice_authentication_method_configuration, voice_authentication_method_target, vpn_configuration, vpp_token, vulnerable_managed_device, web_account, web_app, web_application_segment, web_part, win32_lob_app, windows10_certificate_profile_base, windows10_compliance_policy, windows10_custom_configuration, windows10_device_firmware_configuration_interface, windows10_eas_email_profile_configuration, windows10_endpoint_protection_configuration, windows10_enrollment_completion_page_configuration, windows10_enrollment_completion_page_configuration_policy_set_item, windows10_enterprise_modern_app_management_configuration, windows10_general_configuration, windows10_imported_p_f_x_certificate_profile, windows10_mobile_compliance_policy, windows10_network_boundary_configuration, windows10_pkcs_certificate_profile, windows10_p_f_x_import_certificate_profile, windows10_secure_assessment_configuration, windows10_team_general_configuration, windows10_vpn_configuration, windows10_x_certificate_profile, windows10_x_s_c_e_p_certificate_profile, windows10_x_trusted_root_certificate, windows10_x_vpn_configuration, windows10_x_wifi_configuration, windows81_certificate_profile_base, windows81_compliance_policy, windows81_general_configuration, windows81_s_c_e_p_certificate_profile, windows81_trusted_root_certificate, windows81_vpn_configuration, windows81_wifi_import_configuration, windows_app_x, windows_assigned_access_profile, windows_autopilot_deployment_profile, windows_autopilot_deployment_profile_assignment, windows_autopilot_deployment_profile_policy_set_item, windows_autopilot_device_identity, windows_autopilot_settings, windows_certificate_profile_base, windows_defender_advanced_threat_protection_configuration, windows_defender_application_control_supplemental_policy, windows_defender_application_control_supplemental_policy_assignment, windows_defender_application_control_supplemental_policy_deployment_status, windows_defender_application_control_supplemental_policy_deployment_summary, windows_delivery_optimization_configuration, windows_device_malware_state, windows_domain_join_configuration, windows_driver_update_inventory, windows_driver_update_profile, windows_driver_update_profile_assignment, windows_feature_update_catalog_item, windows_feature_update_profile, windows_feature_update_profile_assignment, windows_health_monitoring_configuration, windows_hello_for_business_authentication_method, windows_identity_protection_configuration, windows_information_protection, windows_information_protection_app_learning_summary, windows_information_protection_app_locker_file, windows_information_protection_device_registration, windows_information_protection_network_learning_summary, windows_information_protection_policy, windows_information_protection_wipe_action, windows_kiosk_configuration, windows_malware_information, windows_managed_app_protection, windows_managed_device, windows_management_app, windows_management_app_health_state, windows_management_app_health_summary, windows_microsoft_edge_app, windows_mobile_m_s_i, windows_phone81_app_x, windows_phone81_app_x_bundle, windows_phone81_certificate_profile_base, windows_phone81_compliance_policy, windows_phone81_custom_configuration, windows_phone81_general_configuration, windows_phone81_imported_p_f_x_certificate_profile, windows_phone81_store_app, windows_phone81_s_c_e_p_certificate_profile, windows_phone81_trusted_root_certificate, windows_phone81_vpn_configuration, windows_phone_e_a_s_email_profile_configuration, windows_phone_x_a_p, windows_privacy_data_access_control_item, windows_protection_state, windows_quality_update_catalog_item, windows_quality_update_profile, windows_quality_update_profile_assignment, windows_store_app, windows_universal_app_x, windows_universal_app_x_contained_app, windows_update_catalog_item, windows_update_for_business_configuration, windows_update_state, windows_vpn_configuration, windows_web_app, windows_wifi_configuration, windows_wifi_enterprise_e_a_p_configuration, windows_wired_network_configuration, win_get_app, workbook, workbook_application, workbook_chart, workbook_chart_area_format, workbook_chart_axes, workbook_chart_axis, workbook_chart_axis_format, workbook_chart_axis_title, workbook_chart_axis_title_format, workbook_chart_data_labels, workbook_chart_data_label_format, workbook_chart_fill, workbook_chart_font, workbook_chart_gridlines, workbook_chart_gridlines_format, workbook_chart_legend, workbook_chart_legend_format, workbook_chart_line_format, workbook_chart_point, workbook_chart_point_format, workbook_chart_series, workbook_chart_series_format, workbook_chart_title, workbook_chart_title_format, workbook_comment, workbook_comment_reply, workbook_filter, workbook_format_protection, workbook_functions, workbook_function_result, workbook_named_item, workbook_operation, workbook_pivot_table, workbook_range, workbook_range_border, workbook_range_fill, workbook_range_font, workbook_range_format, workbook_range_sort, workbook_range_view, workbook_table, workbook_table_column, workbook_table_row, workbook_table_sort, workbook_worksheet, workbook_worksheet_protection, workforce_integration, workspace, work_position, x509_certificate_authentication_method_configuration, zebra_fota_artifact, zebra_fota_connector, zebra_fota_deployment
        from .call_records import call_record, segment, session
        from .device_management import alert_record, alert_rule, device_management, monitoring
        from .ediscovery import add_to_review_set_operation, case, case_export_operation, case_hold_operation, case_index_operation, case_operation, case_settings, custodian, data_source, data_source_container, ediscoveryroot, estimate_statistics_operation, legal_hold, noncustodial_data_source, purge_data_operation, review_set, review_set_query, site_source, source_collection, tag, tag_operation, unified_group_source, user_source
        from .external_connectors import connection_operation, connection_quota, external_activity, external_activity_result, external_connection, external_group, external_item, identity, schema
        from .identity_governance import custom_task_extension, lifecycle_management_settings, lifecycle_workflows_container, run, task, task_definition, task_processing_result, task_report, user_processing_result, workflow_template
        from .industry_data import azure_data_lake_connector, file_data_connector, file_validate_operation, inbound_file_flow, inbound_flow, inbound_flow_activity, industry_data_activity, industry_data_connector, industry_data_root, industry_data_run, industry_data_run_activity, outbound_flow_activity, reference_definition, role_group, source_system_definition, validate_operation, year_time_period_definition
        from .managed_tenants import aggregated_policy_compliance, app_performance, audit_event, cloud_pc_connection, cloud_pc_device, cloud_pc_overview, conditional_access_policy_coverage, credential_user_registrations_summary, device_app_performance, device_compliance_policy_setting_state_summary, device_health_status, managed_device_compliance, managed_device_compliance_trend, managed_tenant, managed_tenant_alert, managed_tenant_alert_log, managed_tenant_alert_rule, managed_tenant_alert_rule_definition, managed_tenant_api_notification, managed_tenant_email_notification, managed_tenant_ticketing_endpoint, management_action, management_action_tenant_deployment_status, management_intent, management_template, management_template_collection, management_template_collection_tenant_summary, management_template_step, management_template_step_deployment, management_template_step_tenant_summary, management_template_step_version, tenant, tenant_customized_information, tenant_detailed_information, tenant_group, tenant_tag, windows_device_malware_state, windows_protection_state
        from .networkaccess import branch_site, conditional_access_policy, conditional_access_settings, connectivity, cross_tenant_access_settings, device_link, enriched_audit_logs, forwarding_options, forwarding_policy, forwarding_policy_link, forwarding_profile, forwarding_rule, logs, m365_forwarding_rule, network_access_root, policy, policy_link, policy_rule, private_access_forwarding_rule, profile, reports, settings, tenant_status
        from .search import acronym, bookmark, qna, search_answer
        from .security import alert, article, article_indicator, artifact, case, cases_root, case_operation, data_set, data_source, data_source_container, disposition_review_stage, ediscovery_add_to_review_set_operation, ediscovery_case, ediscovery_case_settings, ediscovery_custodian, ediscovery_estimate_operation, ediscovery_export_operation, ediscovery_file, ediscovery_hold_operation, ediscovery_hold_policy, ediscovery_index_operation, ediscovery_noncustodial_data_source, ediscovery_purge_data_operation, ediscovery_review_set, ediscovery_review_set_query, ediscovery_review_tag, ediscovery_search, ediscovery_tag_operation, email_content_threat_submission, email_threat_submission, email_threat_submission_policy, email_url_threat_submission, file, file_content_threat_submission, file_threat_submission, file_url_threat_submission, host, hostname, host_component, host_cookie, host_reputation, host_tracker, incident, indicator, information_protection, information_protection_policy_setting, intelligence_profile, intelligence_profile_indicator, ip_address, labels_root, passive_dns_record, policy_base, retention_event, retention_event_type, retention_label, search, security, sensitivity_label, site_source, tag, threat_intelligence, threat_submission, threat_submission_root, triggers_root, trigger_types_root, unclassified_artifact, unified_group_source, url_threat_submission, user_source, vulnerability, vulnerability_component
        from .term_store import group, relation, set, store, term
        from .windows_updates import azure_a_d_device, catalog, catalog_entry, compliance_change, content_approval, deployment, deployment_audience, driver_update_catalog_entry, feature_update_catalog_entry, operational_insights_connection, quality_update_catalog_entry, resource_connection, software_update_catalog_entry, updatable_asset, updatable_asset_group, update_policy

        fields: Dict[str, Callable[[Any], None]] = {
            "id": lambda n : setattr(self, 'id', n.get_str_value()),
            "@odata.type": lambda n : setattr(self, 'odata_type', n.get_str_value()),
        }
        return fields
    
    def serialize(self,writer: SerializationWriter) -> None:
        """
        Serializes information the current object
        Args:
            writer: Serialization writer to use to serialize this model
        """
        if not writer:
            raise TypeError("writer cannot be null.")
        writer.write_str_value("id", self.id)
        writer.write_str_value("@odata.type", self.odata_type)
        writer.write_additional_data_value(self.additional_data)
    

