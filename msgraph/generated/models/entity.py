from __future__ import annotations
from kiota_abstractions.serialization import AdditionalDataHolder, Parsable, ParseNode, SerializationWriter
from typing import Any, Callable, Dict, List, Optional, TYPE_CHECKING, Union

if TYPE_CHECKING:
    from . import aad_user_conversation_member, access_package, access_package_assignment, access_package_assignment_policy, access_package_assignment_request, access_package_assignment_request_workflow_extension, access_package_assignment_resource_role, access_package_assignment_workflow_extension, access_package_catalog, access_package_resource, access_package_resource_environment, access_package_resource_request, access_package_resource_role, access_package_resource_role_scope, access_package_resource_scope, access_package_subject, access_review, access_review_decision, access_review_history_definition, access_review_history_instance, access_review_instance, access_review_instance_decision_item, access_review_policy, access_review_reviewer, access_review_schedule_definition, access_review_set, access_review_stage, account, active_directory_windows_autopilot_deployment_profile, activity_based_timeout_policy, activity_history_item, activity_statistics, add_large_gallery_view_operation, administrative_unit, admin_consent_request_policy, admin_report_settings, admin_windows, admin_windows_updates, advanced_threat_protection_onboarding_device_setting_state, advanced_threat_protection_onboarding_state_summary, aged_accounts_payable, aged_accounts_receivable, agreement, agreement_acceptance, agreement_file, agreement_file_localization, agreement_file_properties, agreement_file_version, alert, allowed_data_location, allowed_value, android_certificate_profile_base, android_compliance_policy, android_custom_configuration, android_device_compliance_local_action_base, android_device_compliance_local_action_lock_device, android_device_compliance_local_action_lock_device_with_passcode, android_device_owner_certificate_profile_base, android_device_owner_compliance_policy, android_device_owner_derived_credential_authentication_configuration, android_device_owner_enrollment_profile, android_device_owner_enterprise_wi_fi_configuration, android_device_owner_general_device_configuration, android_device_owner_imported_p_f_x_certificate_profile, android_device_owner_pkcs_certificate_profile, android_device_owner_scep_certificate_profile, android_device_owner_trusted_root_certificate, android_device_owner_vpn_configuration, android_device_owner_wi_fi_configuration, android_eas_email_profile_configuration, android_enterprise_wi_fi_configuration, android_for_work_app, android_for_work_app_configuration_schema, android_for_work_certificate_profile_base, android_for_work_compliance_policy, android_for_work_custom_configuration, android_for_work_eas_email_profile_base, android_for_work_enrollment_profile, android_for_work_enterprise_wi_fi_configuration, android_for_work_general_device_configuration, android_for_work_gmail_eas_configuration, android_for_work_imported_p_f_x_certificate_profile, android_for_work_mobile_app_configuration, android_for_work_nine_work_eas_configuration, android_for_work_pkcs_certificate_profile, android_for_work_scep_certificate_profile, android_for_work_settings, android_for_work_trusted_root_certificate, android_for_work_vpn_configuration, android_for_work_wi_fi_configuration, android_general_device_configuration, android_imported_p_f_x_certificate_profile, android_lob_app, android_managed_app_protection, android_managed_app_registration, android_managed_store_account_enterprise_settings, android_managed_store_app, android_managed_store_app_configuration, android_managed_store_app_configuration_schema, android_managed_store_web_app, android_oma_cp_configuration, android_pkcs_certificate_profile, android_scep_certificate_profile, android_store_app, android_trusted_root_certificate, android_vpn_configuration, android_wi_fi_configuration, android_work_profile_certificate_profile_base, android_work_profile_compliance_policy, android_work_profile_custom_configuration, android_work_profile_eas_email_profile_base, android_work_profile_enterprise_wi_fi_configuration, android_work_profile_general_device_configuration, android_work_profile_gmail_eas_configuration, android_work_profile_nine_work_eas_configuration, android_work_profile_pkcs_certificate_profile, android_work_profile_scep_certificate_profile, android_work_profile_trusted_root_certificate, android_work_profile_vpn_configuration, android_work_profile_wi_fi_configuration, anonymous_guest_conversation_member, aosp_device_owner_certificate_profile_base, aosp_device_owner_compliance_policy, aosp_device_owner_device_configuration, aosp_device_owner_enterprise_wi_fi_configuration, aosp_device_owner_pkcs_certificate_profile, aosp_device_owner_scep_certificate_profile, aosp_device_owner_trusted_root_certificate, aosp_device_owner_wi_fi_configuration, apple_device_features_configuration_base, apple_enrollment_profile_assignment, apple_expedited_checkin_configuration_base, apple_managed_identity_provider, apple_push_notification_certificate, apple_user_initiated_enrollment_profile, apple_vpn_configuration, apple_vpp_token_troubleshooting_event, application, application_segment, application_sign_in_detailed_summary, application_sign_in_summary, application_template, approval, approval_step, approval_workflow_provider, app_consent_approval_route, app_consent_request, app_log_collection_request, app_management_policy, app_role_assignment, app_scope, app_vulnerability_managed_device, app_vulnerability_mobile_app, app_vulnerability_task, assignment_filter_evaluation_status_details, associated_team_info, attachment, attachment_base, attachment_session, attack_simulation_operation, attack_simulation_root, attendance_record, attribute_mapping_function_schema, attribute_set, audio_routing_group, audit_event, authentication, authentication_combination_configuration, authentication_context_class_reference, authentication_events_policy, authentication_event_listener, authentication_flows_policy, authentication_listener, authentication_method, authentication_methods_policy, authentication_methods_root, authentication_method_configuration, authentication_method_mode_detail, authentication_method_target, authentication_strength_policy, authentication_strength_root, authored_note, authorization_policy, azure_a_d_windows_autopilot_deployment_profile, azure_communication_services_user_conversation_member, b2c_authentication_methods_policy, b2c_identity_user_flow, b2x_identity_user_flow, base_item, base_item_version, bitlocker, bitlocker_recovery_key, booking_appointment, booking_business, booking_currency, booking_customer, booking_custom_question, booking_named_entity, booking_person, booking_service, booking_staff_member, browser_shared_cookie, browser_site, browser_site_list, built_in_identity_provider, business_flow, business_flow_template, business_scenario, business_scenario_planner, business_scenario_plan_reference, business_scenario_task, calendar, calendar_group, calendar_permission, calendar_sharing_message, call, call_activity_statistics, call_transcript, cancel_media_processing_operation, canvas_layout, cart_to_class_association, certificate_based_auth_configuration, certificate_connector_details, change_tracked_entity, channel, chat, chat_activity_statistics, chat_message, chat_message_hosted_content, chat_message_info, checklist_item, chrome_o_s_onboarding_settings, claims_mapping_policy, classification_job_response, cloud_app_security_profile, cloud_communications, cloud_pc_audit_event, cloud_pc_cross_cloud_government_organization_mapping, cloud_pc_device_image, cloud_pc_export_job, cloud_pc_external_partner_setting, cloud_pc_gallery_image, cloud_pc_on_premises_connection, cloud_pc_organization_settings, cloud_pc_provisioning_policy, cloud_pc_provisioning_policy_assignment, cloud_pc_reports, cloud_pc_service_plan, cloud_pc_shared_use_service_plan, cloud_pc_snapshot, cloud_pc_supported_region, cloud_pc_user_setting, cloud_pc_user_setting_assignment, cloud_p_c, cloud_p_c_connectivity_issue, column_definition, column_link, comanagement_eligible_device, command, comms_operation, company, company_information, compliance_management_partner, conditional_access_policy, conditional_access_root, conditional_access_template, config_manager_collection, connected_organization, connection_operation, connector, connector_group, contact, contact_folder, contact_merge_suggestions, content_sharing_session, content_type, continuous_access_evaluation_policy, contract, conversation, conversation_member, conversation_thread, cors_configuration_v2, country_named_location, country_region, credential_usage_summary, credential_user_registration_count, credential_user_registration_details, cross_tenant_access_policy, cross_tenant_access_policy_configuration_default, currency, customer, customer_payment, customer_payment_journal, custom_access_package_workflow_extension, custom_authentication_extension, custom_callout_extension, custom_extension_handler, custom_extension_stage_setting, custom_security_attribute_definition, data_classification_service, data_loss_prevention_policy, data_policy_operation, data_sharing_consent, default_device_compliance_policy, default_managed_app_protection, default_user_role_override, delegated_admin_access_assignment, delegated_admin_customer, delegated_admin_relationship, delegated_admin_relationship_operation, delegated_admin_relationship_request, delegated_admin_service_management_detail, delegated_permission_classification, deleted_item_container, deleted_team, dep_enrollment_base_profile, dep_enrollment_profile, dep_i_o_s_enrollment_profile, dep_mac_o_s_enrollment_profile, dep_onboarding_setting, detected_app, device, device_and_app_management_assignment_filter, device_and_app_management_role_assignment, device_and_app_management_role_definition, device_app_management, device_app_management_task, device_category, device_comanagement_authority_configuration, device_compliance_action_item, device_compliance_device_overview, device_compliance_device_status, device_compliance_policy, device_compliance_policy_assignment, device_compliance_policy_device_state_summary, device_compliance_policy_group_assignment, device_compliance_policy_policy_set_item, device_compliance_policy_setting_state_summary, device_compliance_policy_state, device_compliance_scheduled_action_for_rule, device_compliance_script, device_compliance_script_device_state, device_compliance_script_run_summary, device_compliance_setting_state, device_compliance_user_overview, device_compliance_user_status, device_configuration, device_configuration_assignment, device_configuration_conflict_summary, device_configuration_device_overview, device_configuration_device_state_summary, device_configuration_device_status, device_configuration_group_assignment, device_configuration_policy_set_item, device_configuration_state, device_configuration_user_overview, device_configuration_user_state_summary, device_configuration_user_status, device_custom_attribute_shell_script, device_enrollment_configuration, device_enrollment_limit_configuration, device_enrollment_notification_configuration, device_enrollment_platform_restrictions_configuration, device_enrollment_platform_restriction_configuration, device_enrollment_windows_hello_for_business_configuration, device_health_script, device_health_script_assignment, device_health_script_device_state, device_health_script_run_summary, device_install_state, device_log_collection_response, device_management_abstract_complex_setting_definition, device_management_abstract_complex_setting_instance, device_management_autopilot_event, device_management_autopilot_policy_status_detail, device_management_boolean_setting_instance, device_management_cached_report_configuration, device_management_collection_setting_definition, device_management_collection_setting_instance, device_management_complex_setting_definition, device_management_complex_setting_instance, device_management_compliance_action_item, device_management_compliance_policy, device_management_compliance_scheduled_action_for_rule, device_management_configuration_category, device_management_configuration_choice_setting_collection_definition, device_management_configuration_choice_setting_definition, device_management_configuration_policy, device_management_configuration_policy_assignment, device_management_configuration_policy_policy_set_item, device_management_configuration_policy_template, device_management_configuration_redirect_setting_definition, device_management_configuration_setting, device_management_configuration_setting_definition, device_management_configuration_setting_group_collection_definition, device_management_configuration_setting_group_definition, device_management_configuration_setting_template, device_management_configuration_simple_setting_collection_definition, device_management_configuration_simple_setting_definition, device_management_derived_credential_settings, device_management_domain_join_connector, device_management_exchange_connector, device_management_exchange_on_premises_policy, device_management_export_job, device_management_integer_setting_instance, device_management_intent, device_management_intent_assignment, device_management_intent_device_setting_state_summary, device_management_intent_device_state, device_management_intent_device_state_summary, device_management_intent_setting_category, device_management_intent_user_state, device_management_intent_user_state_summary, device_management_partner, device_management_reports, device_management_resource_access_profile_assignment, device_management_resource_access_profile_base, device_management_reusable_policy_setting, device_management_script, device_management_script_assignment, device_management_script_device_state, device_management_script_group_assignment, device_management_script_policy_set_item, device_management_script_run_summary, device_management_script_user_state, device_management_setting_category, device_management_setting_definition, device_management_setting_instance, device_management_string_setting_instance, device_management_template, device_management_template_setting_category, device_management_troubleshooting_event, device_registration_policy, device_setup_configuration, device_shell_script, dimension, dimension_value, directory, directory_audit, directory_definition, directory_object, directory_object_partner_reference, directory_role, directory_role_access_review_policy, directory_role_template, directory_setting, directory_setting_template, dlp_evaluate_policies_job_response, document, document_comment, document_comment_reply, document_set_version, domain, domain_dns_cname_record, domain_dns_mx_record, domain_dns_record, domain_dns_srv_record, domain_dns_txt_record, domain_dns_unavailable_record, domain_security_profile, drive, drive_item, drive_item_version, eas_email_profile_configuration_base, edge, edition_upgrade_configuration, educational_activity, education_assignment, education_assignment_defaults, education_assignment_resource, education_assignment_settings, education_category, education_class, education_feedback_outcome, education_feedback_resource_outcome, education_organization, education_outcome, education_points_outcome, education_rubric, education_rubric_outcome, education_school, education_submission, education_submission_resource, education_synchronization_error, education_synchronization_profile, education_synchronization_profile_status, education_user, email_activity_statistics, email_authentication_method, email_authentication_method_configuration, email_file_assessment_request, embedded_s_i_m_activation_code_pool, embedded_s_i_m_activation_code_pool_assignment, embedded_s_i_m_device_state, employee, endpoint, enrollment_configuration_assignment, enrollment_profile, enrollment_restrictions_configuration_policy_set_item, enrollment_troubleshooting_event, enterprise_code_signing_certificate, entitlement_management, entitlement_management_settings, evaluate_label_job_response, event, event_message, event_message_request, event_message_response, exact_match_data_store, exact_match_data_store_base, exact_match_job_base, exact_match_lookup_job, exact_match_session, exact_match_session_base, exact_match_upload_agent, extension, extension_property, external, external_connection, external_domain_name, external_group, external_identities_policy, external_item, external_meeting_registrant, external_meeting_registration, e_book_install_summary, feature_rollout_policy, federated_identity_credential, fido2_authentication_method, fido2_authentication_method_configuration, fido2_combination_configuration, field_value_set, file_assessment_request, file_attachment, file_classification_request, file_security_profile, filter_operator_schema, focus_activity_statistics, general_ledger_entry, governance_insight, governance_policy_template, governance_resource, governance_role_assignment, governance_role_assignment_request, governance_role_definition, governance_role_setting, governance_subject, group, group_lifecycle_policy, group_policy_category, group_policy_configuration, group_policy_configuration_assignment, group_policy_definition, group_policy_definition_file, group_policy_definition_value, group_policy_migration_report, group_policy_object_file, group_policy_operation, group_policy_presentation, group_policy_presentation_check_box, group_policy_presentation_combo_box, group_policy_presentation_decimal_text_box, group_policy_presentation_dropdown_list, group_policy_presentation_list_box, group_policy_presentation_long_decimal_text_box, group_policy_presentation_multi_text_box, group_policy_presentation_text, group_policy_presentation_text_box, group_policy_presentation_value, group_policy_presentation_value_boolean, group_policy_presentation_value_decimal, group_policy_presentation_value_list, group_policy_presentation_value_long_decimal, group_policy_presentation_value_multi_text, group_policy_presentation_value_text, group_policy_setting_mapping, group_policy_uploaded_definition_file, group_policy_uploaded_presentation, home_realm_discovery_policy, horizontal_section, horizontal_section_column, host_security_profile, identity_api_connector, identity_built_in_user_flow_attribute, identity_custom_user_flow_attribute, identity_provider, identity_provider_base, identity_security_defaults_enforcement_policy, identity_user_flow, identity_user_flow_attribute, identity_user_flow_attribute_assignment, impacted_resource, imported_apple_device_identity, imported_apple_device_identity_result, imported_device_identity, imported_device_identity_result, imported_windows_autopilot_device_identity, imported_windows_autopilot_device_identity_upload, inference_classification, inference_classification_override, information_protection, information_protection_label, information_protection_policy, insights_settings, internal_domain_federation, internet_explorer_mode, intune_branding_profile, intune_branding_profile_assignment, invalid_license_alert_configuration, invalid_license_alert_incident, invitation, invite_participants_operation, invoke_user_flow_listener, iosik_ev2_vpn_configuration, iosi_pad_o_s_web_clip, ios_certificate_profile, ios_certificate_profile_base, ios_compliance_policy, ios_custom_configuration, ios_derived_credential_authentication_configuration, ios_device_features_configuration, ios_eas_email_profile_configuration, ios_education_device_configuration, ios_edu_device_configuration, ios_enterprise_wi_fi_configuration, ios_expedited_checkin_configuration, ios_general_device_configuration, ios_imported_p_f_x_certificate_profile, ios_lob_app, ios_lob_app_provisioning_configuration, ios_lob_app_provisioning_configuration_assignment, ios_lob_app_provisioning_configuration_policy_set_item, ios_managed_app_protection, ios_managed_app_registration, ios_mobile_app_configuration, ios_pkcs_certificate_profile, ios_scep_certificate_profile, ios_store_app, ios_trusted_root_certificate, ios_update_configuration, ios_update_device_status, ios_vpn_configuration, ios_vpp_app, ios_vpp_app_assigned_device_license, ios_vpp_app_assigned_license, ios_vpp_app_assigned_user_license, ios_vpp_e_book, ios_vpp_e_book_assignment, ios_wi_fi_configuration, ip_application_segment, ip_named_location, ip_security_profile, item, item_activity, item_activity_o_l_d, item_activity_stat, item_address, item_analytics, item_attachment, item_category, item_email, item_facet, item_insights, item_patent, item_phone, item_publication, job_response_base, journal, journal_line, language_proficiency, learning_content, learning_provider, license_details, linked_resource, list, list_item, list_item_version, localized_notification_message, long_running_operation, lookup_result_row, mac_os_vpp_app, mac_os_vpp_app_assigned_license, mac_o_s_certificate_profile_base, mac_o_s_compliance_policy, mac_o_s_custom_app_configuration, mac_o_s_custom_configuration, mac_o_s_device_features_configuration, mac_o_s_dmg_app, mac_o_s_endpoint_protection_configuration, mac_o_s_enterprise_wi_fi_configuration, mac_o_s_extensions_configuration, mac_o_s_general_device_configuration, mac_o_s_imported_p_f_x_certificate_profile, mac_o_s_lob_app, mac_o_s_mdatp_app, mac_o_s_microsoft_defender_app, mac_o_s_microsoft_edge_app, mac_o_s_office_suite_app, mac_o_s_pkcs_certificate_profile, mac_o_s_scep_certificate_profile, mac_o_s_software_update_account_summary, mac_o_s_software_update_category_summary, mac_o_s_software_update_configuration, mac_o_s_software_update_state_summary, mac_o_s_trusted_root_certificate, mac_o_s_vpn_configuration, mac_o_s_wired_network_configuration, mac_o_s_wi_fi_configuration, mail_assessment_request, mail_folder, mail_search_folder, malware_state_for_windows_device, managed_all_device_certificate_state, managed_android_lob_app, managed_android_store_app, managed_app, managed_app_configuration, managed_app_operation, managed_app_policy, managed_app_policy_deployment_summary, managed_app_protection, managed_app_protection_policy_set_item, managed_app_registration, managed_app_status, managed_app_status_raw, managed_device, managed_device_certificate_state, managed_device_encryption_state, managed_device_mobile_app_configuration, managed_device_mobile_app_configuration_assignment, managed_device_mobile_app_configuration_device_status, managed_device_mobile_app_configuration_device_summary, managed_device_mobile_app_configuration_policy_set_item, managed_device_mobile_app_configuration_state, managed_device_mobile_app_configuration_user_status, managed_device_mobile_app_configuration_user_summary, managed_device_overview, managed_e_book, managed_e_book_assignment, managed_e_book_category, managed_i_o_s_lob_app, managed_i_o_s_store_app, managed_mobile_app, managed_mobile_lob_app, mdm_windows_information_protection_policy, mdm_windows_information_protection_policy_policy_set_item, meeting_activity_statistics, meeting_attendance_report, meeting_registrant, meeting_registrant_base, meeting_registration, meeting_registration_base, meeting_registration_question, membership_outlier_insight, mention, message, message_event, message_recipient, message_rule, message_trace, microsoft_account_user_conversation_member, microsoft_application_data_access_settings, microsoft_authenticator_authentication_method, microsoft_authenticator_authentication_method_configuration, microsoft_authenticator_authentication_method_target, microsoft_store_for_business_app, microsoft_store_for_business_contained_app, microsoft_tunnel_configuration, microsoft_tunnel_health_threshold, microsoft_tunnel_server, microsoft_tunnel_server_log_collection_response, microsoft_tunnel_site, mobile_app, mobile_app_assignment, mobile_app_category, mobile_app_content, mobile_app_content_file, mobile_app_dependency, mobile_app_install_status, mobile_app_install_summary, mobile_app_intent_and_state, mobile_app_policy_set_item, mobile_app_provisioning_config_group_assignment, mobile_app_relationship, mobile_app_supersedence, mobile_app_troubleshooting_event, mobile_contained_app, mobile_lob_app, mobile_threat_defense_connector, mobility_management_policy, multi_value_legacy_extended_property, mute_participants_operation, mute_participant_operation, named_location, ndes_connector, note, notebook, notification, notification_message_template, no_mfa_on_role_activation_alert_configuration, no_mfa_on_role_activation_alert_incident, oem_warranty_information_onboarding, offer_shift_request, office365_active_user_counts, office365_active_user_detail, office365_groups_activity_counts, office365_groups_activity_detail, office365_groups_activity_file_counts, office365_groups_activity_group_counts, office365_groups_activity_storage, office365_services_user_counts, office_client_configuration, office_client_configuration_assignment, office_graph_insights, office_suite_app, onenote, onenote_entity_base_model, onenote_entity_hierarchy_model, onenote_entity_schema_object_model, onenote_operation, onenote_page, onenote_resource, onenote_section, online_meeting, on_premises_agent, on_premises_agent_group, on_premises_conditional_access_settings, on_premises_directory_synchronization, on_premises_publishing_profile, on_token_issuance_start_custom_extension, on_token_issuance_start_listener, open_id_connect_identity_provider, open_id_connect_provider, open_shift, open_shift_change_request, open_type_extension, operation, organization, organizational_branding, organizational_branding_localization, organizational_branding_properties, organization_settings, org_contact, outlook_category, outlook_item, outlook_task, outlook_task_folder, outlook_task_group, outlook_user, o_auth2_permission_grant, participant, participant_joining_notification, participant_left_notification, passwordless_microsoft_authenticator_authentication_method, password_authentication_method, payload, payload_compatible_assignment_filter, payload_response, payment_method, payment_term, permission, permission_grant_condition_set, permission_grant_policy, person, person_annotation, person_annual_event, person_award, person_certification, person_extension, person_interest, person_name, person_responsibility, person_website, phone_authentication_method, picture, pinned_chat_message_info, place, planner, planner_assigned_to_task_board_task_format, planner_bucket, planner_bucket_task_board_task_format, planner_delta, planner_group, planner_plan, planner_plan_configuration, planner_plan_configuration_localization, planner_plan_details, planner_progress_task_board_task_format, planner_roster, planner_roster_member, planner_task, planner_task_configuration, planner_task_details, planner_user, play_prompt_operation, policy_base, policy_set, policy_set_assignment, policy_set_item, post, presence, presentation, printer, printer_base, printer_create_operation, printer_share, print_connector, print_document, print_job, print_operation, print_service, print_service_endpoint, print_task, print_task_definition, print_task_trigger, print_usage, print_usage_by_printer, print_usage_by_user, privileged_access, privileged_access_group, privileged_access_group_assignment_schedule, privileged_access_group_assignment_schedule_instance, privileged_access_group_assignment_schedule_request, privileged_access_group_eligibility_schedule, privileged_access_group_eligibility_schedule_instance, privileged_access_group_eligibility_schedule_request, privileged_access_root, privileged_access_schedule, privileged_access_schedule_instance, privileged_access_schedule_request, privileged_approval, privileged_operation_event, privileged_role, privileged_role_assignment, privileged_role_assignment_request, privileged_role_settings, privileged_role_summary, privileged_signup_status, privilege_management_elevation, profile, profile_card_property, profile_photo, program, program_control, program_control_type, project_participation, pronouns_settings, provider_tenant_setting, provisioning_object_summary, published_resource, purchase_invoice, purchase_invoice_line, rbac_application, rbac_application_multiple, recommendation, recommendation_base, record_operation, redundant_assignment_alert_configuration, redundant_assignment_alert_incident, reference_attachment, regional_and_language_settings, relying_party_detailed_summary, remote_action_audit, remote_assistance_partner, remote_assistance_settings, report_root, request, resource_operation, resource_specific_permission_grant, restricted_apps_violation, rich_long_running_operation, risky_service_principal, risky_service_principal_history_item, risky_user, risky_user_history_item, risk_detection, roles_assigned_outside_privileged_identity_management_alert_configuration, roles_assigned_outside_privileged_identity_management_alert_incident, role_assignment, role_definition, role_management_alert, role_scope_tag, role_scope_tag_auto_assignment, room, room_list, sales_credit_memo, sales_credit_memo_line, sales_invoice, sales_invoice_line, sales_order, sales_order_line, sales_quote, sales_quote_line, saml_or_ws_fed_external_domain_federation, saml_or_ws_fed_provider, schedule, schedule_change_request, scheduling_group, schema, schema_extension, scoped_role_membership, search_entity, section_group, secure_score, secure_score_control_profile, security_action, security_baseline_category_state_summary, security_baseline_device_state, security_baseline_setting_state, security_baseline_state, security_baseline_state_summary, security_baseline_template, security_configuration_task, security_reports_root, sensitive_type, sensitivity_label, sensitivity_policy_settings, sequential_activation_renewals_alert_configuration, sequential_activation_renewals_alert_incident, service_announcement, service_announcement_attachment, service_announcement_base, service_health, service_health_issue, service_now_connection, service_principal, service_principal_creation_condition_set, service_principal_creation_policy, service_principal_risk_detection, service_update_message, setting_state_device_summary, shared_drive_item, shared_email_domain, shared_email_domain_invitation, shared_insight, shared_p_c_configuration, shared_with_channel_team_info, shift, shift_preferences, shipment_method, sign_in, simulation, simulation_automation, simulation_automation_run, single_value_legacy_extended_property, site, site_page, skill_proficiency, skype_for_business_user_conversation_member, skype_user_conversation_member, sms_authentication_method_configuration, sms_authentication_method_target, social_identity_provider, software_oath_authentication_method, software_oath_authentication_method_configuration, software_update_status_summary, stale_sign_in_alert_configuration, stale_sign_in_alert_incident, standard_web_part, start_hold_music_operation, stop_hold_music_operation, strong_authentication_detail, strong_authentication_phone_app_detail, sts_policy, subject_rights_request, subscribed_sku, subscribe_to_tone_operation, subscription, swap_shifts_change_request, symantec_code_signing_certificate, synchronization, synchronization_job, synchronization_schema, synchronization_template, targeted_managed_app_configuration, targeted_managed_app_configuration_policy_set_item, targeted_managed_app_policy_assignment, targeted_managed_app_protection, task_file_attachment, tax_area, tax_group, team, teams_app, teams_app_definition, teams_app_icon, teams_app_installation, teams_app_settings, teams_async_operation, teams_tab, teams_template, teamwork, teamwork_bot, teamwork_device, teamwork_device_activity, teamwork_device_configuration, teamwork_device_health, teamwork_device_operation, teamwork_hosted_content, teamwork_peripheral, teamwork_tag, teamwork_tag_member, team_info, team_template, team_template_definition, telecom_expense_management_partner, temporary_access_pass_authentication_method, temporary_access_pass_authentication_method_configuration, tenant_app_management_policy, tenant_attach_r_b_a_c, tenant_relationship_access_policy_base, tenant_setup_info, terms_and_conditions, terms_and_conditions_acceptance_status, terms_and_conditions_assignment, terms_and_conditions_group_assignment, terms_of_use_container, text_classification_request, text_web_part, threat_assessment_request, threat_assessment_result, thumbnail_set, time_card, time_off, time_off_reason, time_off_request, ti_indicator, todo, todo_task, todo_task_list, token_issuance_policy, token_lifetime_policy, too_many_global_admins_assigned_to_tenant_alert_configuration, too_many_global_admins_assigned_to_tenant_alert_incident, trending, trust_framework_key_set, trust_framework_policy, unified_rbac_application, unified_rbac_resource_action, unified_rbac_resource_namespace, unified_rbac_resource_scope, unified_role_assignment, unified_role_assignment_multiple, unified_role_assignment_schedule, unified_role_assignment_schedule_instance, unified_role_assignment_schedule_request, unified_role_definition, unified_role_eligibility_schedule, unified_role_eligibility_schedule_instance, unified_role_eligibility_schedule_request, unified_role_management_alert, unified_role_management_alert_configuration, unified_role_management_alert_definition, unified_role_management_alert_incident, unified_role_management_policy, unified_role_management_policy_approval_rule, unified_role_management_policy_assignment, unified_role_management_policy_authentication_context_rule, unified_role_management_policy_enablement_rule, unified_role_management_policy_expiration_rule, unified_role_management_policy_notification_rule, unified_role_management_policy_rule, unified_role_schedule_base, unified_role_schedule_instance_base, unit_of_measure, unmanaged_device_discovery_task, unmute_participant_operation, unsupported_device_configuration, unsupported_group_policy_extension, update_recording_status_operation, url_assessment_request, usage_right, used_insight, user, user_account_information, user_activity, user_analytics, user_app_install_status, user_configuration, user_consent_request, user_credential_usage_details, user_experience_analytics_anomaly, user_experience_analytics_anomaly_device, user_experience_analytics_app_health_application_performance, user_experience_analytics_app_health_app_performance_by_app_version, user_experience_analytics_app_health_app_performance_by_app_version_details, user_experience_analytics_app_health_app_performance_by_app_version_device_id, user_experience_analytics_app_health_app_performance_by_o_s_version, user_experience_analytics_app_health_device_model_performance, user_experience_analytics_app_health_device_performance, user_experience_analytics_app_health_device_performance_details, user_experience_analytics_app_health_o_s_version_performance, user_experience_analytics_baseline, user_experience_analytics_battery_health_app_impact, user_experience_analytics_battery_health_capacity_details, user_experience_analytics_battery_health_device_app_impact, user_experience_analytics_battery_health_device_performance, user_experience_analytics_battery_health_device_runtime_history, user_experience_analytics_battery_health_model_performance, user_experience_analytics_battery_health_os_performance, user_experience_analytics_battery_health_runtime_details, user_experience_analytics_category, user_experience_analytics_device_performance, user_experience_analytics_device_scope, user_experience_analytics_device_scores, user_experience_analytics_device_startup_history, user_experience_analytics_device_startup_process, user_experience_analytics_device_startup_process_performance, user_experience_analytics_device_timeline_event, user_experience_analytics_device_without_cloud_identity, user_experience_analytics_impacting_process, user_experience_analytics_metric, user_experience_analytics_metric_history, user_experience_analytics_model_scores, user_experience_analytics_not_autopilot_ready_device, user_experience_analytics_overview, user_experience_analytics_remote_connection, user_experience_analytics_resource_performance, user_experience_analytics_score_history, user_experience_analytics_work_from_anywhere_device, user_experience_analytics_work_from_anywhere_hardware_readiness_metric, user_experience_analytics_work_from_anywhere_metric, user_experience_analytics_work_from_anywhere_model_performance, user_flow_language_configuration, user_flow_language_page, user_insights_settings, user_install_state_summary, user_p_f_x_certificate, user_registration_details, user_scope_teams_app_installation, user_security_profile, user_settings, user_sign_in_insight, user_teamwork, vendor, vertical_section, virtual_appointment, virtual_endpoint, voice_authentication_method_configuration, voice_authentication_method_target, vpn_configuration, vpp_token, vulnerable_managed_device, web_account, web_app, web_application_segment, web_part, win32_lob_app, windows10_certificate_profile_base, windows10_compliance_policy, windows10_custom_configuration, windows10_device_firmware_configuration_interface, windows10_eas_email_profile_configuration, windows10_endpoint_protection_configuration, windows10_enrollment_completion_page_configuration, windows10_enrollment_completion_page_configuration_policy_set_item, windows10_enterprise_modern_app_management_configuration, windows10_general_configuration, windows10_imported_p_f_x_certificate_profile, windows10_mobile_compliance_policy, windows10_network_boundary_configuration, windows10_pkcs_certificate_profile, windows10_p_f_x_import_certificate_profile, windows10_secure_assessment_configuration, windows10_team_general_configuration, windows10_vpn_configuration, windows10_x_certificate_profile, windows10_x_s_c_e_p_certificate_profile, windows10_x_trusted_root_certificate, windows10_x_vpn_configuration, windows10_x_wifi_configuration, windows81_certificate_profile_base, windows81_compliance_policy, windows81_general_configuration, windows81_s_c_e_p_certificate_profile, windows81_trusted_root_certificate, windows81_vpn_configuration, windows81_wifi_import_configuration, windows_app_x, windows_assigned_access_profile, windows_autopilot_deployment_profile, windows_autopilot_deployment_profile_assignment, windows_autopilot_deployment_profile_policy_set_item, windows_autopilot_device_identity, windows_autopilot_settings, windows_certificate_profile_base, windows_defender_advanced_threat_protection_configuration, windows_defender_application_control_supplemental_policy, windows_defender_application_control_supplemental_policy_assignment, windows_defender_application_control_supplemental_policy_deployment_status, windows_defender_application_control_supplemental_policy_deployment_summary, windows_delivery_optimization_configuration, windows_device_malware_state, windows_domain_join_configuration, windows_driver_update_inventory, windows_driver_update_profile, windows_driver_update_profile_assignment, windows_feature_update_catalog_item, windows_feature_update_profile, windows_feature_update_profile_assignment, windows_health_monitoring_configuration, windows_hello_for_business_authentication_method, windows_identity_protection_configuration, windows_information_protection, windows_information_protection_app_learning_summary, windows_information_protection_app_locker_file, windows_information_protection_device_registration, windows_information_protection_network_learning_summary, windows_information_protection_policy, windows_information_protection_wipe_action, windows_kiosk_configuration, windows_malware_information, windows_managed_app_protection, windows_managed_device, windows_management_app, windows_management_app_health_state, windows_management_app_health_summary, windows_microsoft_edge_app, windows_mobile_m_s_i, windows_office_client_configuration, windows_office_client_security_configuration, windows_phone81_app_x, windows_phone81_app_x_bundle, windows_phone81_certificate_profile_base, windows_phone81_compliance_policy, windows_phone81_custom_configuration, windows_phone81_general_configuration, windows_phone81_imported_p_f_x_certificate_profile, windows_phone81_store_app, windows_phone81_s_c_e_p_certificate_profile, windows_phone81_trusted_root_certificate, windows_phone81_vpn_configuration, windows_phone_e_a_s_email_profile_configuration, windows_phone_x_a_p, windows_privacy_data_access_control_item, windows_protection_state, windows_quality_update_catalog_item, windows_quality_update_profile, windows_quality_update_profile_assignment, windows_store_app, windows_universal_app_x, windows_universal_app_x_contained_app, windows_update_catalog_item, windows_update_for_business_configuration, windows_update_state, windows_vpn_configuration, windows_web_app, windows_wifi_configuration, windows_wifi_enterprise_e_a_p_configuration, windows_wired_network_configuration, win_get_app, workbook, workbook_application, workbook_chart, workbook_chart_area_format, workbook_chart_axes, workbook_chart_axis, workbook_chart_axis_format, workbook_chart_axis_title, workbook_chart_axis_title_format, workbook_chart_data_labels, workbook_chart_data_label_format, workbook_chart_fill, workbook_chart_font, workbook_chart_gridlines, workbook_chart_gridlines_format, workbook_chart_legend, workbook_chart_legend_format, workbook_chart_line_format, workbook_chart_point, workbook_chart_point_format, workbook_chart_series, workbook_chart_series_format, workbook_chart_title, workbook_chart_title_format, workbook_comment, workbook_comment_reply, workbook_filter, workbook_format_protection, workbook_functions, workbook_function_result, workbook_named_item, workbook_operation, workbook_pivot_table, workbook_range, workbook_range_border, workbook_range_fill, workbook_range_font, workbook_range_format, workbook_range_sort, workbook_range_view, workbook_table, workbook_table_column, workbook_table_row, workbook_table_sort, workbook_worksheet, workbook_worksheet_protection, workforce_integration, workspace, work_position, x509_certificate_authentication_method_configuration, zebra_fota_artifact, zebra_fota_connector, zebra_fota_deployment
    from .call_records import call_record, segment, session
    from .device_management import alert_record, alert_rule, device_management, monitoring
    from .ediscovery import add_to_review_set_operation, case, case_export_operation, case_hold_operation, case_index_operation, case_operation, case_settings, custodian, data_source, data_source_container, ediscoveryroot, estimate_statistics_operation, legal_hold, noncustodial_data_source, purge_data_operation, review_set, review_set_query, site_source, source_collection, tag, tag_operation, unified_group_source, user_source
    from .external_connectors import connection_operation, connection_quota, external_activity, external_activity_result, external_connection, external_group, external_item, identity, schema
    from .identity_governance import custom_task_extension, lifecycle_management_settings, lifecycle_workflows_container, run, task, task_definition, task_processing_result, task_report, user_processing_result, workflow_template
    from .industry_data import azure_data_lake_connector, file_data_connector, file_validate_operation, inbound_file_flow, inbound_flow, inbound_flow_activity, industry_data_activity, industry_data_connector, industry_data_root, industry_data_run, industry_data_run_activity, outbound_flow_activity, reference_definition, role_group, source_system_definition, validate_operation, year_time_period_definition
    from .managed_tenants import aggregated_policy_compliance, app_performance, audit_event, cloud_pc_connection, cloud_pc_device, cloud_pc_overview, conditional_access_policy_coverage, credential_user_registrations_summary, device_app_performance, device_compliance_policy_setting_state_summary, device_health_status, managed_device_compliance, managed_device_compliance_trend, managed_tenant, managed_tenant_alert, managed_tenant_alert_log, managed_tenant_alert_rule, managed_tenant_alert_rule_definition, managed_tenant_api_notification, managed_tenant_email_notification, managed_tenant_ticketing_endpoint, management_action, management_action_tenant_deployment_status, management_intent, management_template, management_template_collection, management_template_collection_tenant_summary, management_template_step, management_template_step_deployment, management_template_step_tenant_summary, management_template_step_version, tenant, tenant_customized_information, tenant_detailed_information, tenant_group, tenant_tag, windows_device_malware_state, windows_protection_state
    from .search import acronym, bookmark, qna, search_answer
    from .security import alert, article, article_indicator, artifact, case, cases_root, case_operation, data_set, data_source, data_source_container, disposition_review_stage, ediscovery_add_to_review_set_operation, ediscovery_case, ediscovery_case_settings, ediscovery_custodian, ediscovery_estimate_operation, ediscovery_export_operation, ediscovery_file, ediscovery_hold_operation, ediscovery_hold_policy, ediscovery_index_operation, ediscovery_noncustodial_data_source, ediscovery_purge_data_operation, ediscovery_review_set, ediscovery_review_set_query, ediscovery_review_tag, ediscovery_search, ediscovery_tag_operation, email_content_threat_submission, email_threat_submission, email_threat_submission_policy, email_url_threat_submission, file, file_content_threat_submission, file_threat_submission, file_url_threat_submission, host, hostname, host_component, host_cookie, host_reputation, host_tracker, incident, indicator, information_protection, information_protection_policy_setting, intelligence_profile, intelligence_profile_indicator, ip_address, labels_root, passive_dns_record, policy_base, retention_event, retention_event_type, retention_label, search, security, sensitivity_label, site_source, tag, threat_intelligence, threat_submission, threat_submission_root, triggers_root, trigger_types_root, unclassified_artifact, unified_group_source, url_threat_submission, user_source, vulnerability, vulnerability_component
    from .tenant_admin import settings, sharepoint
    from .term_store import group, relation, set, store, term
    from .windows_updates import azure_a_d_device, catalog, catalog_entry, compliance_change, content_approval, deployment, deployment_audience, driver_update_catalog_entry, feature_update_catalog_entry, operational_insights_connection, quality_update_catalog_entry, resource_connection, software_update_catalog_entry, updatable_asset, updatable_asset_group, update_policy

class Entity(AdditionalDataHolder, Parsable):
    def __init__(self,) -> None:
        """
        Instantiates a new entity and sets the default values.
        """
        # Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
        self._additional_data: Dict[str, Any] = {}

        # The unique identifier for an entity. Read-only.
        self._id: Optional[str] = None
        # The OdataType property
        self._odata_type: Optional[str] = None
    
    @property
    def additional_data(self,) -> Dict[str, Any]:
        """
        Gets the additionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
        Returns: Dict[str, Any]
        """
        return self._additional_data
    
    @additional_data.setter
    def additional_data(self,value: Dict[str, Any]) -> None:
        """
        Sets the additionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
        Args:
            value: Value to set for the AdditionalData property.
        """
        self._additional_data = value
    
    @staticmethod
    def create_from_discriminator_value(parse_node: Optional[ParseNode] = None) -> Entity:
        """
        Creates a new instance of the appropriate class based on discriminator value
        Args:
            parseNode: The parse node to use to read the discriminator value and create the object
        Returns: Entity
        """
        if parse_node is None:
            raise Exception("parse_node cannot be undefined")
        mapping_value_node = parse_node.get_child_node("@odata.type")
        if mapping_value_node:
            mapping_value = mapping_value_node.get_str_value()
            if mapping_value == "#microsoft.graph.aadUserConversationMember":
                from . import aad_user_conversation_member

                return aad_user_conversation_member.AadUserConversationMember()
            if mapping_value == "#microsoft.graph.accessPackage":
                from . import access_package

                return access_package.AccessPackage()
            if mapping_value == "#microsoft.graph.accessPackageAssignment":
                from . import access_package_assignment

                return access_package_assignment.AccessPackageAssignment()
            if mapping_value == "#microsoft.graph.accessPackageAssignmentPolicy":
                from . import access_package_assignment_policy

                return access_package_assignment_policy.AccessPackageAssignmentPolicy()
            if mapping_value == "#microsoft.graph.accessPackageAssignmentRequest":
                from . import access_package_assignment_request

                return access_package_assignment_request.AccessPackageAssignmentRequest()
            if mapping_value == "#microsoft.graph.accessPackageAssignmentRequestWorkflowExtension":
                from . import access_package_assignment_request_workflow_extension

                return access_package_assignment_request_workflow_extension.AccessPackageAssignmentRequestWorkflowExtension()
            if mapping_value == "#microsoft.graph.accessPackageAssignmentResourceRole":
                from . import access_package_assignment_resource_role

                return access_package_assignment_resource_role.AccessPackageAssignmentResourceRole()
            if mapping_value == "#microsoft.graph.accessPackageAssignmentWorkflowExtension":
                from . import access_package_assignment_workflow_extension

                return access_package_assignment_workflow_extension.AccessPackageAssignmentWorkflowExtension()
            if mapping_value == "#microsoft.graph.accessPackageCatalog":
                from . import access_package_catalog

                return access_package_catalog.AccessPackageCatalog()
            if mapping_value == "#microsoft.graph.accessPackageResource":
                from . import access_package_resource

                return access_package_resource.AccessPackageResource()
            if mapping_value == "#microsoft.graph.accessPackageResourceEnvironment":
                from . import access_package_resource_environment

                return access_package_resource_environment.AccessPackageResourceEnvironment()
            if mapping_value == "#microsoft.graph.accessPackageResourceRequest":
                from . import access_package_resource_request

                return access_package_resource_request.AccessPackageResourceRequest()
            if mapping_value == "#microsoft.graph.accessPackageResourceRole":
                from . import access_package_resource_role

                return access_package_resource_role.AccessPackageResourceRole()
            if mapping_value == "#microsoft.graph.accessPackageResourceRoleScope":
                from . import access_package_resource_role_scope

                return access_package_resource_role_scope.AccessPackageResourceRoleScope()
            if mapping_value == "#microsoft.graph.accessPackageResourceScope":
                from . import access_package_resource_scope

                return access_package_resource_scope.AccessPackageResourceScope()
            if mapping_value == "#microsoft.graph.accessPackageSubject":
                from . import access_package_subject

                return access_package_subject.AccessPackageSubject()
            if mapping_value == "#microsoft.graph.accessReview":
                from . import access_review

                return access_review.AccessReview()
            if mapping_value == "#microsoft.graph.accessReviewDecision":
                from . import access_review_decision

                return access_review_decision.AccessReviewDecision()
            if mapping_value == "#microsoft.graph.accessReviewHistoryDefinition":
                from . import access_review_history_definition

                return access_review_history_definition.AccessReviewHistoryDefinition()
            if mapping_value == "#microsoft.graph.accessReviewHistoryInstance":
                from . import access_review_history_instance

                return access_review_history_instance.AccessReviewHistoryInstance()
            if mapping_value == "#microsoft.graph.accessReviewInstance":
                from . import access_review_instance

                return access_review_instance.AccessReviewInstance()
            if mapping_value == "#microsoft.graph.accessReviewInstanceDecisionItem":
                from . import access_review_instance_decision_item

                return access_review_instance_decision_item.AccessReviewInstanceDecisionItem()
            if mapping_value == "#microsoft.graph.accessReviewPolicy":
                from . import access_review_policy

                return access_review_policy.AccessReviewPolicy()
            if mapping_value == "#microsoft.graph.accessReviewReviewer":
                from . import access_review_reviewer

                return access_review_reviewer.AccessReviewReviewer()
            if mapping_value == "#microsoft.graph.accessReviewScheduleDefinition":
                from . import access_review_schedule_definition

                return access_review_schedule_definition.AccessReviewScheduleDefinition()
            if mapping_value == "#microsoft.graph.accessReviewSet":
                from . import access_review_set

                return access_review_set.AccessReviewSet()
            if mapping_value == "#microsoft.graph.accessReviewStage":
                from . import access_review_stage

                return access_review_stage.AccessReviewStage()
            if mapping_value == "#microsoft.graph.account":
                from . import account

                return account.Account()
            if mapping_value == "#microsoft.graph.activeDirectoryWindowsAutopilotDeploymentProfile":
                from . import active_directory_windows_autopilot_deployment_profile

                return active_directory_windows_autopilot_deployment_profile.ActiveDirectoryWindowsAutopilotDeploymentProfile()
            if mapping_value == "#microsoft.graph.activityBasedTimeoutPolicy":
                from . import activity_based_timeout_policy

                return activity_based_timeout_policy.ActivityBasedTimeoutPolicy()
            if mapping_value == "#microsoft.graph.activityHistoryItem":
                from . import activity_history_item

                return activity_history_item.ActivityHistoryItem()
            if mapping_value == "#microsoft.graph.activityStatistics":
                from . import activity_statistics

                return activity_statistics.ActivityStatistics()
            if mapping_value == "#microsoft.graph.addLargeGalleryViewOperation":
                from . import add_large_gallery_view_operation

                return add_large_gallery_view_operation.AddLargeGalleryViewOperation()
            if mapping_value == "#microsoft.graph.adminConsentRequestPolicy":
                from . import admin_consent_request_policy

                return admin_consent_request_policy.AdminConsentRequestPolicy()
            if mapping_value == "#microsoft.graph.administrativeUnit":
                from . import administrative_unit

                return administrative_unit.AdministrativeUnit()
            if mapping_value == "#microsoft.graph.adminReportSettings":
                from . import admin_report_settings

                return admin_report_settings.AdminReportSettings()
            if mapping_value == "#microsoft.graph.adminWindows":
                from . import admin_windows

                return admin_windows.AdminWindows()
            if mapping_value == "#microsoft.graph.adminWindowsUpdates":
                from . import admin_windows_updates

                return admin_windows_updates.AdminWindowsUpdates()
            if mapping_value == "#microsoft.graph.advancedThreatProtectionOnboardingDeviceSettingState":
                from . import advanced_threat_protection_onboarding_device_setting_state

                return advanced_threat_protection_onboarding_device_setting_state.AdvancedThreatProtectionOnboardingDeviceSettingState()
            if mapping_value == "#microsoft.graph.advancedThreatProtectionOnboardingStateSummary":
                from . import advanced_threat_protection_onboarding_state_summary

                return advanced_threat_protection_onboarding_state_summary.AdvancedThreatProtectionOnboardingStateSummary()
            if mapping_value == "#microsoft.graph.agedAccountsPayable":
                from . import aged_accounts_payable

                return aged_accounts_payable.AgedAccountsPayable()
            if mapping_value == "#microsoft.graph.agedAccountsReceivable":
                from . import aged_accounts_receivable

                return aged_accounts_receivable.AgedAccountsReceivable()
            if mapping_value == "#microsoft.graph.agreement":
                from . import agreement

                return agreement.Agreement()
            if mapping_value == "#microsoft.graph.agreementAcceptance":
                from . import agreement_acceptance

                return agreement_acceptance.AgreementAcceptance()
            if mapping_value == "#microsoft.graph.agreementFile":
                from . import agreement_file

                return agreement_file.AgreementFile()
            if mapping_value == "#microsoft.graph.agreementFileLocalization":
                from . import agreement_file_localization

                return agreement_file_localization.AgreementFileLocalization()
            if mapping_value == "#microsoft.graph.agreementFileProperties":
                from . import agreement_file_properties

                return agreement_file_properties.AgreementFileProperties()
            if mapping_value == "#microsoft.graph.agreementFileVersion":
                from . import agreement_file_version

                return agreement_file_version.AgreementFileVersion()
            if mapping_value == "#microsoft.graph.alert":
                from . import alert
                from .security import alert

                return alert.Alert()
            if mapping_value == "#microsoft.graph.allowedDataLocation":
                from . import allowed_data_location

                return allowed_data_location.AllowedDataLocation()
            if mapping_value == "#microsoft.graph.allowedValue":
                from . import allowed_value

                return allowed_value.AllowedValue()
            if mapping_value == "#microsoft.graph.androidCertificateProfileBase":
                from . import android_certificate_profile_base

                return android_certificate_profile_base.AndroidCertificateProfileBase()
            if mapping_value == "#microsoft.graph.androidCompliancePolicy":
                from . import android_compliance_policy

                return android_compliance_policy.AndroidCompliancePolicy()
            if mapping_value == "#microsoft.graph.androidCustomConfiguration":
                from . import android_custom_configuration

                return android_custom_configuration.AndroidCustomConfiguration()
            if mapping_value == "#microsoft.graph.androidDeviceComplianceLocalActionBase":
                from . import android_device_compliance_local_action_base

                return android_device_compliance_local_action_base.AndroidDeviceComplianceLocalActionBase()
            if mapping_value == "#microsoft.graph.androidDeviceComplianceLocalActionLockDevice":
                from . import android_device_compliance_local_action_lock_device

                return android_device_compliance_local_action_lock_device.AndroidDeviceComplianceLocalActionLockDevice()
            if mapping_value == "#microsoft.graph.androidDeviceComplianceLocalActionLockDeviceWithPasscode":
                from . import android_device_compliance_local_action_lock_device_with_passcode

                return android_device_compliance_local_action_lock_device_with_passcode.AndroidDeviceComplianceLocalActionLockDeviceWithPasscode()
            if mapping_value == "#microsoft.graph.androidDeviceOwnerCertificateProfileBase":
                from . import android_device_owner_certificate_profile_base

                return android_device_owner_certificate_profile_base.AndroidDeviceOwnerCertificateProfileBase()
            if mapping_value == "#microsoft.graph.androidDeviceOwnerCompliancePolicy":
                from . import android_device_owner_compliance_policy

                return android_device_owner_compliance_policy.AndroidDeviceOwnerCompliancePolicy()
            if mapping_value == "#microsoft.graph.androidDeviceOwnerDerivedCredentialAuthenticationConfiguration":
                from . import android_device_owner_derived_credential_authentication_configuration

                return android_device_owner_derived_credential_authentication_configuration.AndroidDeviceOwnerDerivedCredentialAuthenticationConfiguration()
            if mapping_value == "#microsoft.graph.androidDeviceOwnerEnrollmentProfile":
                from . import android_device_owner_enrollment_profile

                return android_device_owner_enrollment_profile.AndroidDeviceOwnerEnrollmentProfile()
            if mapping_value == "#microsoft.graph.androidDeviceOwnerEnterpriseWiFiConfiguration":
                from . import android_device_owner_enterprise_wi_fi_configuration

                return android_device_owner_enterprise_wi_fi_configuration.AndroidDeviceOwnerEnterpriseWiFiConfiguration()
            if mapping_value == "#microsoft.graph.androidDeviceOwnerGeneralDeviceConfiguration":
                from . import android_device_owner_general_device_configuration

                return android_device_owner_general_device_configuration.AndroidDeviceOwnerGeneralDeviceConfiguration()
            if mapping_value == "#microsoft.graph.androidDeviceOwnerImportedPFXCertificateProfile":
                from . import android_device_owner_imported_p_f_x_certificate_profile

                return android_device_owner_imported_p_f_x_certificate_profile.AndroidDeviceOwnerImportedPFXCertificateProfile()
            if mapping_value == "#microsoft.graph.androidDeviceOwnerPkcsCertificateProfile":
                from . import android_device_owner_pkcs_certificate_profile

                return android_device_owner_pkcs_certificate_profile.AndroidDeviceOwnerPkcsCertificateProfile()
            if mapping_value == "#microsoft.graph.androidDeviceOwnerScepCertificateProfile":
                from . import android_device_owner_scep_certificate_profile

                return android_device_owner_scep_certificate_profile.AndroidDeviceOwnerScepCertificateProfile()
            if mapping_value == "#microsoft.graph.androidDeviceOwnerTrustedRootCertificate":
                from . import android_device_owner_trusted_root_certificate

                return android_device_owner_trusted_root_certificate.AndroidDeviceOwnerTrustedRootCertificate()
            if mapping_value == "#microsoft.graph.androidDeviceOwnerVpnConfiguration":
                from . import android_device_owner_vpn_configuration

                return android_device_owner_vpn_configuration.AndroidDeviceOwnerVpnConfiguration()
            if mapping_value == "#microsoft.graph.androidDeviceOwnerWiFiConfiguration":
                from . import android_device_owner_wi_fi_configuration

                return android_device_owner_wi_fi_configuration.AndroidDeviceOwnerWiFiConfiguration()
            if mapping_value == "#microsoft.graph.androidEasEmailProfileConfiguration":
                from . import android_eas_email_profile_configuration

                return android_eas_email_profile_configuration.AndroidEasEmailProfileConfiguration()
            if mapping_value == "#microsoft.graph.androidEnterpriseWiFiConfiguration":
                from . import android_enterprise_wi_fi_configuration

                return android_enterprise_wi_fi_configuration.AndroidEnterpriseWiFiConfiguration()
            if mapping_value == "#microsoft.graph.androidForWorkApp":
                from . import android_for_work_app

                return android_for_work_app.AndroidForWorkApp()
            if mapping_value == "#microsoft.graph.androidForWorkAppConfigurationSchema":
                from . import android_for_work_app_configuration_schema

                return android_for_work_app_configuration_schema.AndroidForWorkAppConfigurationSchema()
            if mapping_value == "#microsoft.graph.androidForWorkCertificateProfileBase":
                from . import android_for_work_certificate_profile_base

                return android_for_work_certificate_profile_base.AndroidForWorkCertificateProfileBase()
            if mapping_value == "#microsoft.graph.androidForWorkCompliancePolicy":
                from . import android_for_work_compliance_policy

                return android_for_work_compliance_policy.AndroidForWorkCompliancePolicy()
            if mapping_value == "#microsoft.graph.androidForWorkCustomConfiguration":
                from . import android_for_work_custom_configuration

                return android_for_work_custom_configuration.AndroidForWorkCustomConfiguration()
            if mapping_value == "#microsoft.graph.androidForWorkEasEmailProfileBase":
                from . import android_for_work_eas_email_profile_base

                return android_for_work_eas_email_profile_base.AndroidForWorkEasEmailProfileBase()
            if mapping_value == "#microsoft.graph.androidForWorkEnrollmentProfile":
                from . import android_for_work_enrollment_profile

                return android_for_work_enrollment_profile.AndroidForWorkEnrollmentProfile()
            if mapping_value == "#microsoft.graph.androidForWorkEnterpriseWiFiConfiguration":
                from . import android_for_work_enterprise_wi_fi_configuration

                return android_for_work_enterprise_wi_fi_configuration.AndroidForWorkEnterpriseWiFiConfiguration()
            if mapping_value == "#microsoft.graph.androidForWorkGeneralDeviceConfiguration":
                from . import android_for_work_general_device_configuration

                return android_for_work_general_device_configuration.AndroidForWorkGeneralDeviceConfiguration()
            if mapping_value == "#microsoft.graph.androidForWorkGmailEasConfiguration":
                from . import android_for_work_gmail_eas_configuration

                return android_for_work_gmail_eas_configuration.AndroidForWorkGmailEasConfiguration()
            if mapping_value == "#microsoft.graph.androidForWorkImportedPFXCertificateProfile":
                from . import android_for_work_imported_p_f_x_certificate_profile

                return android_for_work_imported_p_f_x_certificate_profile.AndroidForWorkImportedPFXCertificateProfile()
            if mapping_value == "#microsoft.graph.androidForWorkMobileAppConfiguration":
                from . import android_for_work_mobile_app_configuration

                return android_for_work_mobile_app_configuration.AndroidForWorkMobileAppConfiguration()
            if mapping_value == "#microsoft.graph.androidForWorkNineWorkEasConfiguration":
                from . import android_for_work_nine_work_eas_configuration

                return android_for_work_nine_work_eas_configuration.AndroidForWorkNineWorkEasConfiguration()
            if mapping_value == "#microsoft.graph.androidForWorkPkcsCertificateProfile":
                from . import android_for_work_pkcs_certificate_profile

                return android_for_work_pkcs_certificate_profile.AndroidForWorkPkcsCertificateProfile()
            if mapping_value == "#microsoft.graph.androidForWorkScepCertificateProfile":
                from . import android_for_work_scep_certificate_profile

                return android_for_work_scep_certificate_profile.AndroidForWorkScepCertificateProfile()
            if mapping_value == "#microsoft.graph.androidForWorkSettings":
                from . import android_for_work_settings

                return android_for_work_settings.AndroidForWorkSettings()
            if mapping_value == "#microsoft.graph.androidForWorkTrustedRootCertificate":
                from . import android_for_work_trusted_root_certificate

                return android_for_work_trusted_root_certificate.AndroidForWorkTrustedRootCertificate()
            if mapping_value == "#microsoft.graph.androidForWorkVpnConfiguration":
                from . import android_for_work_vpn_configuration

                return android_for_work_vpn_configuration.AndroidForWorkVpnConfiguration()
            if mapping_value == "#microsoft.graph.androidForWorkWiFiConfiguration":
                from . import android_for_work_wi_fi_configuration

                return android_for_work_wi_fi_configuration.AndroidForWorkWiFiConfiguration()
            if mapping_value == "#microsoft.graph.androidGeneralDeviceConfiguration":
                from . import android_general_device_configuration

                return android_general_device_configuration.AndroidGeneralDeviceConfiguration()
            if mapping_value == "#microsoft.graph.androidImportedPFXCertificateProfile":
                from . import android_imported_p_f_x_certificate_profile

                return android_imported_p_f_x_certificate_profile.AndroidImportedPFXCertificateProfile()
            if mapping_value == "#microsoft.graph.androidLobApp":
                from . import android_lob_app

                return android_lob_app.AndroidLobApp()
            if mapping_value == "#microsoft.graph.androidManagedAppProtection":
                from . import android_managed_app_protection

                return android_managed_app_protection.AndroidManagedAppProtection()
            if mapping_value == "#microsoft.graph.androidManagedAppRegistration":
                from . import android_managed_app_registration

                return android_managed_app_registration.AndroidManagedAppRegistration()
            if mapping_value == "#microsoft.graph.androidManagedStoreAccountEnterpriseSettings":
                from . import android_managed_store_account_enterprise_settings

                return android_managed_store_account_enterprise_settings.AndroidManagedStoreAccountEnterpriseSettings()
            if mapping_value == "#microsoft.graph.androidManagedStoreApp":
                from . import android_managed_store_app

                return android_managed_store_app.AndroidManagedStoreApp()
            if mapping_value == "#microsoft.graph.androidManagedStoreAppConfiguration":
                from . import android_managed_store_app_configuration

                return android_managed_store_app_configuration.AndroidManagedStoreAppConfiguration()
            if mapping_value == "#microsoft.graph.androidManagedStoreAppConfigurationSchema":
                from . import android_managed_store_app_configuration_schema

                return android_managed_store_app_configuration_schema.AndroidManagedStoreAppConfigurationSchema()
            if mapping_value == "#microsoft.graph.androidManagedStoreWebApp":
                from . import android_managed_store_web_app

                return android_managed_store_web_app.AndroidManagedStoreWebApp()
            if mapping_value == "#microsoft.graph.androidOmaCpConfiguration":
                from . import android_oma_cp_configuration

                return android_oma_cp_configuration.AndroidOmaCpConfiguration()
            if mapping_value == "#microsoft.graph.androidPkcsCertificateProfile":
                from . import android_pkcs_certificate_profile

                return android_pkcs_certificate_profile.AndroidPkcsCertificateProfile()
            if mapping_value == "#microsoft.graph.androidScepCertificateProfile":
                from . import android_scep_certificate_profile

                return android_scep_certificate_profile.AndroidScepCertificateProfile()
            if mapping_value == "#microsoft.graph.androidStoreApp":
                from . import android_store_app

                return android_store_app.AndroidStoreApp()
            if mapping_value == "#microsoft.graph.androidTrustedRootCertificate":
                from . import android_trusted_root_certificate

                return android_trusted_root_certificate.AndroidTrustedRootCertificate()
            if mapping_value == "#microsoft.graph.androidVpnConfiguration":
                from . import android_vpn_configuration

                return android_vpn_configuration.AndroidVpnConfiguration()
            if mapping_value == "#microsoft.graph.androidWiFiConfiguration":
                from . import android_wi_fi_configuration

                return android_wi_fi_configuration.AndroidWiFiConfiguration()
            if mapping_value == "#microsoft.graph.androidWorkProfileCertificateProfileBase":
                from . import android_work_profile_certificate_profile_base

                return android_work_profile_certificate_profile_base.AndroidWorkProfileCertificateProfileBase()
            if mapping_value == "#microsoft.graph.androidWorkProfileCompliancePolicy":
                from . import android_work_profile_compliance_policy

                return android_work_profile_compliance_policy.AndroidWorkProfileCompliancePolicy()
            if mapping_value == "#microsoft.graph.androidWorkProfileCustomConfiguration":
                from . import android_work_profile_custom_configuration

                return android_work_profile_custom_configuration.AndroidWorkProfileCustomConfiguration()
            if mapping_value == "#microsoft.graph.androidWorkProfileEasEmailProfileBase":
                from . import android_work_profile_eas_email_profile_base

                return android_work_profile_eas_email_profile_base.AndroidWorkProfileEasEmailProfileBase()
            if mapping_value == "#microsoft.graph.androidWorkProfileEnterpriseWiFiConfiguration":
                from . import android_work_profile_enterprise_wi_fi_configuration

                return android_work_profile_enterprise_wi_fi_configuration.AndroidWorkProfileEnterpriseWiFiConfiguration()
            if mapping_value == "#microsoft.graph.androidWorkProfileGeneralDeviceConfiguration":
                from . import android_work_profile_general_device_configuration

                return android_work_profile_general_device_configuration.AndroidWorkProfileGeneralDeviceConfiguration()
            if mapping_value == "#microsoft.graph.androidWorkProfileGmailEasConfiguration":
                from . import android_work_profile_gmail_eas_configuration

                return android_work_profile_gmail_eas_configuration.AndroidWorkProfileGmailEasConfiguration()
            if mapping_value == "#microsoft.graph.androidWorkProfileNineWorkEasConfiguration":
                from . import android_work_profile_nine_work_eas_configuration

                return android_work_profile_nine_work_eas_configuration.AndroidWorkProfileNineWorkEasConfiguration()
            if mapping_value == "#microsoft.graph.androidWorkProfilePkcsCertificateProfile":
                from . import android_work_profile_pkcs_certificate_profile

                return android_work_profile_pkcs_certificate_profile.AndroidWorkProfilePkcsCertificateProfile()
            if mapping_value == "#microsoft.graph.androidWorkProfileScepCertificateProfile":
                from . import android_work_profile_scep_certificate_profile

                return android_work_profile_scep_certificate_profile.AndroidWorkProfileScepCertificateProfile()
            if mapping_value == "#microsoft.graph.androidWorkProfileTrustedRootCertificate":
                from . import android_work_profile_trusted_root_certificate

                return android_work_profile_trusted_root_certificate.AndroidWorkProfileTrustedRootCertificate()
            if mapping_value == "#microsoft.graph.androidWorkProfileVpnConfiguration":
                from . import android_work_profile_vpn_configuration

                return android_work_profile_vpn_configuration.AndroidWorkProfileVpnConfiguration()
            if mapping_value == "#microsoft.graph.androidWorkProfileWiFiConfiguration":
                from . import android_work_profile_wi_fi_configuration

                return android_work_profile_wi_fi_configuration.AndroidWorkProfileWiFiConfiguration()
            if mapping_value == "#microsoft.graph.anonymousGuestConversationMember":
                from . import anonymous_guest_conversation_member

                return anonymous_guest_conversation_member.AnonymousGuestConversationMember()
            if mapping_value == "#microsoft.graph.aospDeviceOwnerCertificateProfileBase":
                from . import aosp_device_owner_certificate_profile_base

                return aosp_device_owner_certificate_profile_base.AospDeviceOwnerCertificateProfileBase()
            if mapping_value == "#microsoft.graph.aospDeviceOwnerCompliancePolicy":
                from . import aosp_device_owner_compliance_policy

                return aosp_device_owner_compliance_policy.AospDeviceOwnerCompliancePolicy()
            if mapping_value == "#microsoft.graph.aospDeviceOwnerDeviceConfiguration":
                from . import aosp_device_owner_device_configuration

                return aosp_device_owner_device_configuration.AospDeviceOwnerDeviceConfiguration()
            if mapping_value == "#microsoft.graph.aospDeviceOwnerEnterpriseWiFiConfiguration":
                from . import aosp_device_owner_enterprise_wi_fi_configuration

                return aosp_device_owner_enterprise_wi_fi_configuration.AospDeviceOwnerEnterpriseWiFiConfiguration()
            if mapping_value == "#microsoft.graph.aospDeviceOwnerPkcsCertificateProfile":
                from . import aosp_device_owner_pkcs_certificate_profile

                return aosp_device_owner_pkcs_certificate_profile.AospDeviceOwnerPkcsCertificateProfile()
            if mapping_value == "#microsoft.graph.aospDeviceOwnerScepCertificateProfile":
                from . import aosp_device_owner_scep_certificate_profile

                return aosp_device_owner_scep_certificate_profile.AospDeviceOwnerScepCertificateProfile()
            if mapping_value == "#microsoft.graph.aospDeviceOwnerTrustedRootCertificate":
                from . import aosp_device_owner_trusted_root_certificate

                return aosp_device_owner_trusted_root_certificate.AospDeviceOwnerTrustedRootCertificate()
            if mapping_value == "#microsoft.graph.aospDeviceOwnerWiFiConfiguration":
                from . import aosp_device_owner_wi_fi_configuration

                return aosp_device_owner_wi_fi_configuration.AospDeviceOwnerWiFiConfiguration()
            if mapping_value == "#microsoft.graph.appConsentApprovalRoute":
                from . import app_consent_approval_route

                return app_consent_approval_route.AppConsentApprovalRoute()
            if mapping_value == "#microsoft.graph.appConsentRequest":
                from . import app_consent_request

                return app_consent_request.AppConsentRequest()
            if mapping_value == "#microsoft.graph.appleDeviceFeaturesConfigurationBase":
                from . import apple_device_features_configuration_base

                return apple_device_features_configuration_base.AppleDeviceFeaturesConfigurationBase()
            if mapping_value == "#microsoft.graph.appleEnrollmentProfileAssignment":
                from . import apple_enrollment_profile_assignment

                return apple_enrollment_profile_assignment.AppleEnrollmentProfileAssignment()
            if mapping_value == "#microsoft.graph.appleExpeditedCheckinConfigurationBase":
                from . import apple_expedited_checkin_configuration_base

                return apple_expedited_checkin_configuration_base.AppleExpeditedCheckinConfigurationBase()
            if mapping_value == "#microsoft.graph.appleManagedIdentityProvider":
                from . import apple_managed_identity_provider

                return apple_managed_identity_provider.AppleManagedIdentityProvider()
            if mapping_value == "#microsoft.graph.applePushNotificationCertificate":
                from . import apple_push_notification_certificate

                return apple_push_notification_certificate.ApplePushNotificationCertificate()
            if mapping_value == "#microsoft.graph.appleUserInitiatedEnrollmentProfile":
                from . import apple_user_initiated_enrollment_profile

                return apple_user_initiated_enrollment_profile.AppleUserInitiatedEnrollmentProfile()
            if mapping_value == "#microsoft.graph.appleVpnConfiguration":
                from . import apple_vpn_configuration

                return apple_vpn_configuration.AppleVpnConfiguration()
            if mapping_value == "#microsoft.graph.appleVppTokenTroubleshootingEvent":
                from . import apple_vpp_token_troubleshooting_event

                return apple_vpp_token_troubleshooting_event.AppleVppTokenTroubleshootingEvent()
            if mapping_value == "#microsoft.graph.application":
                from . import application

                return application.Application()
            if mapping_value == "#microsoft.graph.applicationSegment":
                from . import application_segment

                return application_segment.ApplicationSegment()
            if mapping_value == "#microsoft.graph.applicationSignInDetailedSummary":
                from . import application_sign_in_detailed_summary

                return application_sign_in_detailed_summary.ApplicationSignInDetailedSummary()
            if mapping_value == "#microsoft.graph.applicationSignInSummary":
                from . import application_sign_in_summary

                return application_sign_in_summary.ApplicationSignInSummary()
            if mapping_value == "#microsoft.graph.applicationTemplate":
                from . import application_template

                return application_template.ApplicationTemplate()
            if mapping_value == "#microsoft.graph.appLogCollectionRequest":
                from . import app_log_collection_request

                return app_log_collection_request.AppLogCollectionRequest()
            if mapping_value == "#microsoft.graph.appManagementPolicy":
                from . import app_management_policy

                return app_management_policy.AppManagementPolicy()
            if mapping_value == "#microsoft.graph.appRoleAssignment":
                from . import app_role_assignment

                return app_role_assignment.AppRoleAssignment()
            if mapping_value == "#microsoft.graph.approval":
                from . import approval

                return approval.Approval()
            if mapping_value == "#microsoft.graph.approvalStep":
                from . import approval_step

                return approval_step.ApprovalStep()
            if mapping_value == "#microsoft.graph.approvalWorkflowProvider":
                from . import approval_workflow_provider

                return approval_workflow_provider.ApprovalWorkflowProvider()
            if mapping_value == "#microsoft.graph.appScope":
                from . import app_scope

                return app_scope.AppScope()
            if mapping_value == "#microsoft.graph.appVulnerabilityManagedDevice":
                from . import app_vulnerability_managed_device

                return app_vulnerability_managed_device.AppVulnerabilityManagedDevice()
            if mapping_value == "#microsoft.graph.appVulnerabilityMobileApp":
                from . import app_vulnerability_mobile_app

                return app_vulnerability_mobile_app.AppVulnerabilityMobileApp()
            if mapping_value == "#microsoft.graph.appVulnerabilityTask":
                from . import app_vulnerability_task

                return app_vulnerability_task.AppVulnerabilityTask()
            if mapping_value == "#microsoft.graph.assignmentFilterEvaluationStatusDetails":
                from . import assignment_filter_evaluation_status_details

                return assignment_filter_evaluation_status_details.AssignmentFilterEvaluationStatusDetails()
            if mapping_value == "#microsoft.graph.associatedTeamInfo":
                from . import associated_team_info

                return associated_team_info.AssociatedTeamInfo()
            if mapping_value == "#microsoft.graph.attachment":
                from . import attachment

                return attachment.Attachment()
            if mapping_value == "#microsoft.graph.attachmentBase":
                from . import attachment_base

                return attachment_base.AttachmentBase()
            if mapping_value == "#microsoft.graph.attachmentSession":
                from . import attachment_session

                return attachment_session.AttachmentSession()
            if mapping_value == "#microsoft.graph.attackSimulationOperation":
                from . import attack_simulation_operation

                return attack_simulation_operation.AttackSimulationOperation()
            if mapping_value == "#microsoft.graph.attackSimulationRoot":
                from . import attack_simulation_root

                return attack_simulation_root.AttackSimulationRoot()
            if mapping_value == "#microsoft.graph.attendanceRecord":
                from . import attendance_record

                return attendance_record.AttendanceRecord()
            if mapping_value == "#microsoft.graph.attributeMappingFunctionSchema":
                from . import attribute_mapping_function_schema

                return attribute_mapping_function_schema.AttributeMappingFunctionSchema()
            if mapping_value == "#microsoft.graph.attributeSet":
                from . import attribute_set

                return attribute_set.AttributeSet()
            if mapping_value == "#microsoft.graph.audioRoutingGroup":
                from . import audio_routing_group

                return audio_routing_group.AudioRoutingGroup()
            if mapping_value == "#microsoft.graph.auditEvent":
                from . import audit_event
                from .managed_tenants import audit_event

                return audit_event.AuditEvent()
            if mapping_value == "#microsoft.graph.authentication":
                from . import authentication

                return authentication.Authentication()
            if mapping_value == "#microsoft.graph.authenticationCombinationConfiguration":
                from . import authentication_combination_configuration

                return authentication_combination_configuration.AuthenticationCombinationConfiguration()
            if mapping_value == "#microsoft.graph.authenticationContextClassReference":
                from . import authentication_context_class_reference

                return authentication_context_class_reference.AuthenticationContextClassReference()
            if mapping_value == "#microsoft.graph.authenticationEventListener":
                from . import authentication_event_listener

                return authentication_event_listener.AuthenticationEventListener()
            if mapping_value == "#microsoft.graph.authenticationEventsPolicy":
                from . import authentication_events_policy

                return authentication_events_policy.AuthenticationEventsPolicy()
            if mapping_value == "#microsoft.graph.authenticationFlowsPolicy":
                from . import authentication_flows_policy

                return authentication_flows_policy.AuthenticationFlowsPolicy()
            if mapping_value == "#microsoft.graph.authenticationListener":
                from . import authentication_listener

                return authentication_listener.AuthenticationListener()
            if mapping_value == "#microsoft.graph.authenticationMethod":
                from . import authentication_method

                return authentication_method.AuthenticationMethod()
            if mapping_value == "#microsoft.graph.authenticationMethodConfiguration":
                from . import authentication_method_configuration

                return authentication_method_configuration.AuthenticationMethodConfiguration()
            if mapping_value == "#microsoft.graph.authenticationMethodModeDetail":
                from . import authentication_method_mode_detail

                return authentication_method_mode_detail.AuthenticationMethodModeDetail()
            if mapping_value == "#microsoft.graph.authenticationMethodsPolicy":
                from . import authentication_methods_policy

                return authentication_methods_policy.AuthenticationMethodsPolicy()
            if mapping_value == "#microsoft.graph.authenticationMethodsRoot":
                from . import authentication_methods_root

                return authentication_methods_root.AuthenticationMethodsRoot()
            if mapping_value == "#microsoft.graph.authenticationMethodTarget":
                from . import authentication_method_target

                return authentication_method_target.AuthenticationMethodTarget()
            if mapping_value == "#microsoft.graph.authenticationStrengthPolicy":
                from . import authentication_strength_policy

                return authentication_strength_policy.AuthenticationStrengthPolicy()
            if mapping_value == "#microsoft.graph.authenticationStrengthRoot":
                from . import authentication_strength_root

                return authentication_strength_root.AuthenticationStrengthRoot()
            if mapping_value == "#microsoft.graph.authoredNote":
                from . import authored_note

                return authored_note.AuthoredNote()
            if mapping_value == "#microsoft.graph.authorizationPolicy":
                from . import authorization_policy

                return authorization_policy.AuthorizationPolicy()
            if mapping_value == "#microsoft.graph.azureADWindowsAutopilotDeploymentProfile":
                from . import azure_a_d_windows_autopilot_deployment_profile

                return azure_a_d_windows_autopilot_deployment_profile.AzureADWindowsAutopilotDeploymentProfile()
            if mapping_value == "#microsoft.graph.azureCommunicationServicesUserConversationMember":
                from . import azure_communication_services_user_conversation_member

                return azure_communication_services_user_conversation_member.AzureCommunicationServicesUserConversationMember()
            if mapping_value == "#microsoft.graph.b2cAuthenticationMethodsPolicy":
                from . import b2c_authentication_methods_policy

                return b2c_authentication_methods_policy.B2cAuthenticationMethodsPolicy()
            if mapping_value == "#microsoft.graph.b2cIdentityUserFlow":
                from . import b2c_identity_user_flow

                return b2c_identity_user_flow.B2cIdentityUserFlow()
            if mapping_value == "#microsoft.graph.b2xIdentityUserFlow":
                from . import b2x_identity_user_flow

                return b2x_identity_user_flow.B2xIdentityUserFlow()
            if mapping_value == "#microsoft.graph.baseItem":
                from . import base_item

                return base_item.BaseItem()
            if mapping_value == "#microsoft.graph.baseItemVersion":
                from . import base_item_version

                return base_item_version.BaseItemVersion()
            if mapping_value == "#microsoft.graph.bitlocker":
                from . import bitlocker

                return bitlocker.Bitlocker()
            if mapping_value == "#microsoft.graph.bitlockerRecoveryKey":
                from . import bitlocker_recovery_key

                return bitlocker_recovery_key.BitlockerRecoveryKey()
            if mapping_value == "#microsoft.graph.bookingAppointment":
                from . import booking_appointment

                return booking_appointment.BookingAppointment()
            if mapping_value == "#microsoft.graph.bookingBusiness":
                from . import booking_business

                return booking_business.BookingBusiness()
            if mapping_value == "#microsoft.graph.bookingCurrency":
                from . import booking_currency

                return booking_currency.BookingCurrency()
            if mapping_value == "#microsoft.graph.bookingCustomer":
                from . import booking_customer

                return booking_customer.BookingCustomer()
            if mapping_value == "#microsoft.graph.bookingCustomQuestion":
                from . import booking_custom_question

                return booking_custom_question.BookingCustomQuestion()
            if mapping_value == "#microsoft.graph.bookingNamedEntity":
                from . import booking_named_entity

                return booking_named_entity.BookingNamedEntity()
            if mapping_value == "#microsoft.graph.bookingPerson":
                from . import booking_person

                return booking_person.BookingPerson()
            if mapping_value == "#microsoft.graph.bookingService":
                from . import booking_service

                return booking_service.BookingService()
            if mapping_value == "#microsoft.graph.bookingStaffMember":
                from . import booking_staff_member

                return booking_staff_member.BookingStaffMember()
            if mapping_value == "#microsoft.graph.browserSharedCookie":
                from . import browser_shared_cookie

                return browser_shared_cookie.BrowserSharedCookie()
            if mapping_value == "#microsoft.graph.browserSite":
                from . import browser_site

                return browser_site.BrowserSite()
            if mapping_value == "#microsoft.graph.browserSiteList":
                from . import browser_site_list

                return browser_site_list.BrowserSiteList()
            if mapping_value == "#microsoft.graph.builtInIdentityProvider":
                from . import built_in_identity_provider

                return built_in_identity_provider.BuiltInIdentityProvider()
            if mapping_value == "#microsoft.graph.businessFlow":
                from . import business_flow

                return business_flow.BusinessFlow()
            if mapping_value == "#microsoft.graph.businessFlowTemplate":
                from . import business_flow_template

                return business_flow_template.BusinessFlowTemplate()
            if mapping_value == "#microsoft.graph.businessScenario":
                from . import business_scenario

                return business_scenario.BusinessScenario()
            if mapping_value == "#microsoft.graph.businessScenarioPlanner":
                from . import business_scenario_planner

                return business_scenario_planner.BusinessScenarioPlanner()
            if mapping_value == "#microsoft.graph.businessScenarioPlanReference":
                from . import business_scenario_plan_reference

                return business_scenario_plan_reference.BusinessScenarioPlanReference()
            if mapping_value == "#microsoft.graph.businessScenarioTask":
                from . import business_scenario_task

                return business_scenario_task.BusinessScenarioTask()
            if mapping_value == "#microsoft.graph.calendar":
                from . import calendar

                return calendar.Calendar()
            if mapping_value == "#microsoft.graph.calendarGroup":
                from . import calendar_group

                return calendar_group.CalendarGroup()
            if mapping_value == "#microsoft.graph.calendarPermission":
                from . import calendar_permission

                return calendar_permission.CalendarPermission()
            if mapping_value == "#microsoft.graph.calendarSharingMessage":
                from . import calendar_sharing_message

                return calendar_sharing_message.CalendarSharingMessage()
            if mapping_value == "#microsoft.graph.call":
                from . import call

                return call.Call()
            if mapping_value == "#microsoft.graph.callActivityStatistics":
                from . import call_activity_statistics

                return call_activity_statistics.CallActivityStatistics()
            if mapping_value == "#microsoft.graph.callRecords.callRecord":
                from .call_records import call_record

                return call_record.CallRecord()
            if mapping_value == "#microsoft.graph.callRecords.segment":
                from .call_records import segment

                return segment.Segment()
            if mapping_value == "#microsoft.graph.callRecords.session":
                from .call_records import session

                return session.Session()
            if mapping_value == "#microsoft.graph.callTranscript":
                from . import call_transcript

                return call_transcript.CallTranscript()
            if mapping_value == "#microsoft.graph.cancelMediaProcessingOperation":
                from . import cancel_media_processing_operation

                return cancel_media_processing_operation.CancelMediaProcessingOperation()
            if mapping_value == "#microsoft.graph.canvasLayout":
                from . import canvas_layout

                return canvas_layout.CanvasLayout()
            if mapping_value == "#microsoft.graph.cartToClassAssociation":
                from . import cart_to_class_association

                return cart_to_class_association.CartToClassAssociation()
            if mapping_value == "#microsoft.graph.certificateBasedAuthConfiguration":
                from . import certificate_based_auth_configuration

                return certificate_based_auth_configuration.CertificateBasedAuthConfiguration()
            if mapping_value == "#microsoft.graph.certificateConnectorDetails":
                from . import certificate_connector_details

                return certificate_connector_details.CertificateConnectorDetails()
            if mapping_value == "#microsoft.graph.changeTrackedEntity":
                from . import change_tracked_entity

                return change_tracked_entity.ChangeTrackedEntity()
            if mapping_value == "#microsoft.graph.channel":
                from . import channel

                return channel.Channel()
            if mapping_value == "#microsoft.graph.chat":
                from . import chat

                return chat.Chat()
            if mapping_value == "#microsoft.graph.chatActivityStatistics":
                from . import chat_activity_statistics

                return chat_activity_statistics.ChatActivityStatistics()
            if mapping_value == "#microsoft.graph.chatMessage":
                from . import chat_message

                return chat_message.ChatMessage()
            if mapping_value == "#microsoft.graph.chatMessageHostedContent":
                from . import chat_message_hosted_content

                return chat_message_hosted_content.ChatMessageHostedContent()
            if mapping_value == "#microsoft.graph.chatMessageInfo":
                from . import chat_message_info

                return chat_message_info.ChatMessageInfo()
            if mapping_value == "#microsoft.graph.checklistItem":
                from . import checklist_item

                return checklist_item.ChecklistItem()
            if mapping_value == "#microsoft.graph.chromeOSOnboardingSettings":
                from . import chrome_o_s_onboarding_settings

                return chrome_o_s_onboarding_settings.ChromeOSOnboardingSettings()
            if mapping_value == "#microsoft.graph.claimsMappingPolicy":
                from . import claims_mapping_policy

                return claims_mapping_policy.ClaimsMappingPolicy()
            if mapping_value == "#microsoft.graph.classificationJobResponse":
                from . import classification_job_response

                return classification_job_response.ClassificationJobResponse()
            if mapping_value == "#microsoft.graph.cloudAppSecurityProfile":
                from . import cloud_app_security_profile

                return cloud_app_security_profile.CloudAppSecurityProfile()
            if mapping_value == "#microsoft.graph.cloudCommunications":
                from . import cloud_communications

                return cloud_communications.CloudCommunications()
            if mapping_value == "#microsoft.graph.cloudPC":
                from . import cloud_p_c

                return cloud_p_c.CloudPC()
            if mapping_value == "#microsoft.graph.cloudPcAuditEvent":
                from . import cloud_pc_audit_event

                return cloud_pc_audit_event.CloudPcAuditEvent()
            if mapping_value == "#microsoft.graph.cloudPCConnectivityIssue":
                from . import cloud_p_c_connectivity_issue

                return cloud_p_c_connectivity_issue.CloudPCConnectivityIssue()
            if mapping_value == "#microsoft.graph.cloudPcCrossCloudGovernmentOrganizationMapping":
                from . import cloud_pc_cross_cloud_government_organization_mapping

                return cloud_pc_cross_cloud_government_organization_mapping.CloudPcCrossCloudGovernmentOrganizationMapping()
            if mapping_value == "#microsoft.graph.cloudPcDeviceImage":
                from . import cloud_pc_device_image

                return cloud_pc_device_image.CloudPcDeviceImage()
            if mapping_value == "#microsoft.graph.cloudPcExportJob":
                from . import cloud_pc_export_job

                return cloud_pc_export_job.CloudPcExportJob()
            if mapping_value == "#microsoft.graph.cloudPcExternalPartnerSetting":
                from . import cloud_pc_external_partner_setting

                return cloud_pc_external_partner_setting.CloudPcExternalPartnerSetting()
            if mapping_value == "#microsoft.graph.cloudPcGalleryImage":
                from . import cloud_pc_gallery_image

                return cloud_pc_gallery_image.CloudPcGalleryImage()
            if mapping_value == "#microsoft.graph.cloudPcOnPremisesConnection":
                from . import cloud_pc_on_premises_connection

                return cloud_pc_on_premises_connection.CloudPcOnPremisesConnection()
            if mapping_value == "#microsoft.graph.cloudPcOrganizationSettings":
                from . import cloud_pc_organization_settings

                return cloud_pc_organization_settings.CloudPcOrganizationSettings()
            if mapping_value == "#microsoft.graph.cloudPcProvisioningPolicy":
                from . import cloud_pc_provisioning_policy

                return cloud_pc_provisioning_policy.CloudPcProvisioningPolicy()
            if mapping_value == "#microsoft.graph.cloudPcProvisioningPolicyAssignment":
                from . import cloud_pc_provisioning_policy_assignment

                return cloud_pc_provisioning_policy_assignment.CloudPcProvisioningPolicyAssignment()
            if mapping_value == "#microsoft.graph.cloudPcReports":
                from . import cloud_pc_reports

                return cloud_pc_reports.CloudPcReports()
            if mapping_value == "#microsoft.graph.cloudPcServicePlan":
                from . import cloud_pc_service_plan

                return cloud_pc_service_plan.CloudPcServicePlan()
            if mapping_value == "#microsoft.graph.cloudPcSharedUseServicePlan":
                from . import cloud_pc_shared_use_service_plan

                return cloud_pc_shared_use_service_plan.CloudPcSharedUseServicePlan()
            if mapping_value == "#microsoft.graph.cloudPcSnapshot":
                from . import cloud_pc_snapshot

                return cloud_pc_snapshot.CloudPcSnapshot()
            if mapping_value == "#microsoft.graph.cloudPcSupportedRegion":
                from . import cloud_pc_supported_region

                return cloud_pc_supported_region.CloudPcSupportedRegion()
            if mapping_value == "#microsoft.graph.cloudPcUserSetting":
                from . import cloud_pc_user_setting

                return cloud_pc_user_setting.CloudPcUserSetting()
            if mapping_value == "#microsoft.graph.cloudPcUserSettingAssignment":
                from . import cloud_pc_user_setting_assignment

                return cloud_pc_user_setting_assignment.CloudPcUserSettingAssignment()
            if mapping_value == "#microsoft.graph.columnDefinition":
                from . import column_definition

                return column_definition.ColumnDefinition()
            if mapping_value == "#microsoft.graph.columnLink":
                from . import column_link

                return column_link.ColumnLink()
            if mapping_value == "#microsoft.graph.comanagementEligibleDevice":
                from . import comanagement_eligible_device

                return comanagement_eligible_device.ComanagementEligibleDevice()
            if mapping_value == "#microsoft.graph.command":
                from . import command

                return command.Command()
            if mapping_value == "#microsoft.graph.commsOperation":
                from . import comms_operation

                return comms_operation.CommsOperation()
            if mapping_value == "#microsoft.graph.company":
                from . import company

                return company.Company()
            if mapping_value == "#microsoft.graph.companyInformation":
                from . import company_information

                return company_information.CompanyInformation()
            if mapping_value == "#microsoft.graph.complianceManagementPartner":
                from . import compliance_management_partner

                return compliance_management_partner.ComplianceManagementPartner()
            if mapping_value == "#microsoft.graph.conditionalAccessPolicy":
                from . import conditional_access_policy

                return conditional_access_policy.ConditionalAccessPolicy()
            if mapping_value == "#microsoft.graph.conditionalAccessRoot":
                from . import conditional_access_root

                return conditional_access_root.ConditionalAccessRoot()
            if mapping_value == "#microsoft.graph.conditionalAccessTemplate":
                from . import conditional_access_template

                return conditional_access_template.ConditionalAccessTemplate()
            if mapping_value == "#microsoft.graph.configManagerCollection":
                from . import config_manager_collection

                return config_manager_collection.ConfigManagerCollection()
            if mapping_value == "#microsoft.graph.connectedOrganization":
                from . import connected_organization

                return connected_organization.ConnectedOrganization()
            if mapping_value == "#microsoft.graph.connectionOperation":
                from . import connection_operation
                from .external_connectors import connection_operation

                return connection_operation.ConnectionOperation()
            if mapping_value == "#microsoft.graph.connector":
                from . import connector

                return connector.Connector()
            if mapping_value == "#microsoft.graph.connectorGroup":
                from . import connector_group

                return connector_group.ConnectorGroup()
            if mapping_value == "#microsoft.graph.contact":
                from . import contact

                return contact.Contact()
            if mapping_value == "#microsoft.graph.contactFolder":
                from . import contact_folder

                return contact_folder.ContactFolder()
            if mapping_value == "#microsoft.graph.contactMergeSuggestions":
                from . import contact_merge_suggestions

                return contact_merge_suggestions.ContactMergeSuggestions()
            if mapping_value == "#microsoft.graph.contentSharingSession":
                from . import content_sharing_session

                return content_sharing_session.ContentSharingSession()
            if mapping_value == "#microsoft.graph.contentType":
                from . import content_type

                return content_type.ContentType()
            if mapping_value == "#microsoft.graph.continuousAccessEvaluationPolicy":
                from . import continuous_access_evaluation_policy

                return continuous_access_evaluation_policy.ContinuousAccessEvaluationPolicy()
            if mapping_value == "#microsoft.graph.contract":
                from . import contract

                return contract.Contract()
            if mapping_value == "#microsoft.graph.conversation":
                from . import conversation

                return conversation.Conversation()
            if mapping_value == "#microsoft.graph.conversationMember":
                from . import conversation_member

                return conversation_member.ConversationMember()
            if mapping_value == "#microsoft.graph.conversationThread":
                from . import conversation_thread

                return conversation_thread.ConversationThread()
            if mapping_value == "#microsoft.graph.corsConfiguration_v2":
                from . import cors_configuration_v2

                return cors_configuration_v2.CorsConfiguration_v2()
            if mapping_value == "#microsoft.graph.countryNamedLocation":
                from . import country_named_location

                return country_named_location.CountryNamedLocation()
            if mapping_value == "#microsoft.graph.countryRegion":
                from . import country_region

                return country_region.CountryRegion()
            if mapping_value == "#microsoft.graph.credentialUsageSummary":
                from . import credential_usage_summary

                return credential_usage_summary.CredentialUsageSummary()
            if mapping_value == "#microsoft.graph.credentialUserRegistrationCount":
                from . import credential_user_registration_count

                return credential_user_registration_count.CredentialUserRegistrationCount()
            if mapping_value == "#microsoft.graph.credentialUserRegistrationDetails":
                from . import credential_user_registration_details

                return credential_user_registration_details.CredentialUserRegistrationDetails()
            if mapping_value == "#microsoft.graph.crossTenantAccessPolicy":
                from . import cross_tenant_access_policy

                return cross_tenant_access_policy.CrossTenantAccessPolicy()
            if mapping_value == "#microsoft.graph.crossTenantAccessPolicyConfigurationDefault":
                from . import cross_tenant_access_policy_configuration_default

                return cross_tenant_access_policy_configuration_default.CrossTenantAccessPolicyConfigurationDefault()
            if mapping_value == "#microsoft.graph.currency":
                from . import currency

                return currency.Currency()
            if mapping_value == "#microsoft.graph.customAccessPackageWorkflowExtension":
                from . import custom_access_package_workflow_extension

                return custom_access_package_workflow_extension.CustomAccessPackageWorkflowExtension()
            if mapping_value == "#microsoft.graph.customAuthenticationExtension":
                from . import custom_authentication_extension

                return custom_authentication_extension.CustomAuthenticationExtension()
            if mapping_value == "#microsoft.graph.customCalloutExtension":
                from . import custom_callout_extension

                return custom_callout_extension.CustomCalloutExtension()
            if mapping_value == "#microsoft.graph.customer":
                from . import customer

                return customer.Customer()
            if mapping_value == "#microsoft.graph.customerPayment":
                from . import customer_payment

                return customer_payment.CustomerPayment()
            if mapping_value == "#microsoft.graph.customerPaymentJournal":
                from . import customer_payment_journal

                return customer_payment_journal.CustomerPaymentJournal()
            if mapping_value == "#microsoft.graph.customExtensionHandler":
                from . import custom_extension_handler

                return custom_extension_handler.CustomExtensionHandler()
            if mapping_value == "#microsoft.graph.customExtensionStageSetting":
                from . import custom_extension_stage_setting

                return custom_extension_stage_setting.CustomExtensionStageSetting()
            if mapping_value == "#microsoft.graph.customSecurityAttributeDefinition":
                from . import custom_security_attribute_definition

                return custom_security_attribute_definition.CustomSecurityAttributeDefinition()
            if mapping_value == "#microsoft.graph.dataClassificationService":
                from . import data_classification_service

                return data_classification_service.DataClassificationService()
            if mapping_value == "#microsoft.graph.dataLossPreventionPolicy":
                from . import data_loss_prevention_policy

                return data_loss_prevention_policy.DataLossPreventionPolicy()
            if mapping_value == "#microsoft.graph.dataPolicyOperation":
                from . import data_policy_operation

                return data_policy_operation.DataPolicyOperation()
            if mapping_value == "#microsoft.graph.dataSharingConsent":
                from . import data_sharing_consent

                return data_sharing_consent.DataSharingConsent()
            if mapping_value == "#microsoft.graph.defaultDeviceCompliancePolicy":
                from . import default_device_compliance_policy

                return default_device_compliance_policy.DefaultDeviceCompliancePolicy()
            if mapping_value == "#microsoft.graph.defaultManagedAppProtection":
                from . import default_managed_app_protection

                return default_managed_app_protection.DefaultManagedAppProtection()
            if mapping_value == "#microsoft.graph.defaultUserRoleOverride":
                from . import default_user_role_override

                return default_user_role_override.DefaultUserRoleOverride()
            if mapping_value == "#microsoft.graph.delegatedAdminAccessAssignment":
                from . import delegated_admin_access_assignment

                return delegated_admin_access_assignment.DelegatedAdminAccessAssignment()
            if mapping_value == "#microsoft.graph.delegatedAdminCustomer":
                from . import delegated_admin_customer

                return delegated_admin_customer.DelegatedAdminCustomer()
            if mapping_value == "#microsoft.graph.delegatedAdminRelationship":
                from . import delegated_admin_relationship

                return delegated_admin_relationship.DelegatedAdminRelationship()
            if mapping_value == "#microsoft.graph.delegatedAdminRelationshipOperation":
                from . import delegated_admin_relationship_operation

                return delegated_admin_relationship_operation.DelegatedAdminRelationshipOperation()
            if mapping_value == "#microsoft.graph.delegatedAdminRelationshipRequest":
                from . import delegated_admin_relationship_request

                return delegated_admin_relationship_request.DelegatedAdminRelationshipRequest()
            if mapping_value == "#microsoft.graph.delegatedAdminServiceManagementDetail":
                from . import delegated_admin_service_management_detail

                return delegated_admin_service_management_detail.DelegatedAdminServiceManagementDetail()
            if mapping_value == "#microsoft.graph.delegatedPermissionClassification":
                from . import delegated_permission_classification

                return delegated_permission_classification.DelegatedPermissionClassification()
            if mapping_value == "#microsoft.graph.deletedItemContainer":
                from . import deleted_item_container

                return deleted_item_container.DeletedItemContainer()
            if mapping_value == "#microsoft.graph.deletedTeam":
                from . import deleted_team

                return deleted_team.DeletedTeam()
            if mapping_value == "#microsoft.graph.depEnrollmentBaseProfile":
                from . import dep_enrollment_base_profile

                return dep_enrollment_base_profile.DepEnrollmentBaseProfile()
            if mapping_value == "#microsoft.graph.depEnrollmentProfile":
                from . import dep_enrollment_profile

                return dep_enrollment_profile.DepEnrollmentProfile()
            if mapping_value == "#microsoft.graph.depIOSEnrollmentProfile":
                from . import dep_i_o_s_enrollment_profile

                return dep_i_o_s_enrollment_profile.DepIOSEnrollmentProfile()
            if mapping_value == "#microsoft.graph.depMacOSEnrollmentProfile":
                from . import dep_mac_o_s_enrollment_profile

                return dep_mac_o_s_enrollment_profile.DepMacOSEnrollmentProfile()
            if mapping_value == "#microsoft.graph.depOnboardingSetting":
                from . import dep_onboarding_setting

                return dep_onboarding_setting.DepOnboardingSetting()
            if mapping_value == "#microsoft.graph.detectedApp":
                from . import detected_app

                return detected_app.DetectedApp()
            if mapping_value == "#microsoft.graph.device":
                from . import device

                return device.Device()
            if mapping_value == "#microsoft.graph.deviceAndAppManagementAssignmentFilter":
                from . import device_and_app_management_assignment_filter

                return device_and_app_management_assignment_filter.DeviceAndAppManagementAssignmentFilter()
            if mapping_value == "#microsoft.graph.deviceAndAppManagementRoleAssignment":
                from . import device_and_app_management_role_assignment

                return device_and_app_management_role_assignment.DeviceAndAppManagementRoleAssignment()
            if mapping_value == "#microsoft.graph.deviceAndAppManagementRoleDefinition":
                from . import device_and_app_management_role_definition

                return device_and_app_management_role_definition.DeviceAndAppManagementRoleDefinition()
            if mapping_value == "#microsoft.graph.deviceAppManagement":
                from . import device_app_management

                return device_app_management.DeviceAppManagement()
            if mapping_value == "#microsoft.graph.deviceAppManagementTask":
                from . import device_app_management_task

                return device_app_management_task.DeviceAppManagementTask()
            if mapping_value == "#microsoft.graph.deviceCategory":
                from . import device_category

                return device_category.DeviceCategory()
            if mapping_value == "#microsoft.graph.deviceComanagementAuthorityConfiguration":
                from . import device_comanagement_authority_configuration

                return device_comanagement_authority_configuration.DeviceComanagementAuthorityConfiguration()
            if mapping_value == "#microsoft.graph.deviceComplianceActionItem":
                from . import device_compliance_action_item

                return device_compliance_action_item.DeviceComplianceActionItem()
            if mapping_value == "#microsoft.graph.deviceComplianceDeviceOverview":
                from . import device_compliance_device_overview

                return device_compliance_device_overview.DeviceComplianceDeviceOverview()
            if mapping_value == "#microsoft.graph.deviceComplianceDeviceStatus":
                from . import device_compliance_device_status

                return device_compliance_device_status.DeviceComplianceDeviceStatus()
            if mapping_value == "#microsoft.graph.deviceCompliancePolicy":
                from . import device_compliance_policy

                return device_compliance_policy.DeviceCompliancePolicy()
            if mapping_value == "#microsoft.graph.deviceCompliancePolicyAssignment":
                from . import device_compliance_policy_assignment

                return device_compliance_policy_assignment.DeviceCompliancePolicyAssignment()
            if mapping_value == "#microsoft.graph.deviceCompliancePolicyDeviceStateSummary":
                from . import device_compliance_policy_device_state_summary

                return device_compliance_policy_device_state_summary.DeviceCompliancePolicyDeviceStateSummary()
            if mapping_value == "#microsoft.graph.deviceCompliancePolicyGroupAssignment":
                from . import device_compliance_policy_group_assignment

                return device_compliance_policy_group_assignment.DeviceCompliancePolicyGroupAssignment()
            if mapping_value == "#microsoft.graph.deviceCompliancePolicyPolicySetItem":
                from . import device_compliance_policy_policy_set_item

                return device_compliance_policy_policy_set_item.DeviceCompliancePolicyPolicySetItem()
            if mapping_value == "#microsoft.graph.deviceCompliancePolicySettingStateSummary":
                from . import device_compliance_policy_setting_state_summary
                from .managed_tenants import device_compliance_policy_setting_state_summary

                return device_compliance_policy_setting_state_summary.DeviceCompliancePolicySettingStateSummary()
            if mapping_value == "#microsoft.graph.deviceCompliancePolicyState":
                from . import device_compliance_policy_state

                return device_compliance_policy_state.DeviceCompliancePolicyState()
            if mapping_value == "#microsoft.graph.deviceComplianceScheduledActionForRule":
                from . import device_compliance_scheduled_action_for_rule

                return device_compliance_scheduled_action_for_rule.DeviceComplianceScheduledActionForRule()
            if mapping_value == "#microsoft.graph.deviceComplianceScript":
                from . import device_compliance_script

                return device_compliance_script.DeviceComplianceScript()
            if mapping_value == "#microsoft.graph.deviceComplianceScriptDeviceState":
                from . import device_compliance_script_device_state

                return device_compliance_script_device_state.DeviceComplianceScriptDeviceState()
            if mapping_value == "#microsoft.graph.deviceComplianceScriptRunSummary":
                from . import device_compliance_script_run_summary

                return device_compliance_script_run_summary.DeviceComplianceScriptRunSummary()
            if mapping_value == "#microsoft.graph.deviceComplianceSettingState":
                from . import device_compliance_setting_state

                return device_compliance_setting_state.DeviceComplianceSettingState()
            if mapping_value == "#microsoft.graph.deviceComplianceUserOverview":
                from . import device_compliance_user_overview

                return device_compliance_user_overview.DeviceComplianceUserOverview()
            if mapping_value == "#microsoft.graph.deviceComplianceUserStatus":
                from . import device_compliance_user_status

                return device_compliance_user_status.DeviceComplianceUserStatus()
            if mapping_value == "#microsoft.graph.deviceConfiguration":
                from . import device_configuration

                return device_configuration.DeviceConfiguration()
            if mapping_value == "#microsoft.graph.deviceConfigurationAssignment":
                from . import device_configuration_assignment

                return device_configuration_assignment.DeviceConfigurationAssignment()
            if mapping_value == "#microsoft.graph.deviceConfigurationConflictSummary":
                from . import device_configuration_conflict_summary

                return device_configuration_conflict_summary.DeviceConfigurationConflictSummary()
            if mapping_value == "#microsoft.graph.deviceConfigurationDeviceOverview":
                from . import device_configuration_device_overview

                return device_configuration_device_overview.DeviceConfigurationDeviceOverview()
            if mapping_value == "#microsoft.graph.deviceConfigurationDeviceStateSummary":
                from . import device_configuration_device_state_summary

                return device_configuration_device_state_summary.DeviceConfigurationDeviceStateSummary()
            if mapping_value == "#microsoft.graph.deviceConfigurationDeviceStatus":
                from . import device_configuration_device_status

                return device_configuration_device_status.DeviceConfigurationDeviceStatus()
            if mapping_value == "#microsoft.graph.deviceConfigurationGroupAssignment":
                from . import device_configuration_group_assignment

                return device_configuration_group_assignment.DeviceConfigurationGroupAssignment()
            if mapping_value == "#microsoft.graph.deviceConfigurationPolicySetItem":
                from . import device_configuration_policy_set_item

                return device_configuration_policy_set_item.DeviceConfigurationPolicySetItem()
            if mapping_value == "#microsoft.graph.deviceConfigurationState":
                from . import device_configuration_state

                return device_configuration_state.DeviceConfigurationState()
            if mapping_value == "#microsoft.graph.deviceConfigurationUserOverview":
                from . import device_configuration_user_overview

                return device_configuration_user_overview.DeviceConfigurationUserOverview()
            if mapping_value == "#microsoft.graph.deviceConfigurationUserStateSummary":
                from . import device_configuration_user_state_summary

                return device_configuration_user_state_summary.DeviceConfigurationUserStateSummary()
            if mapping_value == "#microsoft.graph.deviceConfigurationUserStatus":
                from . import device_configuration_user_status

                return device_configuration_user_status.DeviceConfigurationUserStatus()
            if mapping_value == "#microsoft.graph.deviceCustomAttributeShellScript":
                from . import device_custom_attribute_shell_script

                return device_custom_attribute_shell_script.DeviceCustomAttributeShellScript()
            if mapping_value == "#microsoft.graph.deviceEnrollmentConfiguration":
                from . import device_enrollment_configuration

                return device_enrollment_configuration.DeviceEnrollmentConfiguration()
            if mapping_value == "#microsoft.graph.deviceEnrollmentLimitConfiguration":
                from . import device_enrollment_limit_configuration

                return device_enrollment_limit_configuration.DeviceEnrollmentLimitConfiguration()
            if mapping_value == "#microsoft.graph.deviceEnrollmentNotificationConfiguration":
                from . import device_enrollment_notification_configuration

                return device_enrollment_notification_configuration.DeviceEnrollmentNotificationConfiguration()
            if mapping_value == "#microsoft.graph.deviceEnrollmentPlatformRestrictionConfiguration":
                from . import device_enrollment_platform_restriction_configuration

                return device_enrollment_platform_restriction_configuration.DeviceEnrollmentPlatformRestrictionConfiguration()
            if mapping_value == "#microsoft.graph.deviceEnrollmentPlatformRestrictionsConfiguration":
                from . import device_enrollment_platform_restrictions_configuration

                return device_enrollment_platform_restrictions_configuration.DeviceEnrollmentPlatformRestrictionsConfiguration()
            if mapping_value == "#microsoft.graph.deviceEnrollmentWindowsHelloForBusinessConfiguration":
                from . import device_enrollment_windows_hello_for_business_configuration

                return device_enrollment_windows_hello_for_business_configuration.DeviceEnrollmentWindowsHelloForBusinessConfiguration()
            if mapping_value == "#microsoft.graph.deviceHealthScript":
                from . import device_health_script

                return device_health_script.DeviceHealthScript()
            if mapping_value == "#microsoft.graph.deviceHealthScriptAssignment":
                from . import device_health_script_assignment

                return device_health_script_assignment.DeviceHealthScriptAssignment()
            if mapping_value == "#microsoft.graph.deviceHealthScriptDeviceState":
                from . import device_health_script_device_state

                return device_health_script_device_state.DeviceHealthScriptDeviceState()
            if mapping_value == "#microsoft.graph.deviceHealthScriptRunSummary":
                from . import device_health_script_run_summary

                return device_health_script_run_summary.DeviceHealthScriptRunSummary()
            if mapping_value == "#microsoft.graph.deviceInstallState":
                from . import device_install_state

                return device_install_state.DeviceInstallState()
            if mapping_value == "#microsoft.graph.deviceLogCollectionResponse":
                from . import device_log_collection_response

                return device_log_collection_response.DeviceLogCollectionResponse()
            if mapping_value == "#microsoft.graph.deviceManagement":
                from .device_management import device_management

                return device_management.DeviceManagement()
            if mapping_value == "#microsoft.graph.deviceManagement.alertRecord":
                from .device_management import alert_record

                return alert_record.AlertRecord()
            if mapping_value == "#microsoft.graph.deviceManagement.alertRule":
                from .device_management import alert_rule

                return alert_rule.AlertRule()
            if mapping_value == "#microsoft.graph.deviceManagement.monitoring":
                from .device_management import monitoring

                return monitoring.Monitoring()
            if mapping_value == "#microsoft.graph.deviceManagementAbstractComplexSettingDefinition":
                from . import device_management_abstract_complex_setting_definition

                return device_management_abstract_complex_setting_definition.DeviceManagementAbstractComplexSettingDefinition()
            if mapping_value == "#microsoft.graph.deviceManagementAbstractComplexSettingInstance":
                from . import device_management_abstract_complex_setting_instance

                return device_management_abstract_complex_setting_instance.DeviceManagementAbstractComplexSettingInstance()
            if mapping_value == "#microsoft.graph.deviceManagementAutopilotEvent":
                from . import device_management_autopilot_event

                return device_management_autopilot_event.DeviceManagementAutopilotEvent()
            if mapping_value == "#microsoft.graph.deviceManagementAutopilotPolicyStatusDetail":
                from . import device_management_autopilot_policy_status_detail

                return device_management_autopilot_policy_status_detail.DeviceManagementAutopilotPolicyStatusDetail()
            if mapping_value == "#microsoft.graph.deviceManagementBooleanSettingInstance":
                from . import device_management_boolean_setting_instance

                return device_management_boolean_setting_instance.DeviceManagementBooleanSettingInstance()
            if mapping_value == "#microsoft.graph.deviceManagementCachedReportConfiguration":
                from . import device_management_cached_report_configuration

                return device_management_cached_report_configuration.DeviceManagementCachedReportConfiguration()
            if mapping_value == "#microsoft.graph.deviceManagementCollectionSettingDefinition":
                from . import device_management_collection_setting_definition

                return device_management_collection_setting_definition.DeviceManagementCollectionSettingDefinition()
            if mapping_value == "#microsoft.graph.deviceManagementCollectionSettingInstance":
                from . import device_management_collection_setting_instance

                return device_management_collection_setting_instance.DeviceManagementCollectionSettingInstance()
            if mapping_value == "#microsoft.graph.deviceManagementComplexSettingDefinition":
                from . import device_management_complex_setting_definition

                return device_management_complex_setting_definition.DeviceManagementComplexSettingDefinition()
            if mapping_value == "#microsoft.graph.deviceManagementComplexSettingInstance":
                from . import device_management_complex_setting_instance

                return device_management_complex_setting_instance.DeviceManagementComplexSettingInstance()
            if mapping_value == "#microsoft.graph.deviceManagementComplianceActionItem":
                from . import device_management_compliance_action_item

                return device_management_compliance_action_item.DeviceManagementComplianceActionItem()
            if mapping_value == "#microsoft.graph.deviceManagementCompliancePolicy":
                from . import device_management_compliance_policy

                return device_management_compliance_policy.DeviceManagementCompliancePolicy()
            if mapping_value == "#microsoft.graph.deviceManagementComplianceScheduledActionForRule":
                from . import device_management_compliance_scheduled_action_for_rule

                return device_management_compliance_scheduled_action_for_rule.DeviceManagementComplianceScheduledActionForRule()
            if mapping_value == "#microsoft.graph.deviceManagementConfigurationCategory":
                from . import device_management_configuration_category

                return device_management_configuration_category.DeviceManagementConfigurationCategory()
            if mapping_value == "#microsoft.graph.deviceManagementConfigurationChoiceSettingCollectionDefinition":
                from . import device_management_configuration_choice_setting_collection_definition

                return device_management_configuration_choice_setting_collection_definition.DeviceManagementConfigurationChoiceSettingCollectionDefinition()
            if mapping_value == "#microsoft.graph.deviceManagementConfigurationChoiceSettingDefinition":
                from . import device_management_configuration_choice_setting_definition

                return device_management_configuration_choice_setting_definition.DeviceManagementConfigurationChoiceSettingDefinition()
            if mapping_value == "#microsoft.graph.deviceManagementConfigurationPolicy":
                from . import device_management_configuration_policy

                return device_management_configuration_policy.DeviceManagementConfigurationPolicy()
            if mapping_value == "#microsoft.graph.deviceManagementConfigurationPolicyAssignment":
                from . import device_management_configuration_policy_assignment

                return device_management_configuration_policy_assignment.DeviceManagementConfigurationPolicyAssignment()
            if mapping_value == "#microsoft.graph.deviceManagementConfigurationPolicyPolicySetItem":
                from . import device_management_configuration_policy_policy_set_item

                return device_management_configuration_policy_policy_set_item.DeviceManagementConfigurationPolicyPolicySetItem()
            if mapping_value == "#microsoft.graph.deviceManagementConfigurationPolicyTemplate":
                from . import device_management_configuration_policy_template

                return device_management_configuration_policy_template.DeviceManagementConfigurationPolicyTemplate()
            if mapping_value == "#microsoft.graph.deviceManagementConfigurationRedirectSettingDefinition":
                from . import device_management_configuration_redirect_setting_definition

                return device_management_configuration_redirect_setting_definition.DeviceManagementConfigurationRedirectSettingDefinition()
            if mapping_value == "#microsoft.graph.deviceManagementConfigurationSetting":
                from . import device_management_configuration_setting

                return device_management_configuration_setting.DeviceManagementConfigurationSetting()
            if mapping_value == "#microsoft.graph.deviceManagementConfigurationSettingDefinition":
                from . import device_management_configuration_setting_definition

                return device_management_configuration_setting_definition.DeviceManagementConfigurationSettingDefinition()
            if mapping_value == "#microsoft.graph.deviceManagementConfigurationSettingGroupCollectionDefinition":
                from . import device_management_configuration_setting_group_collection_definition

                return device_management_configuration_setting_group_collection_definition.DeviceManagementConfigurationSettingGroupCollectionDefinition()
            if mapping_value == "#microsoft.graph.deviceManagementConfigurationSettingGroupDefinition":
                from . import device_management_configuration_setting_group_definition

                return device_management_configuration_setting_group_definition.DeviceManagementConfigurationSettingGroupDefinition()
            if mapping_value == "#microsoft.graph.deviceManagementConfigurationSettingTemplate":
                from . import device_management_configuration_setting_template

                return device_management_configuration_setting_template.DeviceManagementConfigurationSettingTemplate()
            if mapping_value == "#microsoft.graph.deviceManagementConfigurationSimpleSettingCollectionDefinition":
                from . import device_management_configuration_simple_setting_collection_definition

                return device_management_configuration_simple_setting_collection_definition.DeviceManagementConfigurationSimpleSettingCollectionDefinition()
            if mapping_value == "#microsoft.graph.deviceManagementConfigurationSimpleSettingDefinition":
                from . import device_management_configuration_simple_setting_definition

                return device_management_configuration_simple_setting_definition.DeviceManagementConfigurationSimpleSettingDefinition()
            if mapping_value == "#microsoft.graph.deviceManagementDerivedCredentialSettings":
                from . import device_management_derived_credential_settings

                return device_management_derived_credential_settings.DeviceManagementDerivedCredentialSettings()
            if mapping_value == "#microsoft.graph.deviceManagementDomainJoinConnector":
                from . import device_management_domain_join_connector

                return device_management_domain_join_connector.DeviceManagementDomainJoinConnector()
            if mapping_value == "#microsoft.graph.deviceManagementExchangeConnector":
                from . import device_management_exchange_connector

                return device_management_exchange_connector.DeviceManagementExchangeConnector()
            if mapping_value == "#microsoft.graph.deviceManagementExchangeOnPremisesPolicy":
                from . import device_management_exchange_on_premises_policy

                return device_management_exchange_on_premises_policy.DeviceManagementExchangeOnPremisesPolicy()
            if mapping_value == "#microsoft.graph.deviceManagementExportJob":
                from . import device_management_export_job

                return device_management_export_job.DeviceManagementExportJob()
            if mapping_value == "#microsoft.graph.deviceManagementIntegerSettingInstance":
                from . import device_management_integer_setting_instance

                return device_management_integer_setting_instance.DeviceManagementIntegerSettingInstance()
            if mapping_value == "#microsoft.graph.deviceManagementIntent":
                from . import device_management_intent

                return device_management_intent.DeviceManagementIntent()
            if mapping_value == "#microsoft.graph.deviceManagementIntentAssignment":
                from . import device_management_intent_assignment

                return device_management_intent_assignment.DeviceManagementIntentAssignment()
            if mapping_value == "#microsoft.graph.deviceManagementIntentDeviceSettingStateSummary":
                from . import device_management_intent_device_setting_state_summary

                return device_management_intent_device_setting_state_summary.DeviceManagementIntentDeviceSettingStateSummary()
            if mapping_value == "#microsoft.graph.deviceManagementIntentDeviceState":
                from . import device_management_intent_device_state

                return device_management_intent_device_state.DeviceManagementIntentDeviceState()
            if mapping_value == "#microsoft.graph.deviceManagementIntentDeviceStateSummary":
                from . import device_management_intent_device_state_summary

                return device_management_intent_device_state_summary.DeviceManagementIntentDeviceStateSummary()
            if mapping_value == "#microsoft.graph.deviceManagementIntentSettingCategory":
                from . import device_management_intent_setting_category

                return device_management_intent_setting_category.DeviceManagementIntentSettingCategory()
            if mapping_value == "#microsoft.graph.deviceManagementIntentUserState":
                from . import device_management_intent_user_state

                return device_management_intent_user_state.DeviceManagementIntentUserState()
            if mapping_value == "#microsoft.graph.deviceManagementIntentUserStateSummary":
                from . import device_management_intent_user_state_summary

                return device_management_intent_user_state_summary.DeviceManagementIntentUserStateSummary()
            if mapping_value == "#microsoft.graph.deviceManagementPartner":
                from . import device_management_partner

                return device_management_partner.DeviceManagementPartner()
            if mapping_value == "#microsoft.graph.deviceManagementReports":
                from . import device_management_reports

                return device_management_reports.DeviceManagementReports()
            if mapping_value == "#microsoft.graph.deviceManagementResourceAccessProfileAssignment":
                from . import device_management_resource_access_profile_assignment

                return device_management_resource_access_profile_assignment.DeviceManagementResourceAccessProfileAssignment()
            if mapping_value == "#microsoft.graph.deviceManagementResourceAccessProfileBase":
                from . import device_management_resource_access_profile_base

                return device_management_resource_access_profile_base.DeviceManagementResourceAccessProfileBase()
            if mapping_value == "#microsoft.graph.deviceManagementReusablePolicySetting":
                from . import device_management_reusable_policy_setting

                return device_management_reusable_policy_setting.DeviceManagementReusablePolicySetting()
            if mapping_value == "#microsoft.graph.deviceManagementScript":
                from . import device_management_script

                return device_management_script.DeviceManagementScript()
            if mapping_value == "#microsoft.graph.deviceManagementScriptAssignment":
                from . import device_management_script_assignment

                return device_management_script_assignment.DeviceManagementScriptAssignment()
            if mapping_value == "#microsoft.graph.deviceManagementScriptDeviceState":
                from . import device_management_script_device_state

                return device_management_script_device_state.DeviceManagementScriptDeviceState()
            if mapping_value == "#microsoft.graph.deviceManagementScriptGroupAssignment":
                from . import device_management_script_group_assignment

                return device_management_script_group_assignment.DeviceManagementScriptGroupAssignment()
            if mapping_value == "#microsoft.graph.deviceManagementScriptPolicySetItem":
                from . import device_management_script_policy_set_item

                return device_management_script_policy_set_item.DeviceManagementScriptPolicySetItem()
            if mapping_value == "#microsoft.graph.deviceManagementScriptRunSummary":
                from . import device_management_script_run_summary

                return device_management_script_run_summary.DeviceManagementScriptRunSummary()
            if mapping_value == "#microsoft.graph.deviceManagementScriptUserState":
                from . import device_management_script_user_state

                return device_management_script_user_state.DeviceManagementScriptUserState()
            if mapping_value == "#microsoft.graph.deviceManagementSettingCategory":
                from . import device_management_setting_category

                return device_management_setting_category.DeviceManagementSettingCategory()
            if mapping_value == "#microsoft.graph.deviceManagementSettingDefinition":
                from . import device_management_setting_definition

                return device_management_setting_definition.DeviceManagementSettingDefinition()
            if mapping_value == "#microsoft.graph.deviceManagementSettingInstance":
                from . import device_management_setting_instance

                return device_management_setting_instance.DeviceManagementSettingInstance()
            if mapping_value == "#microsoft.graph.deviceManagementStringSettingInstance":
                from . import device_management_string_setting_instance

                return device_management_string_setting_instance.DeviceManagementStringSettingInstance()
            if mapping_value == "#microsoft.graph.deviceManagementTemplate":
                from . import device_management_template

                return device_management_template.DeviceManagementTemplate()
            if mapping_value == "#microsoft.graph.deviceManagementTemplateSettingCategory":
                from . import device_management_template_setting_category

                return device_management_template_setting_category.DeviceManagementTemplateSettingCategory()
            if mapping_value == "#microsoft.graph.deviceManagementTroubleshootingEvent":
                from . import device_management_troubleshooting_event

                return device_management_troubleshooting_event.DeviceManagementTroubleshootingEvent()
            if mapping_value == "#microsoft.graph.deviceRegistrationPolicy":
                from . import device_registration_policy

                return device_registration_policy.DeviceRegistrationPolicy()
            if mapping_value == "#microsoft.graph.deviceSetupConfiguration":
                from . import device_setup_configuration

                return device_setup_configuration.DeviceSetupConfiguration()
            if mapping_value == "#microsoft.graph.deviceShellScript":
                from . import device_shell_script

                return device_shell_script.DeviceShellScript()
            if mapping_value == "#microsoft.graph.dimension":
                from . import dimension

                return dimension.Dimension()
            if mapping_value == "#microsoft.graph.dimensionValue":
                from . import dimension_value

                return dimension_value.DimensionValue()
            if mapping_value == "#microsoft.graph.directory":
                from . import directory

                return directory.Directory()
            if mapping_value == "#microsoft.graph.directoryAudit":
                from . import directory_audit

                return directory_audit.DirectoryAudit()
            if mapping_value == "#microsoft.graph.directoryDefinition":
                from . import directory_definition

                return directory_definition.DirectoryDefinition()
            if mapping_value == "#microsoft.graph.directoryObject":
                from . import directory_object

                return directory_object.DirectoryObject()
            if mapping_value == "#microsoft.graph.directoryObjectPartnerReference":
                from . import directory_object_partner_reference

                return directory_object_partner_reference.DirectoryObjectPartnerReference()
            if mapping_value == "#microsoft.graph.directoryRole":
                from . import directory_role

                return directory_role.DirectoryRole()
            if mapping_value == "#microsoft.graph.directoryRoleAccessReviewPolicy":
                from . import directory_role_access_review_policy

                return directory_role_access_review_policy.DirectoryRoleAccessReviewPolicy()
            if mapping_value == "#microsoft.graph.directoryRoleTemplate":
                from . import directory_role_template

                return directory_role_template.DirectoryRoleTemplate()
            if mapping_value == "#microsoft.graph.directorySetting":
                from . import directory_setting

                return directory_setting.DirectorySetting()
            if mapping_value == "#microsoft.graph.directorySettingTemplate":
                from . import directory_setting_template

                return directory_setting_template.DirectorySettingTemplate()
            if mapping_value == "#microsoft.graph.dlpEvaluatePoliciesJobResponse":
                from . import dlp_evaluate_policies_job_response

                return dlp_evaluate_policies_job_response.DlpEvaluatePoliciesJobResponse()
            if mapping_value == "#microsoft.graph.document":
                from . import document

                return document.Document()
            if mapping_value == "#microsoft.graph.documentComment":
                from . import document_comment

                return document_comment.DocumentComment()
            if mapping_value == "#microsoft.graph.documentCommentReply":
                from . import document_comment_reply

                return document_comment_reply.DocumentCommentReply()
            if mapping_value == "#microsoft.graph.documentSetVersion":
                from . import document_set_version

                return document_set_version.DocumentSetVersion()
            if mapping_value == "#microsoft.graph.domain":
                from . import domain

                return domain.Domain()
            if mapping_value == "#microsoft.graph.domainDnsCnameRecord":
                from . import domain_dns_cname_record

                return domain_dns_cname_record.DomainDnsCnameRecord()
            if mapping_value == "#microsoft.graph.domainDnsMxRecord":
                from . import domain_dns_mx_record

                return domain_dns_mx_record.DomainDnsMxRecord()
            if mapping_value == "#microsoft.graph.domainDnsRecord":
                from . import domain_dns_record

                return domain_dns_record.DomainDnsRecord()
            if mapping_value == "#microsoft.graph.domainDnsSrvRecord":
                from . import domain_dns_srv_record

                return domain_dns_srv_record.DomainDnsSrvRecord()
            if mapping_value == "#microsoft.graph.domainDnsTxtRecord":
                from . import domain_dns_txt_record

                return domain_dns_txt_record.DomainDnsTxtRecord()
            if mapping_value == "#microsoft.graph.domainDnsUnavailableRecord":
                from . import domain_dns_unavailable_record

                return domain_dns_unavailable_record.DomainDnsUnavailableRecord()
            if mapping_value == "#microsoft.graph.domainSecurityProfile":
                from . import domain_security_profile

                return domain_security_profile.DomainSecurityProfile()
            if mapping_value == "#microsoft.graph.drive":
                from . import drive

                return drive.Drive()
            if mapping_value == "#microsoft.graph.driveItem":
                from . import drive_item

                return drive_item.DriveItem()
            if mapping_value == "#microsoft.graph.driveItemVersion":
                from . import drive_item_version

                return drive_item_version.DriveItemVersion()
            if mapping_value == "#microsoft.graph.easEmailProfileConfigurationBase":
                from . import eas_email_profile_configuration_base

                return eas_email_profile_configuration_base.EasEmailProfileConfigurationBase()
            if mapping_value == "#microsoft.graph.eBookInstallSummary":
                from . import e_book_install_summary

                return e_book_install_summary.EBookInstallSummary()
            if mapping_value == "#microsoft.graph.edge":
                from . import edge

                return edge.Edge()
            if mapping_value == "#microsoft.graph.ediscovery.addToReviewSetOperation":
                from .ediscovery import add_to_review_set_operation

                return add_to_review_set_operation.AddToReviewSetOperation()
            if mapping_value == "#microsoft.graph.ediscovery.case":
                from .ediscovery import case
                from .security import case

                return case.Case()
            if mapping_value == "#microsoft.graph.ediscovery.caseExportOperation":
                from .ediscovery import case_export_operation

                return case_export_operation.CaseExportOperation()
            if mapping_value == "#microsoft.graph.ediscovery.caseHoldOperation":
                from .ediscovery import case_hold_operation

                return case_hold_operation.CaseHoldOperation()
            if mapping_value == "#microsoft.graph.ediscovery.caseIndexOperation":
                from .ediscovery import case_index_operation

                return case_index_operation.CaseIndexOperation()
            if mapping_value == "#microsoft.graph.ediscovery.caseOperation":
                from .ediscovery import case_operation
                from .security import case_operation

                return case_operation.CaseOperation()
            if mapping_value == "#microsoft.graph.ediscovery.caseSettings":
                from .ediscovery import case_settings

                return case_settings.CaseSettings()
            if mapping_value == "#microsoft.graph.ediscovery.custodian":
                from .ediscovery import custodian

                return custodian.Custodian()
            if mapping_value == "#microsoft.graph.ediscovery.dataSource":
                from .ediscovery import data_source
                from .security import data_source

                return data_source.DataSource()
            if mapping_value == "#microsoft.graph.ediscovery.dataSourceContainer":
                from .ediscovery import data_source_container
                from .security import data_source_container

                return data_source_container.DataSourceContainer()
            if mapping_value == "#microsoft.graph.ediscovery.ediscoveryroot":
                from .ediscovery import ediscoveryroot

                return ediscoveryroot.Ediscoveryroot()
            if mapping_value == "#microsoft.graph.ediscovery.estimateStatisticsOperation":
                from .ediscovery import estimate_statistics_operation

                return estimate_statistics_operation.EstimateStatisticsOperation()
            if mapping_value == "#microsoft.graph.ediscovery.legalHold":
                from .ediscovery import legal_hold

                return legal_hold.LegalHold()
            if mapping_value == "#microsoft.graph.ediscovery.noncustodialDataSource":
                from .ediscovery import noncustodial_data_source

                return noncustodial_data_source.NoncustodialDataSource()
            if mapping_value == "#microsoft.graph.ediscovery.purgeDataOperation":
                from .ediscovery import purge_data_operation

                return purge_data_operation.PurgeDataOperation()
            if mapping_value == "#microsoft.graph.ediscovery.reviewSet":
                from .ediscovery import review_set

                return review_set.ReviewSet()
            if mapping_value == "#microsoft.graph.ediscovery.reviewSetQuery":
                from .ediscovery import review_set_query

                return review_set_query.ReviewSetQuery()
            if mapping_value == "#microsoft.graph.ediscovery.siteSource":
                from .ediscovery import site_source
                from .security import site_source

                return site_source.SiteSource()
            if mapping_value == "#microsoft.graph.ediscovery.sourceCollection":
                from .ediscovery import source_collection

                return source_collection.SourceCollection()
            if mapping_value == "#microsoft.graph.ediscovery.tag":
                from .ediscovery import tag
                from .security import tag

                return tag.Tag()
            if mapping_value == "#microsoft.graph.ediscovery.tagOperation":
                from .ediscovery import tag_operation

                return tag_operation.TagOperation()
            if mapping_value == "#microsoft.graph.ediscovery.unifiedGroupSource":
                from .ediscovery import unified_group_source
                from .security import unified_group_source

                return unified_group_source.UnifiedGroupSource()
            if mapping_value == "#microsoft.graph.ediscovery.userSource":
                from .ediscovery import user_source
                from .security import user_source

                return user_source.UserSource()
            if mapping_value == "#microsoft.graph.editionUpgradeConfiguration":
                from . import edition_upgrade_configuration

                return edition_upgrade_configuration.EditionUpgradeConfiguration()
            if mapping_value == "#microsoft.graph.educationalActivity":
                from . import educational_activity

                return educational_activity.EducationalActivity()
            if mapping_value == "#microsoft.graph.educationAssignment":
                from . import education_assignment

                return education_assignment.EducationAssignment()
            if mapping_value == "#microsoft.graph.educationAssignmentDefaults":
                from . import education_assignment_defaults

                return education_assignment_defaults.EducationAssignmentDefaults()
            if mapping_value == "#microsoft.graph.educationAssignmentResource":
                from . import education_assignment_resource

                return education_assignment_resource.EducationAssignmentResource()
            if mapping_value == "#microsoft.graph.educationAssignmentSettings":
                from . import education_assignment_settings

                return education_assignment_settings.EducationAssignmentSettings()
            if mapping_value == "#microsoft.graph.educationCategory":
                from . import education_category

                return education_category.EducationCategory()
            if mapping_value == "#microsoft.graph.educationClass":
                from . import education_class

                return education_class.EducationClass()
            if mapping_value == "#microsoft.graph.educationFeedbackOutcome":
                from . import education_feedback_outcome

                return education_feedback_outcome.EducationFeedbackOutcome()
            if mapping_value == "#microsoft.graph.educationFeedbackResourceOutcome":
                from . import education_feedback_resource_outcome

                return education_feedback_resource_outcome.EducationFeedbackResourceOutcome()
            if mapping_value == "#microsoft.graph.educationOrganization":
                from . import education_organization

                return education_organization.EducationOrganization()
            if mapping_value == "#microsoft.graph.educationOutcome":
                from . import education_outcome

                return education_outcome.EducationOutcome()
            if mapping_value == "#microsoft.graph.educationPointsOutcome":
                from . import education_points_outcome

                return education_points_outcome.EducationPointsOutcome()
            if mapping_value == "#microsoft.graph.educationRubric":
                from . import education_rubric

                return education_rubric.EducationRubric()
            if mapping_value == "#microsoft.graph.educationRubricOutcome":
                from . import education_rubric_outcome

                return education_rubric_outcome.EducationRubricOutcome()
            if mapping_value == "#microsoft.graph.educationSchool":
                from . import education_school

                return education_school.EducationSchool()
            if mapping_value == "#microsoft.graph.educationSubmission":
                from . import education_submission

                return education_submission.EducationSubmission()
            if mapping_value == "#microsoft.graph.educationSubmissionResource":
                from . import education_submission_resource

                return education_submission_resource.EducationSubmissionResource()
            if mapping_value == "#microsoft.graph.educationSynchronizationError":
                from . import education_synchronization_error

                return education_synchronization_error.EducationSynchronizationError()
            if mapping_value == "#microsoft.graph.educationSynchronizationProfile":
                from . import education_synchronization_profile

                return education_synchronization_profile.EducationSynchronizationProfile()
            if mapping_value == "#microsoft.graph.educationSynchronizationProfileStatus":
                from . import education_synchronization_profile_status

                return education_synchronization_profile_status.EducationSynchronizationProfileStatus()
            if mapping_value == "#microsoft.graph.educationUser":
                from . import education_user

                return education_user.EducationUser()
            if mapping_value == "#microsoft.graph.emailActivityStatistics":
                from . import email_activity_statistics

                return email_activity_statistics.EmailActivityStatistics()
            if mapping_value == "#microsoft.graph.emailAuthenticationMethod":
                from . import email_authentication_method

                return email_authentication_method.EmailAuthenticationMethod()
            if mapping_value == "#microsoft.graph.emailAuthenticationMethodConfiguration":
                from . import email_authentication_method_configuration

                return email_authentication_method_configuration.EmailAuthenticationMethodConfiguration()
            if mapping_value == "#microsoft.graph.emailFileAssessmentRequest":
                from . import email_file_assessment_request

                return email_file_assessment_request.EmailFileAssessmentRequest()
            if mapping_value == "#microsoft.graph.embeddedSIMActivationCodePool":
                from . import embedded_s_i_m_activation_code_pool

                return embedded_s_i_m_activation_code_pool.EmbeddedSIMActivationCodePool()
            if mapping_value == "#microsoft.graph.embeddedSIMActivationCodePoolAssignment":
                from . import embedded_s_i_m_activation_code_pool_assignment

                return embedded_s_i_m_activation_code_pool_assignment.EmbeddedSIMActivationCodePoolAssignment()
            if mapping_value == "#microsoft.graph.embeddedSIMDeviceState":
                from . import embedded_s_i_m_device_state

                return embedded_s_i_m_device_state.EmbeddedSIMDeviceState()
            if mapping_value == "#microsoft.graph.employee":
                from . import employee

                return employee.Employee()
            if mapping_value == "#microsoft.graph.endpoint":
                from . import endpoint

                return endpoint.Endpoint()
            if mapping_value == "#microsoft.graph.enrollmentConfigurationAssignment":
                from . import enrollment_configuration_assignment

                return enrollment_configuration_assignment.EnrollmentConfigurationAssignment()
            if mapping_value == "#microsoft.graph.enrollmentProfile":
                from . import enrollment_profile

                return enrollment_profile.EnrollmentProfile()
            if mapping_value == "#microsoft.graph.enrollmentRestrictionsConfigurationPolicySetItem":
                from . import enrollment_restrictions_configuration_policy_set_item

                return enrollment_restrictions_configuration_policy_set_item.EnrollmentRestrictionsConfigurationPolicySetItem()
            if mapping_value == "#microsoft.graph.enrollmentTroubleshootingEvent":
                from . import enrollment_troubleshooting_event

                return enrollment_troubleshooting_event.EnrollmentTroubleshootingEvent()
            if mapping_value == "#microsoft.graph.enterpriseCodeSigningCertificate":
                from . import enterprise_code_signing_certificate

                return enterprise_code_signing_certificate.EnterpriseCodeSigningCertificate()
            if mapping_value == "#microsoft.graph.entitlementManagement":
                from . import entitlement_management

                return entitlement_management.EntitlementManagement()
            if mapping_value == "#microsoft.graph.entitlementManagementSettings":
                from . import entitlement_management_settings

                return entitlement_management_settings.EntitlementManagementSettings()
            if mapping_value == "#microsoft.graph.evaluateLabelJobResponse":
                from . import evaluate_label_job_response

                return evaluate_label_job_response.EvaluateLabelJobResponse()
            if mapping_value == "#microsoft.graph.event":
                from . import event

                return event.Event()
            if mapping_value == "#microsoft.graph.eventMessage":
                from . import event_message

                return event_message.EventMessage()
            if mapping_value == "#microsoft.graph.eventMessageRequest":
                from . import event_message_request

                return event_message_request.EventMessageRequest()
            if mapping_value == "#microsoft.graph.eventMessageResponse":
                from . import event_message_response

                return event_message_response.EventMessageResponse()
            if mapping_value == "#microsoft.graph.exactMatchDataStore":
                from . import exact_match_data_store

                return exact_match_data_store.ExactMatchDataStore()
            if mapping_value == "#microsoft.graph.exactMatchDataStoreBase":
                from . import exact_match_data_store_base

                return exact_match_data_store_base.ExactMatchDataStoreBase()
            if mapping_value == "#microsoft.graph.exactMatchJobBase":
                from . import exact_match_job_base

                return exact_match_job_base.ExactMatchJobBase()
            if mapping_value == "#microsoft.graph.exactMatchLookupJob":
                from . import exact_match_lookup_job

                return exact_match_lookup_job.ExactMatchLookupJob()
            if mapping_value == "#microsoft.graph.exactMatchSession":
                from . import exact_match_session

                return exact_match_session.ExactMatchSession()
            if mapping_value == "#microsoft.graph.exactMatchSessionBase":
                from . import exact_match_session_base

                return exact_match_session_base.ExactMatchSessionBase()
            if mapping_value == "#microsoft.graph.exactMatchUploadAgent":
                from . import exact_match_upload_agent

                return exact_match_upload_agent.ExactMatchUploadAgent()
            if mapping_value == "#microsoft.graph.extension":
                from . import extension

                return extension.Extension()
            if mapping_value == "#microsoft.graph.extensionProperty":
                from . import extension_property

                return extension_property.ExtensionProperty()
            if mapping_value == "#microsoft.graph.external":
                from . import external

                return external.External()
            if mapping_value == "#microsoft.graph.externalConnection":
                from . import external_connection
                from .external_connectors import external_connection

                return external_connection.ExternalConnection()
            if mapping_value == "#microsoft.graph.externalConnectors.connectionOperation":
                from . import connection_operation
                from .external_connectors import connection_operation

                return connection_operation.ConnectionOperation()
            if mapping_value == "#microsoft.graph.externalConnectors.connectionQuota":
                from .external_connectors import connection_quota

                return connection_quota.ConnectionQuota()
            if mapping_value == "#microsoft.graph.externalConnectors.externalActivity":
                from .external_connectors import external_activity

                return external_activity.ExternalActivity()
            if mapping_value == "#microsoft.graph.externalConnectors.externalActivityResult":
                from .external_connectors import external_activity_result

                return external_activity_result.ExternalActivityResult()
            if mapping_value == "#microsoft.graph.externalConnectors.externalConnection":
                from . import external_connection
                from .external_connectors import external_connection

                return external_connection.ExternalConnection()
            if mapping_value == "#microsoft.graph.externalConnectors.externalGroup":
                from . import external_group
                from .external_connectors import external_group

                return external_group.ExternalGroup()
            if mapping_value == "#microsoft.graph.externalConnectors.externalItem":
                from . import external_item
                from .external_connectors import external_item

                return external_item.ExternalItem()
            if mapping_value == "#microsoft.graph.externalConnectors.identity":
                from .external_connectors import identity

                return identity.Identity()
            if mapping_value == "#microsoft.graph.externalConnectors.schema":
                from . import schema
                from .external_connectors import schema

                return schema.Schema()
            if mapping_value == "#microsoft.graph.externalDomainName":
                from . import external_domain_name

                return external_domain_name.ExternalDomainName()
            if mapping_value == "#microsoft.graph.externalGroup":
                from . import external_group
                from .external_connectors import external_group

                return external_group.ExternalGroup()
            if mapping_value == "#microsoft.graph.externalIdentitiesPolicy":
                from . import external_identities_policy

                return external_identities_policy.ExternalIdentitiesPolicy()
            if mapping_value == "#microsoft.graph.externalItem":
                from . import external_item
                from .external_connectors import external_item

                return external_item.ExternalItem()
            if mapping_value == "#microsoft.graph.externalMeetingRegistrant":
                from . import external_meeting_registrant

                return external_meeting_registrant.ExternalMeetingRegistrant()
            if mapping_value == "#microsoft.graph.externalMeetingRegistration":
                from . import external_meeting_registration

                return external_meeting_registration.ExternalMeetingRegistration()
            if mapping_value == "#microsoft.graph.featureRolloutPolicy":
                from . import feature_rollout_policy

                return feature_rollout_policy.FeatureRolloutPolicy()
            if mapping_value == "#microsoft.graph.federatedIdentityCredential":
                from . import federated_identity_credential

                return federated_identity_credential.FederatedIdentityCredential()
            if mapping_value == "#microsoft.graph.fido2AuthenticationMethod":
                from . import fido2_authentication_method

                return fido2_authentication_method.Fido2AuthenticationMethod()
            if mapping_value == "#microsoft.graph.fido2AuthenticationMethodConfiguration":
                from . import fido2_authentication_method_configuration

                return fido2_authentication_method_configuration.Fido2AuthenticationMethodConfiguration()
            if mapping_value == "#microsoft.graph.fido2CombinationConfiguration":
                from . import fido2_combination_configuration

                return fido2_combination_configuration.Fido2CombinationConfiguration()
            if mapping_value == "#microsoft.graph.fieldValueSet":
                from . import field_value_set

                return field_value_set.FieldValueSet()
            if mapping_value == "#microsoft.graph.fileAssessmentRequest":
                from . import file_assessment_request

                return file_assessment_request.FileAssessmentRequest()
            if mapping_value == "#microsoft.graph.fileAttachment":
                from . import file_attachment

                return file_attachment.FileAttachment()
            if mapping_value == "#microsoft.graph.fileClassificationRequest":
                from . import file_classification_request

                return file_classification_request.FileClassificationRequest()
            if mapping_value == "#microsoft.graph.fileSecurityProfile":
                from . import file_security_profile

                return file_security_profile.FileSecurityProfile()
            if mapping_value == "#microsoft.graph.filterOperatorSchema":
                from . import filter_operator_schema

                return filter_operator_schema.FilterOperatorSchema()
            if mapping_value == "#microsoft.graph.focusActivityStatistics":
                from . import focus_activity_statistics

                return focus_activity_statistics.FocusActivityStatistics()
            if mapping_value == "#microsoft.graph.generalLedgerEntry":
                from . import general_ledger_entry

                return general_ledger_entry.GeneralLedgerEntry()
            if mapping_value == "#microsoft.graph.governanceInsight":
                from . import governance_insight

                return governance_insight.GovernanceInsight()
            if mapping_value == "#microsoft.graph.governancePolicyTemplate":
                from . import governance_policy_template

                return governance_policy_template.GovernancePolicyTemplate()
            if mapping_value == "#microsoft.graph.governanceResource":
                from . import governance_resource

                return governance_resource.GovernanceResource()
            if mapping_value == "#microsoft.graph.governanceRoleAssignment":
                from . import governance_role_assignment

                return governance_role_assignment.GovernanceRoleAssignment()
            if mapping_value == "#microsoft.graph.governanceRoleAssignmentRequest":
                from . import governance_role_assignment_request

                return governance_role_assignment_request.GovernanceRoleAssignmentRequest()
            if mapping_value == "#microsoft.graph.governanceRoleDefinition":
                from . import governance_role_definition

                return governance_role_definition.GovernanceRoleDefinition()
            if mapping_value == "#microsoft.graph.governanceRoleSetting":
                from . import governance_role_setting

                return governance_role_setting.GovernanceRoleSetting()
            if mapping_value == "#microsoft.graph.governanceSubject":
                from . import governance_subject

                return governance_subject.GovernanceSubject()
            if mapping_value == "#microsoft.graph.group":
                from . import group
                from .term_store import group

                return group.Group()
            if mapping_value == "#microsoft.graph.groupLifecyclePolicy":
                from . import group_lifecycle_policy

                return group_lifecycle_policy.GroupLifecyclePolicy()
            if mapping_value == "#microsoft.graph.groupPolicyCategory":
                from . import group_policy_category

                return group_policy_category.GroupPolicyCategory()
            if mapping_value == "#microsoft.graph.groupPolicyConfiguration":
                from . import group_policy_configuration

                return group_policy_configuration.GroupPolicyConfiguration()
            if mapping_value == "#microsoft.graph.groupPolicyConfigurationAssignment":
                from . import group_policy_configuration_assignment

                return group_policy_configuration_assignment.GroupPolicyConfigurationAssignment()
            if mapping_value == "#microsoft.graph.groupPolicyDefinition":
                from . import group_policy_definition

                return group_policy_definition.GroupPolicyDefinition()
            if mapping_value == "#microsoft.graph.groupPolicyDefinitionFile":
                from . import group_policy_definition_file

                return group_policy_definition_file.GroupPolicyDefinitionFile()
            if mapping_value == "#microsoft.graph.groupPolicyDefinitionValue":
                from . import group_policy_definition_value

                return group_policy_definition_value.GroupPolicyDefinitionValue()
            if mapping_value == "#microsoft.graph.groupPolicyMigrationReport":
                from . import group_policy_migration_report

                return group_policy_migration_report.GroupPolicyMigrationReport()
            if mapping_value == "#microsoft.graph.groupPolicyObjectFile":
                from . import group_policy_object_file

                return group_policy_object_file.GroupPolicyObjectFile()
            if mapping_value == "#microsoft.graph.groupPolicyOperation":
                from . import group_policy_operation

                return group_policy_operation.GroupPolicyOperation()
            if mapping_value == "#microsoft.graph.groupPolicyPresentation":
                from . import group_policy_presentation

                return group_policy_presentation.GroupPolicyPresentation()
            if mapping_value == "#microsoft.graph.groupPolicyPresentationCheckBox":
                from . import group_policy_presentation_check_box

                return group_policy_presentation_check_box.GroupPolicyPresentationCheckBox()
            if mapping_value == "#microsoft.graph.groupPolicyPresentationComboBox":
                from . import group_policy_presentation_combo_box

                return group_policy_presentation_combo_box.GroupPolicyPresentationComboBox()
            if mapping_value == "#microsoft.graph.groupPolicyPresentationDecimalTextBox":
                from . import group_policy_presentation_decimal_text_box

                return group_policy_presentation_decimal_text_box.GroupPolicyPresentationDecimalTextBox()
            if mapping_value == "#microsoft.graph.groupPolicyPresentationDropdownList":
                from . import group_policy_presentation_dropdown_list

                return group_policy_presentation_dropdown_list.GroupPolicyPresentationDropdownList()
            if mapping_value == "#microsoft.graph.groupPolicyPresentationListBox":
                from . import group_policy_presentation_list_box

                return group_policy_presentation_list_box.GroupPolicyPresentationListBox()
            if mapping_value == "#microsoft.graph.groupPolicyPresentationLongDecimalTextBox":
                from . import group_policy_presentation_long_decimal_text_box

                return group_policy_presentation_long_decimal_text_box.GroupPolicyPresentationLongDecimalTextBox()
            if mapping_value == "#microsoft.graph.groupPolicyPresentationMultiTextBox":
                from . import group_policy_presentation_multi_text_box

                return group_policy_presentation_multi_text_box.GroupPolicyPresentationMultiTextBox()
            if mapping_value == "#microsoft.graph.groupPolicyPresentationText":
                from . import group_policy_presentation_text

                return group_policy_presentation_text.GroupPolicyPresentationText()
            if mapping_value == "#microsoft.graph.groupPolicyPresentationTextBox":
                from . import group_policy_presentation_text_box

                return group_policy_presentation_text_box.GroupPolicyPresentationTextBox()
            if mapping_value == "#microsoft.graph.groupPolicyPresentationValue":
                from . import group_policy_presentation_value

                return group_policy_presentation_value.GroupPolicyPresentationValue()
            if mapping_value == "#microsoft.graph.groupPolicyPresentationValueBoolean":
                from . import group_policy_presentation_value_boolean

                return group_policy_presentation_value_boolean.GroupPolicyPresentationValueBoolean()
            if mapping_value == "#microsoft.graph.groupPolicyPresentationValueDecimal":
                from . import group_policy_presentation_value_decimal

                return group_policy_presentation_value_decimal.GroupPolicyPresentationValueDecimal()
            if mapping_value == "#microsoft.graph.groupPolicyPresentationValueList":
                from . import group_policy_presentation_value_list

                return group_policy_presentation_value_list.GroupPolicyPresentationValueList()
            if mapping_value == "#microsoft.graph.groupPolicyPresentationValueLongDecimal":
                from . import group_policy_presentation_value_long_decimal

                return group_policy_presentation_value_long_decimal.GroupPolicyPresentationValueLongDecimal()
            if mapping_value == "#microsoft.graph.groupPolicyPresentationValueMultiText":
                from . import group_policy_presentation_value_multi_text

                return group_policy_presentation_value_multi_text.GroupPolicyPresentationValueMultiText()
            if mapping_value == "#microsoft.graph.groupPolicyPresentationValueText":
                from . import group_policy_presentation_value_text

                return group_policy_presentation_value_text.GroupPolicyPresentationValueText()
            if mapping_value == "#microsoft.graph.groupPolicySettingMapping":
                from . import group_policy_setting_mapping

                return group_policy_setting_mapping.GroupPolicySettingMapping()
            if mapping_value == "#microsoft.graph.groupPolicyUploadedDefinitionFile":
                from . import group_policy_uploaded_definition_file

                return group_policy_uploaded_definition_file.GroupPolicyUploadedDefinitionFile()
            if mapping_value == "#microsoft.graph.groupPolicyUploadedPresentation":
                from . import group_policy_uploaded_presentation

                return group_policy_uploaded_presentation.GroupPolicyUploadedPresentation()
            if mapping_value == "#microsoft.graph.homeRealmDiscoveryPolicy":
                from . import home_realm_discovery_policy

                return home_realm_discovery_policy.HomeRealmDiscoveryPolicy()
            if mapping_value == "#microsoft.graph.horizontalSection":
                from . import horizontal_section

                return horizontal_section.HorizontalSection()
            if mapping_value == "#microsoft.graph.horizontalSectionColumn":
                from . import horizontal_section_column

                return horizontal_section_column.HorizontalSectionColumn()
            if mapping_value == "#microsoft.graph.hostSecurityProfile":
                from . import host_security_profile

                return host_security_profile.HostSecurityProfile()
            if mapping_value == "#microsoft.graph.identityApiConnector":
                from . import identity_api_connector

                return identity_api_connector.IdentityApiConnector()
            if mapping_value == "#microsoft.graph.identityBuiltInUserFlowAttribute":
                from . import identity_built_in_user_flow_attribute

                return identity_built_in_user_flow_attribute.IdentityBuiltInUserFlowAttribute()
            if mapping_value == "#microsoft.graph.identityCustomUserFlowAttribute":
                from . import identity_custom_user_flow_attribute

                return identity_custom_user_flow_attribute.IdentityCustomUserFlowAttribute()
            if mapping_value == "#microsoft.graph.identityGovernance.customTaskExtension":
                from .identity_governance import custom_task_extension

                return custom_task_extension.CustomTaskExtension()
            if mapping_value == "#microsoft.graph.identityGovernance.lifecycleManagementSettings":
                from .identity_governance import lifecycle_management_settings

                return lifecycle_management_settings.LifecycleManagementSettings()
            if mapping_value == "#microsoft.graph.identityGovernance.lifecycleWorkflowsContainer":
                from .identity_governance import lifecycle_workflows_container

                return lifecycle_workflows_container.LifecycleWorkflowsContainer()
            if mapping_value == "#microsoft.graph.identityGovernance.run":
                from .identity_governance import run

                return run.Run()
            if mapping_value == "#microsoft.graph.identityGovernance.task":
                from .identity_governance import task

                return task.Task()
            if mapping_value == "#microsoft.graph.identityGovernance.taskDefinition":
                from .identity_governance import task_definition

                return task_definition.TaskDefinition()
            if mapping_value == "#microsoft.graph.identityGovernance.taskProcessingResult":
                from .identity_governance import task_processing_result

                return task_processing_result.TaskProcessingResult()
            if mapping_value == "#microsoft.graph.identityGovernance.taskReport":
                from .identity_governance import task_report

                return task_report.TaskReport()
            if mapping_value == "#microsoft.graph.identityGovernance.userProcessingResult":
                from .identity_governance import user_processing_result

                return user_processing_result.UserProcessingResult()
            if mapping_value == "#microsoft.graph.identityGovernance.workflowTemplate":
                from .identity_governance import workflow_template

                return workflow_template.WorkflowTemplate()
            if mapping_value == "#microsoft.graph.identityProvider":
                from . import identity_provider

                return identity_provider.IdentityProvider()
            if mapping_value == "#microsoft.graph.identityProviderBase":
                from . import identity_provider_base

                return identity_provider_base.IdentityProviderBase()
            if mapping_value == "#microsoft.graph.identitySecurityDefaultsEnforcementPolicy":
                from . import identity_security_defaults_enforcement_policy

                return identity_security_defaults_enforcement_policy.IdentitySecurityDefaultsEnforcementPolicy()
            if mapping_value == "#microsoft.graph.identityUserFlow":
                from . import identity_user_flow

                return identity_user_flow.IdentityUserFlow()
            if mapping_value == "#microsoft.graph.identityUserFlowAttribute":
                from . import identity_user_flow_attribute

                return identity_user_flow_attribute.IdentityUserFlowAttribute()
            if mapping_value == "#microsoft.graph.identityUserFlowAttributeAssignment":
                from . import identity_user_flow_attribute_assignment

                return identity_user_flow_attribute_assignment.IdentityUserFlowAttributeAssignment()
            if mapping_value == "#microsoft.graph.impactedResource":
                from . import impacted_resource

                return impacted_resource.ImpactedResource()
            if mapping_value == "#microsoft.graph.importedAppleDeviceIdentity":
                from . import imported_apple_device_identity

                return imported_apple_device_identity.ImportedAppleDeviceIdentity()
            if mapping_value == "#microsoft.graph.importedAppleDeviceIdentityResult":
                from . import imported_apple_device_identity_result

                return imported_apple_device_identity_result.ImportedAppleDeviceIdentityResult()
            if mapping_value == "#microsoft.graph.importedDeviceIdentity":
                from . import imported_device_identity

                return imported_device_identity.ImportedDeviceIdentity()
            if mapping_value == "#microsoft.graph.importedDeviceIdentityResult":
                from . import imported_device_identity_result

                return imported_device_identity_result.ImportedDeviceIdentityResult()
            if mapping_value == "#microsoft.graph.importedWindowsAutopilotDeviceIdentity":
                from . import imported_windows_autopilot_device_identity

                return imported_windows_autopilot_device_identity.ImportedWindowsAutopilotDeviceIdentity()
            if mapping_value == "#microsoft.graph.importedWindowsAutopilotDeviceIdentityUpload":
                from . import imported_windows_autopilot_device_identity_upload

                return imported_windows_autopilot_device_identity_upload.ImportedWindowsAutopilotDeviceIdentityUpload()
            if mapping_value == "#microsoft.graph.industryData.azureDataLakeConnector":
                from .industry_data import azure_data_lake_connector

                return azure_data_lake_connector.AzureDataLakeConnector()
            if mapping_value == "#microsoft.graph.industryData.fileDataConnector":
                from .industry_data import file_data_connector

                return file_data_connector.FileDataConnector()
            if mapping_value == "#microsoft.graph.industryData.fileValidateOperation":
                from .industry_data import file_validate_operation

                return file_validate_operation.FileValidateOperation()
            if mapping_value == "#microsoft.graph.industryData.inboundFileFlow":
                from .industry_data import inbound_file_flow

                return inbound_file_flow.InboundFileFlow()
            if mapping_value == "#microsoft.graph.industryData.inboundFlow":
                from .industry_data import inbound_flow

                return inbound_flow.InboundFlow()
            if mapping_value == "#microsoft.graph.industryData.inboundFlowActivity":
                from .industry_data import inbound_flow_activity

                return inbound_flow_activity.InboundFlowActivity()
            if mapping_value == "#microsoft.graph.industryData.industryDataActivity":
                from .industry_data import industry_data_activity

                return industry_data_activity.IndustryDataActivity()
            if mapping_value == "#microsoft.graph.industryData.industryDataConnector":
                from .industry_data import industry_data_connector

                return industry_data_connector.IndustryDataConnector()
            if mapping_value == "#microsoft.graph.industryData.industryDataRoot":
                from .industry_data import industry_data_root

                return industry_data_root.IndustryDataRoot()
            if mapping_value == "#microsoft.graph.industryData.industryDataRun":
                from .industry_data import industry_data_run

                return industry_data_run.IndustryDataRun()
            if mapping_value == "#microsoft.graph.industryData.industryDataRunActivity":
                from .industry_data import industry_data_run_activity

                return industry_data_run_activity.IndustryDataRunActivity()
            if mapping_value == "#microsoft.graph.industryData.outboundFlowActivity":
                from .industry_data import outbound_flow_activity

                return outbound_flow_activity.OutboundFlowActivity()
            if mapping_value == "#microsoft.graph.industryData.referenceDefinition":
                from .industry_data import reference_definition

                return reference_definition.ReferenceDefinition()
            if mapping_value == "#microsoft.graph.industryData.roleGroup":
                from .industry_data import role_group

                return role_group.RoleGroup()
            if mapping_value == "#microsoft.graph.industryData.sourceSystemDefinition":
                from .industry_data import source_system_definition

                return source_system_definition.SourceSystemDefinition()
            if mapping_value == "#microsoft.graph.industryData.validateOperation":
                from .industry_data import validate_operation

                return validate_operation.ValidateOperation()
            if mapping_value == "#microsoft.graph.industryData.yearTimePeriodDefinition":
                from .industry_data import year_time_period_definition

                return year_time_period_definition.YearTimePeriodDefinition()
            if mapping_value == "#microsoft.graph.inferenceClassification":
                from . import inference_classification

                return inference_classification.InferenceClassification()
            if mapping_value == "#microsoft.graph.inferenceClassificationOverride":
                from . import inference_classification_override

                return inference_classification_override.InferenceClassificationOverride()
            if mapping_value == "#microsoft.graph.informationProtection":
                from . import information_protection
                from .security import information_protection

                return information_protection.InformationProtection()
            if mapping_value == "#microsoft.graph.informationProtectionLabel":
                from . import information_protection_label

                return information_protection_label.InformationProtectionLabel()
            if mapping_value == "#microsoft.graph.informationProtectionPolicy":
                from . import information_protection_policy

                return information_protection_policy.InformationProtectionPolicy()
            if mapping_value == "#microsoft.graph.insightsSettings":
                from . import insights_settings

                return insights_settings.InsightsSettings()
            if mapping_value == "#microsoft.graph.internalDomainFederation":
                from . import internal_domain_federation

                return internal_domain_federation.InternalDomainFederation()
            if mapping_value == "#microsoft.graph.internetExplorerMode":
                from . import internet_explorer_mode

                return internet_explorer_mode.InternetExplorerMode()
            if mapping_value == "#microsoft.graph.intuneBrandingProfile":
                from . import intune_branding_profile

                return intune_branding_profile.IntuneBrandingProfile()
            if mapping_value == "#microsoft.graph.intuneBrandingProfileAssignment":
                from . import intune_branding_profile_assignment

                return intune_branding_profile_assignment.IntuneBrandingProfileAssignment()
            if mapping_value == "#microsoft.graph.invalidLicenseAlertConfiguration":
                from . import invalid_license_alert_configuration

                return invalid_license_alert_configuration.InvalidLicenseAlertConfiguration()
            if mapping_value == "#microsoft.graph.invalidLicenseAlertIncident":
                from . import invalid_license_alert_incident

                return invalid_license_alert_incident.InvalidLicenseAlertIncident()
            if mapping_value == "#microsoft.graph.invitation":
                from . import invitation

                return invitation.Invitation()
            if mapping_value == "#microsoft.graph.inviteParticipantsOperation":
                from . import invite_participants_operation

                return invite_participants_operation.InviteParticipantsOperation()
            if mapping_value == "#microsoft.graph.invokeUserFlowListener":
                from . import invoke_user_flow_listener

                return invoke_user_flow_listener.InvokeUserFlowListener()
            if mapping_value == "#microsoft.graph.iosCertificateProfile":
                from . import ios_certificate_profile

                return ios_certificate_profile.IosCertificateProfile()
            if mapping_value == "#microsoft.graph.iosCertificateProfileBase":
                from . import ios_certificate_profile_base

                return ios_certificate_profile_base.IosCertificateProfileBase()
            if mapping_value == "#microsoft.graph.iosCompliancePolicy":
                from . import ios_compliance_policy

                return ios_compliance_policy.IosCompliancePolicy()
            if mapping_value == "#microsoft.graph.iosCustomConfiguration":
                from . import ios_custom_configuration

                return ios_custom_configuration.IosCustomConfiguration()
            if mapping_value == "#microsoft.graph.iosDerivedCredentialAuthenticationConfiguration":
                from . import ios_derived_credential_authentication_configuration

                return ios_derived_credential_authentication_configuration.IosDerivedCredentialAuthenticationConfiguration()
            if mapping_value == "#microsoft.graph.iosDeviceFeaturesConfiguration":
                from . import ios_device_features_configuration

                return ios_device_features_configuration.IosDeviceFeaturesConfiguration()
            if mapping_value == "#microsoft.graph.iosEasEmailProfileConfiguration":
                from . import ios_eas_email_profile_configuration

                return ios_eas_email_profile_configuration.IosEasEmailProfileConfiguration()
            if mapping_value == "#microsoft.graph.iosEducationDeviceConfiguration":
                from . import ios_education_device_configuration

                return ios_education_device_configuration.IosEducationDeviceConfiguration()
            if mapping_value == "#microsoft.graph.iosEduDeviceConfiguration":
                from . import ios_edu_device_configuration

                return ios_edu_device_configuration.IosEduDeviceConfiguration()
            if mapping_value == "#microsoft.graph.iosEnterpriseWiFiConfiguration":
                from . import ios_enterprise_wi_fi_configuration

                return ios_enterprise_wi_fi_configuration.IosEnterpriseWiFiConfiguration()
            if mapping_value == "#microsoft.graph.iosExpeditedCheckinConfiguration":
                from . import ios_expedited_checkin_configuration

                return ios_expedited_checkin_configuration.IosExpeditedCheckinConfiguration()
            if mapping_value == "#microsoft.graph.iosGeneralDeviceConfiguration":
                from . import ios_general_device_configuration

                return ios_general_device_configuration.IosGeneralDeviceConfiguration()
            if mapping_value == "#microsoft.graph.iosikEv2VpnConfiguration":
                from . import iosik_ev2_vpn_configuration

                return iosik_ev2_vpn_configuration.IosikEv2VpnConfiguration()
            if mapping_value == "#microsoft.graph.iosImportedPFXCertificateProfile":
                from . import ios_imported_p_f_x_certificate_profile

                return ios_imported_p_f_x_certificate_profile.IosImportedPFXCertificateProfile()
            if mapping_value == "#microsoft.graph.iosiPadOSWebClip":
                from . import iosi_pad_o_s_web_clip

                return iosi_pad_o_s_web_clip.IosiPadOSWebClip()
            if mapping_value == "#microsoft.graph.iosLobApp":
                from . import ios_lob_app

                return ios_lob_app.IosLobApp()
            if mapping_value == "#microsoft.graph.iosLobAppProvisioningConfiguration":
                from . import ios_lob_app_provisioning_configuration

                return ios_lob_app_provisioning_configuration.IosLobAppProvisioningConfiguration()
            if mapping_value == "#microsoft.graph.iosLobAppProvisioningConfigurationAssignment":
                from . import ios_lob_app_provisioning_configuration_assignment

                return ios_lob_app_provisioning_configuration_assignment.IosLobAppProvisioningConfigurationAssignment()
            if mapping_value == "#microsoft.graph.iosLobAppProvisioningConfigurationPolicySetItem":
                from . import ios_lob_app_provisioning_configuration_policy_set_item

                return ios_lob_app_provisioning_configuration_policy_set_item.IosLobAppProvisioningConfigurationPolicySetItem()
            if mapping_value == "#microsoft.graph.iosManagedAppProtection":
                from . import ios_managed_app_protection

                return ios_managed_app_protection.IosManagedAppProtection()
            if mapping_value == "#microsoft.graph.iosManagedAppRegistration":
                from . import ios_managed_app_registration

                return ios_managed_app_registration.IosManagedAppRegistration()
            if mapping_value == "#microsoft.graph.iosMobileAppConfiguration":
                from . import ios_mobile_app_configuration

                return ios_mobile_app_configuration.IosMobileAppConfiguration()
            if mapping_value == "#microsoft.graph.iosPkcsCertificateProfile":
                from . import ios_pkcs_certificate_profile

                return ios_pkcs_certificate_profile.IosPkcsCertificateProfile()
            if mapping_value == "#microsoft.graph.iosScepCertificateProfile":
                from . import ios_scep_certificate_profile

                return ios_scep_certificate_profile.IosScepCertificateProfile()
            if mapping_value == "#microsoft.graph.iosStoreApp":
                from . import ios_store_app

                return ios_store_app.IosStoreApp()
            if mapping_value == "#microsoft.graph.iosTrustedRootCertificate":
                from . import ios_trusted_root_certificate

                return ios_trusted_root_certificate.IosTrustedRootCertificate()
            if mapping_value == "#microsoft.graph.iosUpdateConfiguration":
                from . import ios_update_configuration

                return ios_update_configuration.IosUpdateConfiguration()
            if mapping_value == "#microsoft.graph.iosUpdateDeviceStatus":
                from . import ios_update_device_status

                return ios_update_device_status.IosUpdateDeviceStatus()
            if mapping_value == "#microsoft.graph.iosVpnConfiguration":
                from . import ios_vpn_configuration

                return ios_vpn_configuration.IosVpnConfiguration()
            if mapping_value == "#microsoft.graph.iosVppApp":
                from . import ios_vpp_app

                return ios_vpp_app.IosVppApp()
            if mapping_value == "#microsoft.graph.iosVppAppAssignedDeviceLicense":
                from . import ios_vpp_app_assigned_device_license

                return ios_vpp_app_assigned_device_license.IosVppAppAssignedDeviceLicense()
            if mapping_value == "#microsoft.graph.iosVppAppAssignedLicense":
                from . import ios_vpp_app_assigned_license

                return ios_vpp_app_assigned_license.IosVppAppAssignedLicense()
            if mapping_value == "#microsoft.graph.iosVppAppAssignedUserLicense":
                from . import ios_vpp_app_assigned_user_license

                return ios_vpp_app_assigned_user_license.IosVppAppAssignedUserLicense()
            if mapping_value == "#microsoft.graph.iosVppEBook":
                from . import ios_vpp_e_book

                return ios_vpp_e_book.IosVppEBook()
            if mapping_value == "#microsoft.graph.iosVppEBookAssignment":
                from . import ios_vpp_e_book_assignment

                return ios_vpp_e_book_assignment.IosVppEBookAssignment()
            if mapping_value == "#microsoft.graph.iosWiFiConfiguration":
                from . import ios_wi_fi_configuration

                return ios_wi_fi_configuration.IosWiFiConfiguration()
            if mapping_value == "#microsoft.graph.ipApplicationSegment":
                from . import ip_application_segment

                return ip_application_segment.IpApplicationSegment()
            if mapping_value == "#microsoft.graph.ipNamedLocation":
                from . import ip_named_location

                return ip_named_location.IpNamedLocation()
            if mapping_value == "#microsoft.graph.ipSecurityProfile":
                from . import ip_security_profile

                return ip_security_profile.IpSecurityProfile()
            if mapping_value == "#microsoft.graph.item":
                from . import item

                return item.Item()
            if mapping_value == "#microsoft.graph.itemActivity":
                from . import item_activity

                return item_activity.ItemActivity()
            if mapping_value == "#microsoft.graph.itemActivityOLD":
                from . import item_activity_o_l_d

                return item_activity_o_l_d.ItemActivityOLD()
            if mapping_value == "#microsoft.graph.itemActivityStat":
                from . import item_activity_stat

                return item_activity_stat.ItemActivityStat()
            if mapping_value == "#microsoft.graph.itemAddress":
                from . import item_address

                return item_address.ItemAddress()
            if mapping_value == "#microsoft.graph.itemAnalytics":
                from . import item_analytics

                return item_analytics.ItemAnalytics()
            if mapping_value == "#microsoft.graph.itemAttachment":
                from . import item_attachment

                return item_attachment.ItemAttachment()
            if mapping_value == "#microsoft.graph.itemCategory":
                from . import item_category

                return item_category.ItemCategory()
            if mapping_value == "#microsoft.graph.itemEmail":
                from . import item_email

                return item_email.ItemEmail()
            if mapping_value == "#microsoft.graph.itemFacet":
                from . import item_facet

                return item_facet.ItemFacet()
            if mapping_value == "#microsoft.graph.itemInsights":
                from . import item_insights

                return item_insights.ItemInsights()
            if mapping_value == "#microsoft.graph.itemPatent":
                from . import item_patent

                return item_patent.ItemPatent()
            if mapping_value == "#microsoft.graph.itemPhone":
                from . import item_phone

                return item_phone.ItemPhone()
            if mapping_value == "#microsoft.graph.itemPublication":
                from . import item_publication

                return item_publication.ItemPublication()
            if mapping_value == "#microsoft.graph.jobResponseBase":
                from . import job_response_base

                return job_response_base.JobResponseBase()
            if mapping_value == "#microsoft.graph.journal":
                from . import journal

                return journal.Journal()
            if mapping_value == "#microsoft.graph.journalLine":
                from . import journal_line

                return journal_line.JournalLine()
            if mapping_value == "#microsoft.graph.languageProficiency":
                from . import language_proficiency

                return language_proficiency.LanguageProficiency()
            if mapping_value == "#microsoft.graph.learningContent":
                from . import learning_content

                return learning_content.LearningContent()
            if mapping_value == "#microsoft.graph.learningProvider":
                from . import learning_provider

                return learning_provider.LearningProvider()
            if mapping_value == "#microsoft.graph.licenseDetails":
                from . import license_details

                return license_details.LicenseDetails()
            if mapping_value == "#microsoft.graph.linkedResource":
                from . import linked_resource

                return linked_resource.LinkedResource()
            if mapping_value == "#microsoft.graph.list":
                from . import list

                return list.List()
            if mapping_value == "#microsoft.graph.listItem":
                from . import list_item

                return list_item.ListItem()
            if mapping_value == "#microsoft.graph.listItemVersion":
                from . import list_item_version

                return list_item_version.ListItemVersion()
            if mapping_value == "#microsoft.graph.localizedNotificationMessage":
                from . import localized_notification_message

                return localized_notification_message.LocalizedNotificationMessage()
            if mapping_value == "#microsoft.graph.longRunningOperation":
                from . import long_running_operation

                return long_running_operation.LongRunningOperation()
            if mapping_value == "#microsoft.graph.lookupResultRow":
                from . import lookup_result_row

                return lookup_result_row.LookupResultRow()
            if mapping_value == "#microsoft.graph.macOSCertificateProfileBase":
                from . import mac_o_s_certificate_profile_base

                return mac_o_s_certificate_profile_base.MacOSCertificateProfileBase()
            if mapping_value == "#microsoft.graph.macOSCompliancePolicy":
                from . import mac_o_s_compliance_policy

                return mac_o_s_compliance_policy.MacOSCompliancePolicy()
            if mapping_value == "#microsoft.graph.macOSCustomAppConfiguration":
                from . import mac_o_s_custom_app_configuration

                return mac_o_s_custom_app_configuration.MacOSCustomAppConfiguration()
            if mapping_value == "#microsoft.graph.macOSCustomConfiguration":
                from . import mac_o_s_custom_configuration

                return mac_o_s_custom_configuration.MacOSCustomConfiguration()
            if mapping_value == "#microsoft.graph.macOSDeviceFeaturesConfiguration":
                from . import mac_o_s_device_features_configuration

                return mac_o_s_device_features_configuration.MacOSDeviceFeaturesConfiguration()
            if mapping_value == "#microsoft.graph.macOSDmgApp":
                from . import mac_o_s_dmg_app

                return mac_o_s_dmg_app.MacOSDmgApp()
            if mapping_value == "#microsoft.graph.macOSEndpointProtectionConfiguration":
                from . import mac_o_s_endpoint_protection_configuration

                return mac_o_s_endpoint_protection_configuration.MacOSEndpointProtectionConfiguration()
            if mapping_value == "#microsoft.graph.macOSEnterpriseWiFiConfiguration":
                from . import mac_o_s_enterprise_wi_fi_configuration

                return mac_o_s_enterprise_wi_fi_configuration.MacOSEnterpriseWiFiConfiguration()
            if mapping_value == "#microsoft.graph.macOSExtensionsConfiguration":
                from . import mac_o_s_extensions_configuration

                return mac_o_s_extensions_configuration.MacOSExtensionsConfiguration()
            if mapping_value == "#microsoft.graph.macOSGeneralDeviceConfiguration":
                from . import mac_o_s_general_device_configuration

                return mac_o_s_general_device_configuration.MacOSGeneralDeviceConfiguration()
            if mapping_value == "#microsoft.graph.macOSImportedPFXCertificateProfile":
                from . import mac_o_s_imported_p_f_x_certificate_profile

                return mac_o_s_imported_p_f_x_certificate_profile.MacOSImportedPFXCertificateProfile()
            if mapping_value == "#microsoft.graph.macOSLobApp":
                from . import mac_o_s_lob_app

                return mac_o_s_lob_app.MacOSLobApp()
            if mapping_value == "#microsoft.graph.macOSMdatpApp":
                from . import mac_o_s_mdatp_app

                return mac_o_s_mdatp_app.MacOSMdatpApp()
            if mapping_value == "#microsoft.graph.macOSMicrosoftDefenderApp":
                from . import mac_o_s_microsoft_defender_app

                return mac_o_s_microsoft_defender_app.MacOSMicrosoftDefenderApp()
            if mapping_value == "#microsoft.graph.macOSMicrosoftEdgeApp":
                from . import mac_o_s_microsoft_edge_app

                return mac_o_s_microsoft_edge_app.MacOSMicrosoftEdgeApp()
            if mapping_value == "#microsoft.graph.macOSOfficeSuiteApp":
                from . import mac_o_s_office_suite_app

                return mac_o_s_office_suite_app.MacOSOfficeSuiteApp()
            if mapping_value == "#microsoft.graph.macOSPkcsCertificateProfile":
                from . import mac_o_s_pkcs_certificate_profile

                return mac_o_s_pkcs_certificate_profile.MacOSPkcsCertificateProfile()
            if mapping_value == "#microsoft.graph.macOSScepCertificateProfile":
                from . import mac_o_s_scep_certificate_profile

                return mac_o_s_scep_certificate_profile.MacOSScepCertificateProfile()
            if mapping_value == "#microsoft.graph.macOSSoftwareUpdateAccountSummary":
                from . import mac_o_s_software_update_account_summary

                return mac_o_s_software_update_account_summary.MacOSSoftwareUpdateAccountSummary()
            if mapping_value == "#microsoft.graph.macOSSoftwareUpdateCategorySummary":
                from . import mac_o_s_software_update_category_summary

                return mac_o_s_software_update_category_summary.MacOSSoftwareUpdateCategorySummary()
            if mapping_value == "#microsoft.graph.macOSSoftwareUpdateConfiguration":
                from . import mac_o_s_software_update_configuration

                return mac_o_s_software_update_configuration.MacOSSoftwareUpdateConfiguration()
            if mapping_value == "#microsoft.graph.macOSSoftwareUpdateStateSummary":
                from . import mac_o_s_software_update_state_summary

                return mac_o_s_software_update_state_summary.MacOSSoftwareUpdateStateSummary()
            if mapping_value == "#microsoft.graph.macOSTrustedRootCertificate":
                from . import mac_o_s_trusted_root_certificate

                return mac_o_s_trusted_root_certificate.MacOSTrustedRootCertificate()
            if mapping_value == "#microsoft.graph.macOSVpnConfiguration":
                from . import mac_o_s_vpn_configuration

                return mac_o_s_vpn_configuration.MacOSVpnConfiguration()
            if mapping_value == "#microsoft.graph.macOsVppApp":
                from . import mac_os_vpp_app

                return mac_os_vpp_app.MacOsVppApp()
            if mapping_value == "#microsoft.graph.macOsVppAppAssignedLicense":
                from . import mac_os_vpp_app_assigned_license

                return mac_os_vpp_app_assigned_license.MacOsVppAppAssignedLicense()
            if mapping_value == "#microsoft.graph.macOSWiFiConfiguration":
                from . import mac_o_s_wi_fi_configuration

                return mac_o_s_wi_fi_configuration.MacOSWiFiConfiguration()
            if mapping_value == "#microsoft.graph.macOSWiredNetworkConfiguration":
                from . import mac_o_s_wired_network_configuration

                return mac_o_s_wired_network_configuration.MacOSWiredNetworkConfiguration()
            if mapping_value == "#microsoft.graph.mailAssessmentRequest":
                from . import mail_assessment_request

                return mail_assessment_request.MailAssessmentRequest()
            if mapping_value == "#microsoft.graph.mailFolder":
                from . import mail_folder

                return mail_folder.MailFolder()
            if mapping_value == "#microsoft.graph.mailSearchFolder":
                from . import mail_search_folder

                return mail_search_folder.MailSearchFolder()
            if mapping_value == "#microsoft.graph.malwareStateForWindowsDevice":
                from . import malware_state_for_windows_device

                return malware_state_for_windows_device.MalwareStateForWindowsDevice()
            if mapping_value == "#microsoft.graph.managedAllDeviceCertificateState":
                from . import managed_all_device_certificate_state

                return managed_all_device_certificate_state.ManagedAllDeviceCertificateState()
            if mapping_value == "#microsoft.graph.managedAndroidLobApp":
                from . import managed_android_lob_app

                return managed_android_lob_app.ManagedAndroidLobApp()
            if mapping_value == "#microsoft.graph.managedAndroidStoreApp":
                from . import managed_android_store_app

                return managed_android_store_app.ManagedAndroidStoreApp()
            if mapping_value == "#microsoft.graph.managedApp":
                from . import managed_app

                return managed_app.ManagedApp()
            if mapping_value == "#microsoft.graph.managedAppConfiguration":
                from . import managed_app_configuration

                return managed_app_configuration.ManagedAppConfiguration()
            if mapping_value == "#microsoft.graph.managedAppOperation":
                from . import managed_app_operation

                return managed_app_operation.ManagedAppOperation()
            if mapping_value == "#microsoft.graph.managedAppPolicy":
                from . import managed_app_policy

                return managed_app_policy.ManagedAppPolicy()
            if mapping_value == "#microsoft.graph.managedAppPolicyDeploymentSummary":
                from . import managed_app_policy_deployment_summary

                return managed_app_policy_deployment_summary.ManagedAppPolicyDeploymentSummary()
            if mapping_value == "#microsoft.graph.managedAppProtection":
                from . import managed_app_protection

                return managed_app_protection.ManagedAppProtection()
            if mapping_value == "#microsoft.graph.managedAppProtectionPolicySetItem":
                from . import managed_app_protection_policy_set_item

                return managed_app_protection_policy_set_item.ManagedAppProtectionPolicySetItem()
            if mapping_value == "#microsoft.graph.managedAppRegistration":
                from . import managed_app_registration

                return managed_app_registration.ManagedAppRegistration()
            if mapping_value == "#microsoft.graph.managedAppStatus":
                from . import managed_app_status

                return managed_app_status.ManagedAppStatus()
            if mapping_value == "#microsoft.graph.managedAppStatusRaw":
                from . import managed_app_status_raw

                return managed_app_status_raw.ManagedAppStatusRaw()
            if mapping_value == "#microsoft.graph.managedDevice":
                from . import managed_device

                return managed_device.ManagedDevice()
            if mapping_value == "#microsoft.graph.managedDeviceCertificateState":
                from . import managed_device_certificate_state

                return managed_device_certificate_state.ManagedDeviceCertificateState()
            if mapping_value == "#microsoft.graph.managedDeviceEncryptionState":
                from . import managed_device_encryption_state

                return managed_device_encryption_state.ManagedDeviceEncryptionState()
            if mapping_value == "#microsoft.graph.managedDeviceMobileAppConfiguration":
                from . import managed_device_mobile_app_configuration

                return managed_device_mobile_app_configuration.ManagedDeviceMobileAppConfiguration()
            if mapping_value == "#microsoft.graph.managedDeviceMobileAppConfigurationAssignment":
                from . import managed_device_mobile_app_configuration_assignment

                return managed_device_mobile_app_configuration_assignment.ManagedDeviceMobileAppConfigurationAssignment()
            if mapping_value == "#microsoft.graph.managedDeviceMobileAppConfigurationDeviceStatus":
                from . import managed_device_mobile_app_configuration_device_status

                return managed_device_mobile_app_configuration_device_status.ManagedDeviceMobileAppConfigurationDeviceStatus()
            if mapping_value == "#microsoft.graph.managedDeviceMobileAppConfigurationDeviceSummary":
                from . import managed_device_mobile_app_configuration_device_summary

                return managed_device_mobile_app_configuration_device_summary.ManagedDeviceMobileAppConfigurationDeviceSummary()
            if mapping_value == "#microsoft.graph.managedDeviceMobileAppConfigurationPolicySetItem":
                from . import managed_device_mobile_app_configuration_policy_set_item

                return managed_device_mobile_app_configuration_policy_set_item.ManagedDeviceMobileAppConfigurationPolicySetItem()
            if mapping_value == "#microsoft.graph.managedDeviceMobileAppConfigurationState":
                from . import managed_device_mobile_app_configuration_state

                return managed_device_mobile_app_configuration_state.ManagedDeviceMobileAppConfigurationState()
            if mapping_value == "#microsoft.graph.managedDeviceMobileAppConfigurationUserStatus":
                from . import managed_device_mobile_app_configuration_user_status

                return managed_device_mobile_app_configuration_user_status.ManagedDeviceMobileAppConfigurationUserStatus()
            if mapping_value == "#microsoft.graph.managedDeviceMobileAppConfigurationUserSummary":
                from . import managed_device_mobile_app_configuration_user_summary

                return managed_device_mobile_app_configuration_user_summary.ManagedDeviceMobileAppConfigurationUserSummary()
            if mapping_value == "#microsoft.graph.managedDeviceOverview":
                from . import managed_device_overview

                return managed_device_overview.ManagedDeviceOverview()
            if mapping_value == "#microsoft.graph.managedEBook":
                from . import managed_e_book

                return managed_e_book.ManagedEBook()
            if mapping_value == "#microsoft.graph.managedEBookAssignment":
                from . import managed_e_book_assignment

                return managed_e_book_assignment.ManagedEBookAssignment()
            if mapping_value == "#microsoft.graph.managedEBookCategory":
                from . import managed_e_book_category

                return managed_e_book_category.ManagedEBookCategory()
            if mapping_value == "#microsoft.graph.managedIOSLobApp":
                from . import managed_i_o_s_lob_app

                return managed_i_o_s_lob_app.ManagedIOSLobApp()
            if mapping_value == "#microsoft.graph.managedIOSStoreApp":
                from . import managed_i_o_s_store_app

                return managed_i_o_s_store_app.ManagedIOSStoreApp()
            if mapping_value == "#microsoft.graph.managedMobileApp":
                from . import managed_mobile_app

                return managed_mobile_app.ManagedMobileApp()
            if mapping_value == "#microsoft.graph.managedMobileLobApp":
                from . import managed_mobile_lob_app

                return managed_mobile_lob_app.ManagedMobileLobApp()
            if mapping_value == "#microsoft.graph.managedTenants.aggregatedPolicyCompliance":
                from .managed_tenants import aggregated_policy_compliance

                return aggregated_policy_compliance.AggregatedPolicyCompliance()
            if mapping_value == "#microsoft.graph.managedTenants.appPerformance":
                from .managed_tenants import app_performance

                return app_performance.AppPerformance()
            if mapping_value == "#microsoft.graph.managedTenants.auditEvent":
                from . import audit_event
                from .managed_tenants import audit_event

                return audit_event.AuditEvent()
            if mapping_value == "#microsoft.graph.managedTenants.cloudPcConnection":
                from .managed_tenants import cloud_pc_connection

                return cloud_pc_connection.CloudPcConnection()
            if mapping_value == "#microsoft.graph.managedTenants.cloudPcDevice":
                from .managed_tenants import cloud_pc_device

                return cloud_pc_device.CloudPcDevice()
            if mapping_value == "#microsoft.graph.managedTenants.cloudPcOverview":
                from .managed_tenants import cloud_pc_overview

                return cloud_pc_overview.CloudPcOverview()
            if mapping_value == "#microsoft.graph.managedTenants.conditionalAccessPolicyCoverage":
                from .managed_tenants import conditional_access_policy_coverage

                return conditional_access_policy_coverage.ConditionalAccessPolicyCoverage()
            if mapping_value == "#microsoft.graph.managedTenants.credentialUserRegistrationsSummary":
                from .managed_tenants import credential_user_registrations_summary

                return credential_user_registrations_summary.CredentialUserRegistrationsSummary()
            if mapping_value == "#microsoft.graph.managedTenants.deviceAppPerformance":
                from .managed_tenants import device_app_performance

                return device_app_performance.DeviceAppPerformance()
            if mapping_value == "#microsoft.graph.managedTenants.deviceCompliancePolicySettingStateSummary":
                from . import device_compliance_policy_setting_state_summary
                from .managed_tenants import device_compliance_policy_setting_state_summary

                return device_compliance_policy_setting_state_summary.DeviceCompliancePolicySettingStateSummary()
            if mapping_value == "#microsoft.graph.managedTenants.deviceHealthStatus":
                from .managed_tenants import device_health_status

                return device_health_status.DeviceHealthStatus()
            if mapping_value == "#microsoft.graph.managedTenants.managedDeviceCompliance":
                from .managed_tenants import managed_device_compliance

                return managed_device_compliance.ManagedDeviceCompliance()
            if mapping_value == "#microsoft.graph.managedTenants.managedDeviceComplianceTrend":
                from .managed_tenants import managed_device_compliance_trend

                return managed_device_compliance_trend.ManagedDeviceComplianceTrend()
            if mapping_value == "#microsoft.graph.managedTenants.managedTenant":
                from .managed_tenants import managed_tenant

                return managed_tenant.ManagedTenant()
            if mapping_value == "#microsoft.graph.managedTenants.managedTenantAlert":
                from .managed_tenants import managed_tenant_alert

                return managed_tenant_alert.ManagedTenantAlert()
            if mapping_value == "#microsoft.graph.managedTenants.managedTenantAlertLog":
                from .managed_tenants import managed_tenant_alert_log

                return managed_tenant_alert_log.ManagedTenantAlertLog()
            if mapping_value == "#microsoft.graph.managedTenants.managedTenantAlertRule":
                from .managed_tenants import managed_tenant_alert_rule

                return managed_tenant_alert_rule.ManagedTenantAlertRule()
            if mapping_value == "#microsoft.graph.managedTenants.managedTenantAlertRuleDefinition":
                from .managed_tenants import managed_tenant_alert_rule_definition

                return managed_tenant_alert_rule_definition.ManagedTenantAlertRuleDefinition()
            if mapping_value == "#microsoft.graph.managedTenants.managedTenantApiNotification":
                from .managed_tenants import managed_tenant_api_notification

                return managed_tenant_api_notification.ManagedTenantApiNotification()
            if mapping_value == "#microsoft.graph.managedTenants.managedTenantEmailNotification":
                from .managed_tenants import managed_tenant_email_notification

                return managed_tenant_email_notification.ManagedTenantEmailNotification()
            if mapping_value == "#microsoft.graph.managedTenants.managedTenantTicketingEndpoint":
                from .managed_tenants import managed_tenant_ticketing_endpoint

                return managed_tenant_ticketing_endpoint.ManagedTenantTicketingEndpoint()
            if mapping_value == "#microsoft.graph.managedTenants.managementAction":
                from .managed_tenants import management_action

                return management_action.ManagementAction()
            if mapping_value == "#microsoft.graph.managedTenants.managementActionTenantDeploymentStatus":
                from .managed_tenants import management_action_tenant_deployment_status

                return management_action_tenant_deployment_status.ManagementActionTenantDeploymentStatus()
            if mapping_value == "#microsoft.graph.managedTenants.managementIntent":
                from .managed_tenants import management_intent

                return management_intent.ManagementIntent()
            if mapping_value == "#microsoft.graph.managedTenants.managementTemplate":
                from .managed_tenants import management_template

                return management_template.ManagementTemplate()
            if mapping_value == "#microsoft.graph.managedTenants.managementTemplateCollection":
                from .managed_tenants import management_template_collection

                return management_template_collection.ManagementTemplateCollection()
            if mapping_value == "#microsoft.graph.managedTenants.managementTemplateCollectionTenantSummary":
                from .managed_tenants import management_template_collection_tenant_summary

                return management_template_collection_tenant_summary.ManagementTemplateCollectionTenantSummary()
            if mapping_value == "#microsoft.graph.managedTenants.managementTemplateStep":
                from .managed_tenants import management_template_step

                return management_template_step.ManagementTemplateStep()
            if mapping_value == "#microsoft.graph.managedTenants.managementTemplateStepDeployment":
                from .managed_tenants import management_template_step_deployment

                return management_template_step_deployment.ManagementTemplateStepDeployment()
            if mapping_value == "#microsoft.graph.managedTenants.managementTemplateStepTenantSummary":
                from .managed_tenants import management_template_step_tenant_summary

                return management_template_step_tenant_summary.ManagementTemplateStepTenantSummary()
            if mapping_value == "#microsoft.graph.managedTenants.managementTemplateStepVersion":
                from .managed_tenants import management_template_step_version

                return management_template_step_version.ManagementTemplateStepVersion()
            if mapping_value == "#microsoft.graph.managedTenants.tenant":
                from .managed_tenants import tenant

                return tenant.Tenant()
            if mapping_value == "#microsoft.graph.managedTenants.tenantCustomizedInformation":
                from .managed_tenants import tenant_customized_information

                return tenant_customized_information.TenantCustomizedInformation()
            if mapping_value == "#microsoft.graph.managedTenants.tenantDetailedInformation":
                from .managed_tenants import tenant_detailed_information

                return tenant_detailed_information.TenantDetailedInformation()
            if mapping_value == "#microsoft.graph.managedTenants.tenantGroup":
                from .managed_tenants import tenant_group

                return tenant_group.TenantGroup()
            if mapping_value == "#microsoft.graph.managedTenants.tenantTag":
                from .managed_tenants import tenant_tag

                return tenant_tag.TenantTag()
            if mapping_value == "#microsoft.graph.managedTenants.windowsDeviceMalwareState":
                from . import windows_device_malware_state
                from .managed_tenants import windows_device_malware_state

                return windows_device_malware_state.WindowsDeviceMalwareState()
            if mapping_value == "#microsoft.graph.managedTenants.windowsProtectionState":
                from . import windows_protection_state
                from .managed_tenants import windows_protection_state

                return windows_protection_state.WindowsProtectionState()
            if mapping_value == "#microsoft.graph.mdmWindowsInformationProtectionPolicy":
                from . import mdm_windows_information_protection_policy

                return mdm_windows_information_protection_policy.MdmWindowsInformationProtectionPolicy()
            if mapping_value == "#microsoft.graph.mdmWindowsInformationProtectionPolicyPolicySetItem":
                from . import mdm_windows_information_protection_policy_policy_set_item

                return mdm_windows_information_protection_policy_policy_set_item.MdmWindowsInformationProtectionPolicyPolicySetItem()
            if mapping_value == "#microsoft.graph.meetingActivityStatistics":
                from . import meeting_activity_statistics

                return meeting_activity_statistics.MeetingActivityStatistics()
            if mapping_value == "#microsoft.graph.meetingAttendanceReport":
                from . import meeting_attendance_report

                return meeting_attendance_report.MeetingAttendanceReport()
            if mapping_value == "#microsoft.graph.meetingRegistrant":
                from . import meeting_registrant

                return meeting_registrant.MeetingRegistrant()
            if mapping_value == "#microsoft.graph.meetingRegistrantBase":
                from . import meeting_registrant_base

                return meeting_registrant_base.MeetingRegistrantBase()
            if mapping_value == "#microsoft.graph.meetingRegistration":
                from . import meeting_registration

                return meeting_registration.MeetingRegistration()
            if mapping_value == "#microsoft.graph.meetingRegistrationBase":
                from . import meeting_registration_base

                return meeting_registration_base.MeetingRegistrationBase()
            if mapping_value == "#microsoft.graph.meetingRegistrationQuestion":
                from . import meeting_registration_question

                return meeting_registration_question.MeetingRegistrationQuestion()
            if mapping_value == "#microsoft.graph.membershipOutlierInsight":
                from . import membership_outlier_insight

                return membership_outlier_insight.MembershipOutlierInsight()
            if mapping_value == "#microsoft.graph.mention":
                from . import mention

                return mention.Mention()
            if mapping_value == "#microsoft.graph.message":
                from . import message

                return message.Message()
            if mapping_value == "#microsoft.graph.messageEvent":
                from . import message_event

                return message_event.MessageEvent()
            if mapping_value == "#microsoft.graph.messageRecipient":
                from . import message_recipient

                return message_recipient.MessageRecipient()
            if mapping_value == "#microsoft.graph.messageRule":
                from . import message_rule

                return message_rule.MessageRule()
            if mapping_value == "#microsoft.graph.messageTrace":
                from . import message_trace

                return message_trace.MessageTrace()
            if mapping_value == "#microsoft.graph.microsoftAccountUserConversationMember":
                from . import microsoft_account_user_conversation_member

                return microsoft_account_user_conversation_member.MicrosoftAccountUserConversationMember()
            if mapping_value == "#microsoft.graph.microsoftApplicationDataAccessSettings":
                from . import microsoft_application_data_access_settings

                return microsoft_application_data_access_settings.MicrosoftApplicationDataAccessSettings()
            if mapping_value == "#microsoft.graph.microsoftAuthenticatorAuthenticationMethod":
                from . import microsoft_authenticator_authentication_method

                return microsoft_authenticator_authentication_method.MicrosoftAuthenticatorAuthenticationMethod()
            if mapping_value == "#microsoft.graph.microsoftAuthenticatorAuthenticationMethodConfiguration":
                from . import microsoft_authenticator_authentication_method_configuration

                return microsoft_authenticator_authentication_method_configuration.MicrosoftAuthenticatorAuthenticationMethodConfiguration()
            if mapping_value == "#microsoft.graph.microsoftAuthenticatorAuthenticationMethodTarget":
                from . import microsoft_authenticator_authentication_method_target

                return microsoft_authenticator_authentication_method_target.MicrosoftAuthenticatorAuthenticationMethodTarget()
            if mapping_value == "#microsoft.graph.microsoftStoreForBusinessApp":
                from . import microsoft_store_for_business_app

                return microsoft_store_for_business_app.MicrosoftStoreForBusinessApp()
            if mapping_value == "#microsoft.graph.microsoftStoreForBusinessContainedApp":
                from . import microsoft_store_for_business_contained_app

                return microsoft_store_for_business_contained_app.MicrosoftStoreForBusinessContainedApp()
            if mapping_value == "#microsoft.graph.microsoftTunnelConfiguration":
                from . import microsoft_tunnel_configuration

                return microsoft_tunnel_configuration.MicrosoftTunnelConfiguration()
            if mapping_value == "#microsoft.graph.microsoftTunnelHealthThreshold":
                from . import microsoft_tunnel_health_threshold

                return microsoft_tunnel_health_threshold.MicrosoftTunnelHealthThreshold()
            if mapping_value == "#microsoft.graph.microsoftTunnelServer":
                from . import microsoft_tunnel_server

                return microsoft_tunnel_server.MicrosoftTunnelServer()
            if mapping_value == "#microsoft.graph.microsoftTunnelServerLogCollectionResponse":
                from . import microsoft_tunnel_server_log_collection_response

                return microsoft_tunnel_server_log_collection_response.MicrosoftTunnelServerLogCollectionResponse()
            if mapping_value == "#microsoft.graph.microsoftTunnelSite":
                from . import microsoft_tunnel_site

                return microsoft_tunnel_site.MicrosoftTunnelSite()
            if mapping_value == "#microsoft.graph.mobileApp":
                from . import mobile_app

                return mobile_app.MobileApp()
            if mapping_value == "#microsoft.graph.mobileAppAssignment":
                from . import mobile_app_assignment

                return mobile_app_assignment.MobileAppAssignment()
            if mapping_value == "#microsoft.graph.mobileAppCategory":
                from . import mobile_app_category

                return mobile_app_category.MobileAppCategory()
            if mapping_value == "#microsoft.graph.mobileAppContent":
                from . import mobile_app_content

                return mobile_app_content.MobileAppContent()
            if mapping_value == "#microsoft.graph.mobileAppContentFile":
                from . import mobile_app_content_file

                return mobile_app_content_file.MobileAppContentFile()
            if mapping_value == "#microsoft.graph.mobileAppDependency":
                from . import mobile_app_dependency

                return mobile_app_dependency.MobileAppDependency()
            if mapping_value == "#microsoft.graph.mobileAppInstallStatus":
                from . import mobile_app_install_status

                return mobile_app_install_status.MobileAppInstallStatus()
            if mapping_value == "#microsoft.graph.mobileAppInstallSummary":
                from . import mobile_app_install_summary

                return mobile_app_install_summary.MobileAppInstallSummary()
            if mapping_value == "#microsoft.graph.mobileAppIntentAndState":
                from . import mobile_app_intent_and_state

                return mobile_app_intent_and_state.MobileAppIntentAndState()
            if mapping_value == "#microsoft.graph.mobileAppPolicySetItem":
                from . import mobile_app_policy_set_item

                return mobile_app_policy_set_item.MobileAppPolicySetItem()
            if mapping_value == "#microsoft.graph.mobileAppProvisioningConfigGroupAssignment":
                from . import mobile_app_provisioning_config_group_assignment

                return mobile_app_provisioning_config_group_assignment.MobileAppProvisioningConfigGroupAssignment()
            if mapping_value == "#microsoft.graph.mobileAppRelationship":
                from . import mobile_app_relationship

                return mobile_app_relationship.MobileAppRelationship()
            if mapping_value == "#microsoft.graph.mobileAppSupersedence":
                from . import mobile_app_supersedence

                return mobile_app_supersedence.MobileAppSupersedence()
            if mapping_value == "#microsoft.graph.mobileAppTroubleshootingEvent":
                from . import mobile_app_troubleshooting_event

                return mobile_app_troubleshooting_event.MobileAppTroubleshootingEvent()
            if mapping_value == "#microsoft.graph.mobileContainedApp":
                from . import mobile_contained_app

                return mobile_contained_app.MobileContainedApp()
            if mapping_value == "#microsoft.graph.mobileLobApp":
                from . import mobile_lob_app

                return mobile_lob_app.MobileLobApp()
            if mapping_value == "#microsoft.graph.mobileThreatDefenseConnector":
                from . import mobile_threat_defense_connector

                return mobile_threat_defense_connector.MobileThreatDefenseConnector()
            if mapping_value == "#microsoft.graph.mobilityManagementPolicy":
                from . import mobility_management_policy

                return mobility_management_policy.MobilityManagementPolicy()
            if mapping_value == "#microsoft.graph.multiValueLegacyExtendedProperty":
                from . import multi_value_legacy_extended_property

                return multi_value_legacy_extended_property.MultiValueLegacyExtendedProperty()
            if mapping_value == "#microsoft.graph.muteParticipantOperation":
                from . import mute_participant_operation

                return mute_participant_operation.MuteParticipantOperation()
            if mapping_value == "#microsoft.graph.muteParticipantsOperation":
                from . import mute_participants_operation

                return mute_participants_operation.MuteParticipantsOperation()
            if mapping_value == "#microsoft.graph.namedLocation":
                from . import named_location

                return named_location.NamedLocation()
            if mapping_value == "#microsoft.graph.ndesConnector":
                from . import ndes_connector

                return ndes_connector.NdesConnector()
            if mapping_value == "#microsoft.graph.noMfaOnRoleActivationAlertConfiguration":
                from . import no_mfa_on_role_activation_alert_configuration

                return no_mfa_on_role_activation_alert_configuration.NoMfaOnRoleActivationAlertConfiguration()
            if mapping_value == "#microsoft.graph.noMfaOnRoleActivationAlertIncident":
                from . import no_mfa_on_role_activation_alert_incident

                return no_mfa_on_role_activation_alert_incident.NoMfaOnRoleActivationAlertIncident()
            if mapping_value == "#microsoft.graph.note":
                from . import note

                return note.Note()
            if mapping_value == "#microsoft.graph.notebook":
                from . import notebook

                return notebook.Notebook()
            if mapping_value == "#microsoft.graph.notification":
                from . import notification

                return notification.Notification()
            if mapping_value == "#microsoft.graph.notificationMessageTemplate":
                from . import notification_message_template

                return notification_message_template.NotificationMessageTemplate()
            if mapping_value == "#microsoft.graph.oAuth2PermissionGrant":
                from . import o_auth2_permission_grant

                return o_auth2_permission_grant.OAuth2PermissionGrant()
            if mapping_value == "#microsoft.graph.oemWarrantyInformationOnboarding":
                from . import oem_warranty_information_onboarding

                return oem_warranty_information_onboarding.OemWarrantyInformationOnboarding()
            if mapping_value == "#microsoft.graph.offerShiftRequest":
                from . import offer_shift_request

                return offer_shift_request.OfferShiftRequest()
            if mapping_value == "#microsoft.graph.office365ActiveUserCounts":
                from . import office365_active_user_counts

                return office365_active_user_counts.Office365ActiveUserCounts()
            if mapping_value == "#microsoft.graph.office365ActiveUserDetail":
                from . import office365_active_user_detail

                return office365_active_user_detail.Office365ActiveUserDetail()
            if mapping_value == "#microsoft.graph.office365GroupsActivityCounts":
                from . import office365_groups_activity_counts

                return office365_groups_activity_counts.Office365GroupsActivityCounts()
            if mapping_value == "#microsoft.graph.office365GroupsActivityDetail":
                from . import office365_groups_activity_detail

                return office365_groups_activity_detail.Office365GroupsActivityDetail()
            if mapping_value == "#microsoft.graph.office365GroupsActivityFileCounts":
                from . import office365_groups_activity_file_counts

                return office365_groups_activity_file_counts.Office365GroupsActivityFileCounts()
            if mapping_value == "#microsoft.graph.office365GroupsActivityGroupCounts":
                from . import office365_groups_activity_group_counts

                return office365_groups_activity_group_counts.Office365GroupsActivityGroupCounts()
            if mapping_value == "#microsoft.graph.office365GroupsActivityStorage":
                from . import office365_groups_activity_storage

                return office365_groups_activity_storage.Office365GroupsActivityStorage()
            if mapping_value == "#microsoft.graph.office365ServicesUserCounts":
                from . import office365_services_user_counts

                return office365_services_user_counts.Office365ServicesUserCounts()
            if mapping_value == "#microsoft.graph.officeClientConfiguration":
                from . import office_client_configuration

                return office_client_configuration.OfficeClientConfiguration()
            if mapping_value == "#microsoft.graph.officeClientConfigurationAssignment":
                from . import office_client_configuration_assignment

                return office_client_configuration_assignment.OfficeClientConfigurationAssignment()
            if mapping_value == "#microsoft.graph.officeGraphInsights":
                from . import office_graph_insights

                return office_graph_insights.OfficeGraphInsights()
            if mapping_value == "#microsoft.graph.officeSuiteApp":
                from . import office_suite_app

                return office_suite_app.OfficeSuiteApp()
            if mapping_value == "#microsoft.graph.onenote":
                from . import onenote

                return onenote.Onenote()
            if mapping_value == "#microsoft.graph.onenoteEntityBaseModel":
                from . import onenote_entity_base_model

                return onenote_entity_base_model.OnenoteEntityBaseModel()
            if mapping_value == "#microsoft.graph.onenoteEntityHierarchyModel":
                from . import onenote_entity_hierarchy_model

                return onenote_entity_hierarchy_model.OnenoteEntityHierarchyModel()
            if mapping_value == "#microsoft.graph.onenoteEntitySchemaObjectModel":
                from . import onenote_entity_schema_object_model

                return onenote_entity_schema_object_model.OnenoteEntitySchemaObjectModel()
            if mapping_value == "#microsoft.graph.onenoteOperation":
                from . import onenote_operation

                return onenote_operation.OnenoteOperation()
            if mapping_value == "#microsoft.graph.onenotePage":
                from . import onenote_page

                return onenote_page.OnenotePage()
            if mapping_value == "#microsoft.graph.onenoteResource":
                from . import onenote_resource

                return onenote_resource.OnenoteResource()
            if mapping_value == "#microsoft.graph.onenoteSection":
                from . import onenote_section

                return onenote_section.OnenoteSection()
            if mapping_value == "#microsoft.graph.onlineMeeting":
                from . import online_meeting

                return online_meeting.OnlineMeeting()
            if mapping_value == "#microsoft.graph.onPremisesAgent":
                from . import on_premises_agent

                return on_premises_agent.OnPremisesAgent()
            if mapping_value == "#microsoft.graph.onPremisesAgentGroup":
                from . import on_premises_agent_group

                return on_premises_agent_group.OnPremisesAgentGroup()
            if mapping_value == "#microsoft.graph.onPremisesConditionalAccessSettings":
                from . import on_premises_conditional_access_settings

                return on_premises_conditional_access_settings.OnPremisesConditionalAccessSettings()
            if mapping_value == "#microsoft.graph.onPremisesDirectorySynchronization":
                from . import on_premises_directory_synchronization

                return on_premises_directory_synchronization.OnPremisesDirectorySynchronization()
            if mapping_value == "#microsoft.graph.onPremisesPublishingProfile":
                from . import on_premises_publishing_profile

                return on_premises_publishing_profile.OnPremisesPublishingProfile()
            if mapping_value == "#microsoft.graph.onTokenIssuanceStartCustomExtension":
                from . import on_token_issuance_start_custom_extension

                return on_token_issuance_start_custom_extension.OnTokenIssuanceStartCustomExtension()
            if mapping_value == "#microsoft.graph.onTokenIssuanceStartListener":
                from . import on_token_issuance_start_listener

                return on_token_issuance_start_listener.OnTokenIssuanceStartListener()
            if mapping_value == "#microsoft.graph.openIdConnectIdentityProvider":
                from . import open_id_connect_identity_provider

                return open_id_connect_identity_provider.OpenIdConnectIdentityProvider()
            if mapping_value == "#microsoft.graph.openIdConnectProvider":
                from . import open_id_connect_provider

                return open_id_connect_provider.OpenIdConnectProvider()
            if mapping_value == "#microsoft.graph.openShift":
                from . import open_shift

                return open_shift.OpenShift()
            if mapping_value == "#microsoft.graph.openShiftChangeRequest":
                from . import open_shift_change_request

                return open_shift_change_request.OpenShiftChangeRequest()
            if mapping_value == "#microsoft.graph.openTypeExtension":
                from . import open_type_extension

                return open_type_extension.OpenTypeExtension()
            if mapping_value == "#microsoft.graph.operation":
                from . import operation

                return operation.Operation()
            if mapping_value == "#microsoft.graph.organization":
                from . import organization

                return organization.Organization()
            if mapping_value == "#microsoft.graph.organizationalBranding":
                from . import organizational_branding

                return organizational_branding.OrganizationalBranding()
            if mapping_value == "#microsoft.graph.organizationalBrandingLocalization":
                from . import organizational_branding_localization

                return organizational_branding_localization.OrganizationalBrandingLocalization()
            if mapping_value == "#microsoft.graph.organizationalBrandingProperties":
                from . import organizational_branding_properties

                return organizational_branding_properties.OrganizationalBrandingProperties()
            if mapping_value == "#microsoft.graph.organizationSettings":
                from . import organization_settings

                return organization_settings.OrganizationSettings()
            if mapping_value == "#microsoft.graph.orgContact":
                from . import org_contact

                return org_contact.OrgContact()
            if mapping_value == "#microsoft.graph.outlookCategory":
                from . import outlook_category

                return outlook_category.OutlookCategory()
            if mapping_value == "#microsoft.graph.outlookItem":
                from . import outlook_item

                return outlook_item.OutlookItem()
            if mapping_value == "#microsoft.graph.outlookTask":
                from . import outlook_task

                return outlook_task.OutlookTask()
            if mapping_value == "#microsoft.graph.outlookTaskFolder":
                from . import outlook_task_folder

                return outlook_task_folder.OutlookTaskFolder()
            if mapping_value == "#microsoft.graph.outlookTaskGroup":
                from . import outlook_task_group

                return outlook_task_group.OutlookTaskGroup()
            if mapping_value == "#microsoft.graph.outlookUser":
                from . import outlook_user

                return outlook_user.OutlookUser()
            if mapping_value == "#microsoft.graph.participant":
                from . import participant

                return participant.Participant()
            if mapping_value == "#microsoft.graph.participantJoiningNotification":
                from . import participant_joining_notification

                return participant_joining_notification.ParticipantJoiningNotification()
            if mapping_value == "#microsoft.graph.participantLeftNotification":
                from . import participant_left_notification

                return participant_left_notification.ParticipantLeftNotification()
            if mapping_value == "#microsoft.graph.passwordAuthenticationMethod":
                from . import password_authentication_method

                return password_authentication_method.PasswordAuthenticationMethod()
            if mapping_value == "#microsoft.graph.passwordlessMicrosoftAuthenticatorAuthenticationMethod":
                from . import passwordless_microsoft_authenticator_authentication_method

                return passwordless_microsoft_authenticator_authentication_method.PasswordlessMicrosoftAuthenticatorAuthenticationMethod()
            if mapping_value == "#microsoft.graph.payload":
                from . import payload

                return payload.Payload()
            if mapping_value == "#microsoft.graph.payloadCompatibleAssignmentFilter":
                from . import payload_compatible_assignment_filter

                return payload_compatible_assignment_filter.PayloadCompatibleAssignmentFilter()
            if mapping_value == "#microsoft.graph.payloadResponse":
                from . import payload_response

                return payload_response.PayloadResponse()
            if mapping_value == "#microsoft.graph.paymentMethod":
                from . import payment_method

                return payment_method.PaymentMethod()
            if mapping_value == "#microsoft.graph.paymentTerm":
                from . import payment_term

                return payment_term.PaymentTerm()
            if mapping_value == "#microsoft.graph.permission":
                from . import permission

                return permission.Permission()
            if mapping_value == "#microsoft.graph.permissionGrantConditionSet":
                from . import permission_grant_condition_set

                return permission_grant_condition_set.PermissionGrantConditionSet()
            if mapping_value == "#microsoft.graph.permissionGrantPolicy":
                from . import permission_grant_policy

                return permission_grant_policy.PermissionGrantPolicy()
            if mapping_value == "#microsoft.graph.person":
                from . import person

                return person.Person()
            if mapping_value == "#microsoft.graph.personAnnotation":
                from . import person_annotation

                return person_annotation.PersonAnnotation()
            if mapping_value == "#microsoft.graph.personAnnualEvent":
                from . import person_annual_event

                return person_annual_event.PersonAnnualEvent()
            if mapping_value == "#microsoft.graph.personAward":
                from . import person_award

                return person_award.PersonAward()
            if mapping_value == "#microsoft.graph.personCertification":
                from . import person_certification

                return person_certification.PersonCertification()
            if mapping_value == "#microsoft.graph.personExtension":
                from . import person_extension

                return person_extension.PersonExtension()
            if mapping_value == "#microsoft.graph.personInterest":
                from . import person_interest

                return person_interest.PersonInterest()
            if mapping_value == "#microsoft.graph.personName":
                from . import person_name

                return person_name.PersonName()
            if mapping_value == "#microsoft.graph.personResponsibility":
                from . import person_responsibility

                return person_responsibility.PersonResponsibility()
            if mapping_value == "#microsoft.graph.personWebsite":
                from . import person_website

                return person_website.PersonWebsite()
            if mapping_value == "#microsoft.graph.phoneAuthenticationMethod":
                from . import phone_authentication_method

                return phone_authentication_method.PhoneAuthenticationMethod()
            if mapping_value == "#microsoft.graph.picture":
                from . import picture

                return picture.Picture()
            if mapping_value == "#microsoft.graph.pinnedChatMessageInfo":
                from . import pinned_chat_message_info

                return pinned_chat_message_info.PinnedChatMessageInfo()
            if mapping_value == "#microsoft.graph.place":
                from . import place

                return place.Place()
            if mapping_value == "#microsoft.graph.planner":
                from . import planner

                return planner.Planner()
            if mapping_value == "#microsoft.graph.plannerAssignedToTaskBoardTaskFormat":
                from . import planner_assigned_to_task_board_task_format

                return planner_assigned_to_task_board_task_format.PlannerAssignedToTaskBoardTaskFormat()
            if mapping_value == "#microsoft.graph.plannerBucket":
                from . import planner_bucket

                return planner_bucket.PlannerBucket()
            if mapping_value == "#microsoft.graph.plannerBucketTaskBoardTaskFormat":
                from . import planner_bucket_task_board_task_format

                return planner_bucket_task_board_task_format.PlannerBucketTaskBoardTaskFormat()
            if mapping_value == "#microsoft.graph.plannerDelta":
                from . import planner_delta

                return planner_delta.PlannerDelta()
            if mapping_value == "#microsoft.graph.plannerGroup":
                from . import planner_group

                return planner_group.PlannerGroup()
            if mapping_value == "#microsoft.graph.plannerPlan":
                from . import planner_plan

                return planner_plan.PlannerPlan()
            if mapping_value == "#microsoft.graph.plannerPlanConfiguration":
                from . import planner_plan_configuration

                return planner_plan_configuration.PlannerPlanConfiguration()
            if mapping_value == "#microsoft.graph.plannerPlanConfigurationLocalization":
                from . import planner_plan_configuration_localization

                return planner_plan_configuration_localization.PlannerPlanConfigurationLocalization()
            if mapping_value == "#microsoft.graph.plannerPlanDetails":
                from . import planner_plan_details

                return planner_plan_details.PlannerPlanDetails()
            if mapping_value == "#microsoft.graph.plannerProgressTaskBoardTaskFormat":
                from . import planner_progress_task_board_task_format

                return planner_progress_task_board_task_format.PlannerProgressTaskBoardTaskFormat()
            if mapping_value == "#microsoft.graph.plannerRoster":
                from . import planner_roster

                return planner_roster.PlannerRoster()
            if mapping_value == "#microsoft.graph.plannerRosterMember":
                from . import planner_roster_member

                return planner_roster_member.PlannerRosterMember()
            if mapping_value == "#microsoft.graph.plannerTask":
                from . import planner_task

                return planner_task.PlannerTask()
            if mapping_value == "#microsoft.graph.plannerTaskConfiguration":
                from . import planner_task_configuration

                return planner_task_configuration.PlannerTaskConfiguration()
            if mapping_value == "#microsoft.graph.plannerTaskDetails":
                from . import planner_task_details

                return planner_task_details.PlannerTaskDetails()
            if mapping_value == "#microsoft.graph.plannerUser":
                from . import planner_user

                return planner_user.PlannerUser()
            if mapping_value == "#microsoft.graph.playPromptOperation":
                from . import play_prompt_operation

                return play_prompt_operation.PlayPromptOperation()
            if mapping_value == "#microsoft.graph.policyBase":
                from . import policy_base
                from .security import policy_base

                return policy_base.PolicyBase()
            if mapping_value == "#microsoft.graph.policySet":
                from . import policy_set

                return policy_set.PolicySet()
            if mapping_value == "#microsoft.graph.policySetAssignment":
                from . import policy_set_assignment

                return policy_set_assignment.PolicySetAssignment()
            if mapping_value == "#microsoft.graph.policySetItem":
                from . import policy_set_item

                return policy_set_item.PolicySetItem()
            if mapping_value == "#microsoft.graph.post":
                from . import post

                return post.Post()
            if mapping_value == "#microsoft.graph.presence":
                from . import presence

                return presence.Presence()
            if mapping_value == "#microsoft.graph.presentation":
                from . import presentation

                return presentation.Presentation()
            if mapping_value == "#microsoft.graph.printConnector":
                from . import print_connector

                return print_connector.PrintConnector()
            if mapping_value == "#microsoft.graph.printDocument":
                from . import print_document

                return print_document.PrintDocument()
            if mapping_value == "#microsoft.graph.printer":
                from . import printer

                return printer.Printer()
            if mapping_value == "#microsoft.graph.printerBase":
                from . import printer_base

                return printer_base.PrinterBase()
            if mapping_value == "#microsoft.graph.printerCreateOperation":
                from . import printer_create_operation

                return printer_create_operation.PrinterCreateOperation()
            if mapping_value == "#microsoft.graph.printerShare":
                from . import printer_share

                return printer_share.PrinterShare()
            if mapping_value == "#microsoft.graph.printJob":
                from . import print_job

                return print_job.PrintJob()
            if mapping_value == "#microsoft.graph.printOperation":
                from . import print_operation

                return print_operation.PrintOperation()
            if mapping_value == "#microsoft.graph.printService":
                from . import print_service

                return print_service.PrintService()
            if mapping_value == "#microsoft.graph.printServiceEndpoint":
                from . import print_service_endpoint

                return print_service_endpoint.PrintServiceEndpoint()
            if mapping_value == "#microsoft.graph.printTask":
                from . import print_task

                return print_task.PrintTask()
            if mapping_value == "#microsoft.graph.printTaskDefinition":
                from . import print_task_definition

                return print_task_definition.PrintTaskDefinition()
            if mapping_value == "#microsoft.graph.printTaskTrigger":
                from . import print_task_trigger

                return print_task_trigger.PrintTaskTrigger()
            if mapping_value == "#microsoft.graph.printUsage":
                from . import print_usage

                return print_usage.PrintUsage()
            if mapping_value == "#microsoft.graph.printUsageByPrinter":
                from . import print_usage_by_printer

                return print_usage_by_printer.PrintUsageByPrinter()
            if mapping_value == "#microsoft.graph.printUsageByUser":
                from . import print_usage_by_user

                return print_usage_by_user.PrintUsageByUser()
            if mapping_value == "#microsoft.graph.privilegedAccess":
                from . import privileged_access

                return privileged_access.PrivilegedAccess()
            if mapping_value == "#microsoft.graph.privilegedAccessGroup":
                from . import privileged_access_group

                return privileged_access_group.PrivilegedAccessGroup()
            if mapping_value == "#microsoft.graph.privilegedAccessGroupAssignmentSchedule":
                from . import privileged_access_group_assignment_schedule

                return privileged_access_group_assignment_schedule.PrivilegedAccessGroupAssignmentSchedule()
            if mapping_value == "#microsoft.graph.privilegedAccessGroupAssignmentScheduleInstance":
                from . import privileged_access_group_assignment_schedule_instance

                return privileged_access_group_assignment_schedule_instance.PrivilegedAccessGroupAssignmentScheduleInstance()
            if mapping_value == "#microsoft.graph.privilegedAccessGroupAssignmentScheduleRequest":
                from . import privileged_access_group_assignment_schedule_request

                return privileged_access_group_assignment_schedule_request.PrivilegedAccessGroupAssignmentScheduleRequest()
            if mapping_value == "#microsoft.graph.privilegedAccessGroupEligibilitySchedule":
                from . import privileged_access_group_eligibility_schedule

                return privileged_access_group_eligibility_schedule.PrivilegedAccessGroupEligibilitySchedule()
            if mapping_value == "#microsoft.graph.privilegedAccessGroupEligibilityScheduleInstance":
                from . import privileged_access_group_eligibility_schedule_instance

                return privileged_access_group_eligibility_schedule_instance.PrivilegedAccessGroupEligibilityScheduleInstance()
            if mapping_value == "#microsoft.graph.privilegedAccessGroupEligibilityScheduleRequest":
                from . import privileged_access_group_eligibility_schedule_request

                return privileged_access_group_eligibility_schedule_request.PrivilegedAccessGroupEligibilityScheduleRequest()
            if mapping_value == "#microsoft.graph.privilegedAccessRoot":
                from . import privileged_access_root

                return privileged_access_root.PrivilegedAccessRoot()
            if mapping_value == "#microsoft.graph.privilegedAccessSchedule":
                from . import privileged_access_schedule

                return privileged_access_schedule.PrivilegedAccessSchedule()
            if mapping_value == "#microsoft.graph.privilegedAccessScheduleInstance":
                from . import privileged_access_schedule_instance

                return privileged_access_schedule_instance.PrivilegedAccessScheduleInstance()
            if mapping_value == "#microsoft.graph.privilegedAccessScheduleRequest":
                from . import privileged_access_schedule_request

                return privileged_access_schedule_request.PrivilegedAccessScheduleRequest()
            if mapping_value == "#microsoft.graph.privilegedApproval":
                from . import privileged_approval

                return privileged_approval.PrivilegedApproval()
            if mapping_value == "#microsoft.graph.privilegedOperationEvent":
                from . import privileged_operation_event

                return privileged_operation_event.PrivilegedOperationEvent()
            if mapping_value == "#microsoft.graph.privilegedRole":
                from . import privileged_role

                return privileged_role.PrivilegedRole()
            if mapping_value == "#microsoft.graph.privilegedRoleAssignment":
                from . import privileged_role_assignment

                return privileged_role_assignment.PrivilegedRoleAssignment()
            if mapping_value == "#microsoft.graph.privilegedRoleAssignmentRequest":
                from . import privileged_role_assignment_request

                return privileged_role_assignment_request.PrivilegedRoleAssignmentRequest()
            if mapping_value == "#microsoft.graph.privilegedRoleSettings":
                from . import privileged_role_settings

                return privileged_role_settings.PrivilegedRoleSettings()
            if mapping_value == "#microsoft.graph.privilegedRoleSummary":
                from . import privileged_role_summary

                return privileged_role_summary.PrivilegedRoleSummary()
            if mapping_value == "#microsoft.graph.privilegedSignupStatus":
                from . import privileged_signup_status

                return privileged_signup_status.PrivilegedSignupStatus()
            if mapping_value == "#microsoft.graph.privilegeManagementElevation":
                from . import privilege_management_elevation

                return privilege_management_elevation.PrivilegeManagementElevation()
            if mapping_value == "#microsoft.graph.profile":
                from . import profile

                return profile.Profile()
            if mapping_value == "#microsoft.graph.profileCardProperty":
                from . import profile_card_property

                return profile_card_property.ProfileCardProperty()
            if mapping_value == "#microsoft.graph.profilePhoto":
                from . import profile_photo

                return profile_photo.ProfilePhoto()
            if mapping_value == "#microsoft.graph.program":
                from . import program

                return program.Program()
            if mapping_value == "#microsoft.graph.programControl":
                from . import program_control

                return program_control.ProgramControl()
            if mapping_value == "#microsoft.graph.programControlType":
                from . import program_control_type

                return program_control_type.ProgramControlType()
            if mapping_value == "#microsoft.graph.projectParticipation":
                from . import project_participation

                return project_participation.ProjectParticipation()
            if mapping_value == "#microsoft.graph.pronounsSettings":
                from . import pronouns_settings

                return pronouns_settings.PronounsSettings()
            if mapping_value == "#microsoft.graph.providerTenantSetting":
                from . import provider_tenant_setting

                return provider_tenant_setting.ProviderTenantSetting()
            if mapping_value == "#microsoft.graph.provisioningObjectSummary":
                from . import provisioning_object_summary

                return provisioning_object_summary.ProvisioningObjectSummary()
            if mapping_value == "#microsoft.graph.publishedResource":
                from . import published_resource

                return published_resource.PublishedResource()
            if mapping_value == "#microsoft.graph.purchaseInvoice":
                from . import purchase_invoice

                return purchase_invoice.PurchaseInvoice()
            if mapping_value == "#microsoft.graph.purchaseInvoiceLine":
                from . import purchase_invoice_line

                return purchase_invoice_line.PurchaseInvoiceLine()
            if mapping_value == "#microsoft.graph.rbacApplication":
                from . import rbac_application

                return rbac_application.RbacApplication()
            if mapping_value == "#microsoft.graph.rbacApplicationMultiple":
                from . import rbac_application_multiple

                return rbac_application_multiple.RbacApplicationMultiple()
            if mapping_value == "#microsoft.graph.recommendation":
                from . import recommendation

                return recommendation.Recommendation()
            if mapping_value == "#microsoft.graph.recommendationBase":
                from . import recommendation_base

                return recommendation_base.RecommendationBase()
            if mapping_value == "#microsoft.graph.recordOperation":
                from . import record_operation

                return record_operation.RecordOperation()
            if mapping_value == "#microsoft.graph.redundantAssignmentAlertConfiguration":
                from . import redundant_assignment_alert_configuration

                return redundant_assignment_alert_configuration.RedundantAssignmentAlertConfiguration()
            if mapping_value == "#microsoft.graph.redundantAssignmentAlertIncident":
                from . import redundant_assignment_alert_incident

                return redundant_assignment_alert_incident.RedundantAssignmentAlertIncident()
            if mapping_value == "#microsoft.graph.referenceAttachment":
                from . import reference_attachment

                return reference_attachment.ReferenceAttachment()
            if mapping_value == "#microsoft.graph.regionalAndLanguageSettings":
                from . import regional_and_language_settings

                return regional_and_language_settings.RegionalAndLanguageSettings()
            if mapping_value == "#microsoft.graph.relyingPartyDetailedSummary":
                from . import relying_party_detailed_summary

                return relying_party_detailed_summary.RelyingPartyDetailedSummary()
            if mapping_value == "#microsoft.graph.remoteActionAudit":
                from . import remote_action_audit

                return remote_action_audit.RemoteActionAudit()
            if mapping_value == "#microsoft.graph.remoteAssistancePartner":
                from . import remote_assistance_partner

                return remote_assistance_partner.RemoteAssistancePartner()
            if mapping_value == "#microsoft.graph.remoteAssistanceSettings":
                from . import remote_assistance_settings

                return remote_assistance_settings.RemoteAssistanceSettings()
            if mapping_value == "#microsoft.graph.reportRoot":
                from . import report_root

                return report_root.ReportRoot()
            if mapping_value == "#microsoft.graph.request":
                from . import request

                return request.Request()
            if mapping_value == "#microsoft.graph.resourceOperation":
                from . import resource_operation

                return resource_operation.ResourceOperation()
            if mapping_value == "#microsoft.graph.resourceSpecificPermissionGrant":
                from . import resource_specific_permission_grant

                return resource_specific_permission_grant.ResourceSpecificPermissionGrant()
            if mapping_value == "#microsoft.graph.restrictedAppsViolation":
                from . import restricted_apps_violation

                return restricted_apps_violation.RestrictedAppsViolation()
            if mapping_value == "#microsoft.graph.richLongRunningOperation":
                from . import rich_long_running_operation

                return rich_long_running_operation.RichLongRunningOperation()
            if mapping_value == "#microsoft.graph.riskDetection":
                from . import risk_detection

                return risk_detection.RiskDetection()
            if mapping_value == "#microsoft.graph.riskyServicePrincipal":
                from . import risky_service_principal

                return risky_service_principal.RiskyServicePrincipal()
            if mapping_value == "#microsoft.graph.riskyServicePrincipalHistoryItem":
                from . import risky_service_principal_history_item

                return risky_service_principal_history_item.RiskyServicePrincipalHistoryItem()
            if mapping_value == "#microsoft.graph.riskyUser":
                from . import risky_user

                return risky_user.RiskyUser()
            if mapping_value == "#microsoft.graph.riskyUserHistoryItem":
                from . import risky_user_history_item

                return risky_user_history_item.RiskyUserHistoryItem()
            if mapping_value == "#microsoft.graph.roleAssignment":
                from . import role_assignment

                return role_assignment.RoleAssignment()
            if mapping_value == "#microsoft.graph.roleDefinition":
                from . import role_definition

                return role_definition.RoleDefinition()
            if mapping_value == "#microsoft.graph.roleManagementAlert":
                from . import role_management_alert

                return role_management_alert.RoleManagementAlert()
            if mapping_value == "#microsoft.graph.rolesAssignedOutsidePrivilegedIdentityManagementAlertConfiguration":
                from . import roles_assigned_outside_privileged_identity_management_alert_configuration

                return roles_assigned_outside_privileged_identity_management_alert_configuration.RolesAssignedOutsidePrivilegedIdentityManagementAlertConfiguration()
            if mapping_value == "#microsoft.graph.rolesAssignedOutsidePrivilegedIdentityManagementAlertIncident":
                from . import roles_assigned_outside_privileged_identity_management_alert_incident

                return roles_assigned_outside_privileged_identity_management_alert_incident.RolesAssignedOutsidePrivilegedIdentityManagementAlertIncident()
            if mapping_value == "#microsoft.graph.roleScopeTag":
                from . import role_scope_tag

                return role_scope_tag.RoleScopeTag()
            if mapping_value == "#microsoft.graph.roleScopeTagAutoAssignment":
                from . import role_scope_tag_auto_assignment

                return role_scope_tag_auto_assignment.RoleScopeTagAutoAssignment()
            if mapping_value == "#microsoft.graph.room":
                from . import room

                return room.Room()
            if mapping_value == "#microsoft.graph.roomList":
                from . import room_list

                return room_list.RoomList()
            if mapping_value == "#microsoft.graph.salesCreditMemo":
                from . import sales_credit_memo

                return sales_credit_memo.SalesCreditMemo()
            if mapping_value == "#microsoft.graph.salesCreditMemoLine":
                from . import sales_credit_memo_line

                return sales_credit_memo_line.SalesCreditMemoLine()
            if mapping_value == "#microsoft.graph.salesInvoice":
                from . import sales_invoice

                return sales_invoice.SalesInvoice()
            if mapping_value == "#microsoft.graph.salesInvoiceLine":
                from . import sales_invoice_line

                return sales_invoice_line.SalesInvoiceLine()
            if mapping_value == "#microsoft.graph.salesOrder":
                from . import sales_order

                return sales_order.SalesOrder()
            if mapping_value == "#microsoft.graph.salesOrderLine":
                from . import sales_order_line

                return sales_order_line.SalesOrderLine()
            if mapping_value == "#microsoft.graph.salesQuote":
                from . import sales_quote

                return sales_quote.SalesQuote()
            if mapping_value == "#microsoft.graph.salesQuoteLine":
                from . import sales_quote_line

                return sales_quote_line.SalesQuoteLine()
            if mapping_value == "#microsoft.graph.samlOrWsFedExternalDomainFederation":
                from . import saml_or_ws_fed_external_domain_federation

                return saml_or_ws_fed_external_domain_federation.SamlOrWsFedExternalDomainFederation()
            if mapping_value == "#microsoft.graph.samlOrWsFedProvider":
                from . import saml_or_ws_fed_provider

                return saml_or_ws_fed_provider.SamlOrWsFedProvider()
            if mapping_value == "#microsoft.graph.schedule":
                from . import schedule

                return schedule.Schedule()
            if mapping_value == "#microsoft.graph.scheduleChangeRequest":
                from . import schedule_change_request

                return schedule_change_request.ScheduleChangeRequest()
            if mapping_value == "#microsoft.graph.schedulingGroup":
                from . import scheduling_group

                return scheduling_group.SchedulingGroup()
            if mapping_value == "#microsoft.graph.schema":
                from . import schema
                from .external_connectors import schema

                return schema.Schema()
            if mapping_value == "#microsoft.graph.schemaExtension":
                from . import schema_extension

                return schema_extension.SchemaExtension()
            if mapping_value == "#microsoft.graph.scopedRoleMembership":
                from . import scoped_role_membership

                return scoped_role_membership.ScopedRoleMembership()
            if mapping_value == "#microsoft.graph.search.acronym":
                from .search import acronym

                return acronym.Acronym()
            if mapping_value == "#microsoft.graph.search.bookmark":
                from .search import bookmark

                return bookmark.Bookmark()
            if mapping_value == "#microsoft.graph.search.qna":
                from .search import qna

                return qna.Qna()
            if mapping_value == "#microsoft.graph.search.searchAnswer":
                from .search import search_answer

                return search_answer.SearchAnswer()
            if mapping_value == "#microsoft.graph.searchEntity":
                from . import search_entity

                return search_entity.SearchEntity()
            if mapping_value == "#microsoft.graph.sectionGroup":
                from . import section_group

                return section_group.SectionGroup()
            if mapping_value == "#microsoft.graph.secureScore":
                from . import secure_score

                return secure_score.SecureScore()
            if mapping_value == "#microsoft.graph.secureScoreControlProfile":
                from . import secure_score_control_profile

                return secure_score_control_profile.SecureScoreControlProfile()
            if mapping_value == "#microsoft.graph.security":
                from .security import security

                return security.Security()
            if mapping_value == "#microsoft.graph.security.alert":
                from . import alert
                from .security import alert

                return alert.Alert()
            if mapping_value == "#microsoft.graph.security.article":
                from .security import article

                return article.Article()
            if mapping_value == "#microsoft.graph.security.articleIndicator":
                from .security import article_indicator

                return article_indicator.ArticleIndicator()
            if mapping_value == "#microsoft.graph.security.artifact":
                from .security import artifact

                return artifact.Artifact()
            if mapping_value == "#microsoft.graph.security.case":
                from .ediscovery import case
                from .security import case

                return case.Case()
            if mapping_value == "#microsoft.graph.security.caseOperation":
                from .ediscovery import case_operation
                from .security import case_operation

                return case_operation.CaseOperation()
            if mapping_value == "#microsoft.graph.security.casesRoot":
                from .security import cases_root

                return cases_root.CasesRoot()
            if mapping_value == "#microsoft.graph.security.dataSet":
                from .security import data_set

                return data_set.DataSet()
            if mapping_value == "#microsoft.graph.security.dataSource":
                from .ediscovery import data_source
                from .security import data_source

                return data_source.DataSource()
            if mapping_value == "#microsoft.graph.security.dataSourceContainer":
                from .ediscovery import data_source_container
                from .security import data_source_container

                return data_source_container.DataSourceContainer()
            if mapping_value == "#microsoft.graph.security.dispositionReviewStage":
                from .security import disposition_review_stage

                return disposition_review_stage.DispositionReviewStage()
            if mapping_value == "#microsoft.graph.security.ediscoveryAddToReviewSetOperation":
                from .security import ediscovery_add_to_review_set_operation

                return ediscovery_add_to_review_set_operation.EdiscoveryAddToReviewSetOperation()
            if mapping_value == "#microsoft.graph.security.ediscoveryCase":
                from .security import ediscovery_case

                return ediscovery_case.EdiscoveryCase()
            if mapping_value == "#microsoft.graph.security.ediscoveryCaseSettings":
                from .security import ediscovery_case_settings

                return ediscovery_case_settings.EdiscoveryCaseSettings()
            if mapping_value == "#microsoft.graph.security.ediscoveryCustodian":
                from .security import ediscovery_custodian

                return ediscovery_custodian.EdiscoveryCustodian()
            if mapping_value == "#microsoft.graph.security.ediscoveryEstimateOperation":
                from .security import ediscovery_estimate_operation

                return ediscovery_estimate_operation.EdiscoveryEstimateOperation()
            if mapping_value == "#microsoft.graph.security.ediscoveryExportOperation":
                from .security import ediscovery_export_operation

                return ediscovery_export_operation.EdiscoveryExportOperation()
            if mapping_value == "#microsoft.graph.security.ediscoveryFile":
                from .security import ediscovery_file

                return ediscovery_file.EdiscoveryFile()
            if mapping_value == "#microsoft.graph.security.ediscoveryHoldOperation":
                from .security import ediscovery_hold_operation

                return ediscovery_hold_operation.EdiscoveryHoldOperation()
            if mapping_value == "#microsoft.graph.security.ediscoveryHoldPolicy":
                from .security import ediscovery_hold_policy

                return ediscovery_hold_policy.EdiscoveryHoldPolicy()
            if mapping_value == "#microsoft.graph.security.ediscoveryIndexOperation":
                from .security import ediscovery_index_operation

                return ediscovery_index_operation.EdiscoveryIndexOperation()
            if mapping_value == "#microsoft.graph.security.ediscoveryNoncustodialDataSource":
                from .security import ediscovery_noncustodial_data_source

                return ediscovery_noncustodial_data_source.EdiscoveryNoncustodialDataSource()
            if mapping_value == "#microsoft.graph.security.ediscoveryPurgeDataOperation":
                from .security import ediscovery_purge_data_operation

                return ediscovery_purge_data_operation.EdiscoveryPurgeDataOperation()
            if mapping_value == "#microsoft.graph.security.ediscoveryReviewSet":
                from .security import ediscovery_review_set

                return ediscovery_review_set.EdiscoveryReviewSet()
            if mapping_value == "#microsoft.graph.security.ediscoveryReviewSetQuery":
                from .security import ediscovery_review_set_query

                return ediscovery_review_set_query.EdiscoveryReviewSetQuery()
            if mapping_value == "#microsoft.graph.security.ediscoveryReviewTag":
                from .security import ediscovery_review_tag

                return ediscovery_review_tag.EdiscoveryReviewTag()
            if mapping_value == "#microsoft.graph.security.ediscoverySearch":
                from .security import ediscovery_search

                return ediscovery_search.EdiscoverySearch()
            if mapping_value == "#microsoft.graph.security.ediscoveryTagOperation":
                from .security import ediscovery_tag_operation

                return ediscovery_tag_operation.EdiscoveryTagOperation()
            if mapping_value == "#microsoft.graph.security.emailContentThreatSubmission":
                from .security import email_content_threat_submission

                return email_content_threat_submission.EmailContentThreatSubmission()
            if mapping_value == "#microsoft.graph.security.emailThreatSubmission":
                from .security import email_threat_submission

                return email_threat_submission.EmailThreatSubmission()
            if mapping_value == "#microsoft.graph.security.emailThreatSubmissionPolicy":
                from .security import email_threat_submission_policy

                return email_threat_submission_policy.EmailThreatSubmissionPolicy()
            if mapping_value == "#microsoft.graph.security.emailUrlThreatSubmission":
                from .security import email_url_threat_submission

                return email_url_threat_submission.EmailUrlThreatSubmission()
            if mapping_value == "#microsoft.graph.security.file":
                from .security import file

                return file.File()
            if mapping_value == "#microsoft.graph.security.fileContentThreatSubmission":
                from .security import file_content_threat_submission

                return file_content_threat_submission.FileContentThreatSubmission()
            if mapping_value == "#microsoft.graph.security.fileThreatSubmission":
                from .security import file_threat_submission

                return file_threat_submission.FileThreatSubmission()
            if mapping_value == "#microsoft.graph.security.fileUrlThreatSubmission":
                from .security import file_url_threat_submission

                return file_url_threat_submission.FileUrlThreatSubmission()
            if mapping_value == "#microsoft.graph.security.host":
                from .security import host

                return host.Host()
            if mapping_value == "#microsoft.graph.security.hostComponent":
                from .security import host_component

                return host_component.HostComponent()
            if mapping_value == "#microsoft.graph.security.hostCookie":
                from .security import host_cookie

                return host_cookie.HostCookie()
            if mapping_value == "#microsoft.graph.security.hostname":
                from .security import hostname

                return hostname.Hostname()
            if mapping_value == "#microsoft.graph.security.hostReputation":
                from .security import host_reputation

                return host_reputation.HostReputation()
            if mapping_value == "#microsoft.graph.security.hostTracker":
                from .security import host_tracker

                return host_tracker.HostTracker()
            if mapping_value == "#microsoft.graph.security.incident":
                from .security import incident

                return incident.Incident()
            if mapping_value == "#microsoft.graph.security.indicator":
                from .security import indicator

                return indicator.Indicator()
            if mapping_value == "#microsoft.graph.security.informationProtection":
                from . import information_protection
                from .security import information_protection

                return information_protection.InformationProtection()
            if mapping_value == "#microsoft.graph.security.informationProtectionPolicySetting":
                from .security import information_protection_policy_setting

                return information_protection_policy_setting.InformationProtectionPolicySetting()
            if mapping_value == "#microsoft.graph.security.intelligenceProfile":
                from .security import intelligence_profile

                return intelligence_profile.IntelligenceProfile()
            if mapping_value == "#microsoft.graph.security.intelligenceProfileIndicator":
                from .security import intelligence_profile_indicator

                return intelligence_profile_indicator.IntelligenceProfileIndicator()
            if mapping_value == "#microsoft.graph.security.ipAddress":
                from .security import ip_address

                return ip_address.IpAddress()
            if mapping_value == "#microsoft.graph.security.labelsRoot":
                from .security import labels_root

                return labels_root.LabelsRoot()
            if mapping_value == "#microsoft.graph.security.passiveDnsRecord":
                from .security import passive_dns_record

                return passive_dns_record.PassiveDnsRecord()
            if mapping_value == "#microsoft.graph.security.policyBase":
                from . import policy_base
                from .security import policy_base

                return policy_base.PolicyBase()
            if mapping_value == "#microsoft.graph.security.retentionEvent":
                from .security import retention_event

                return retention_event.RetentionEvent()
            if mapping_value == "#microsoft.graph.security.retentionEventType":
                from .security import retention_event_type

                return retention_event_type.RetentionEventType()
            if mapping_value == "#microsoft.graph.security.retentionLabel":
                from .security import retention_label

                return retention_label.RetentionLabel()
            if mapping_value == "#microsoft.graph.security.search":
                from .security import search

                return search.Search()
            if mapping_value == "#microsoft.graph.security.security":
                from .security import security

                return security.Security()
            if mapping_value == "#microsoft.graph.security.sensitivityLabel":
                from . import sensitivity_label
                from .security import sensitivity_label

                return sensitivity_label.SensitivityLabel()
            if mapping_value == "#microsoft.graph.security.siteSource":
                from .ediscovery import site_source
                from .security import site_source

                return site_source.SiteSource()
            if mapping_value == "#microsoft.graph.security.tag":
                from .ediscovery import tag
                from .security import tag

                return tag.Tag()
            if mapping_value == "#microsoft.graph.security.threatIntelligence":
                from .security import threat_intelligence

                return threat_intelligence.ThreatIntelligence()
            if mapping_value == "#microsoft.graph.security.threatSubmission":
                from .security import threat_submission

                return threat_submission.ThreatSubmission()
            if mapping_value == "#microsoft.graph.security.threatSubmissionRoot":
                from .security import threat_submission_root

                return threat_submission_root.ThreatSubmissionRoot()
            if mapping_value == "#microsoft.graph.security.triggersRoot":
                from .security import triggers_root

                return triggers_root.TriggersRoot()
            if mapping_value == "#microsoft.graph.security.triggerTypesRoot":
                from .security import trigger_types_root

                return trigger_types_root.TriggerTypesRoot()
            if mapping_value == "#microsoft.graph.security.unclassifiedArtifact":
                from .security import unclassified_artifact

                return unclassified_artifact.UnclassifiedArtifact()
            if mapping_value == "#microsoft.graph.security.unifiedGroupSource":
                from .ediscovery import unified_group_source
                from .security import unified_group_source

                return unified_group_source.UnifiedGroupSource()
            if mapping_value == "#microsoft.graph.security.urlThreatSubmission":
                from .security import url_threat_submission

                return url_threat_submission.UrlThreatSubmission()
            if mapping_value == "#microsoft.graph.security.userSource":
                from .ediscovery import user_source
                from .security import user_source

                return user_source.UserSource()
            if mapping_value == "#microsoft.graph.security.vulnerability":
                from .security import vulnerability

                return vulnerability.Vulnerability()
            if mapping_value == "#microsoft.graph.security.vulnerabilityComponent":
                from .security import vulnerability_component

                return vulnerability_component.VulnerabilityComponent()
            if mapping_value == "#microsoft.graph.securityAction":
                from . import security_action

                return security_action.SecurityAction()
            if mapping_value == "#microsoft.graph.securityBaselineCategoryStateSummary":
                from . import security_baseline_category_state_summary

                return security_baseline_category_state_summary.SecurityBaselineCategoryStateSummary()
            if mapping_value == "#microsoft.graph.securityBaselineDeviceState":
                from . import security_baseline_device_state

                return security_baseline_device_state.SecurityBaselineDeviceState()
            if mapping_value == "#microsoft.graph.securityBaselineSettingState":
                from . import security_baseline_setting_state

                return security_baseline_setting_state.SecurityBaselineSettingState()
            if mapping_value == "#microsoft.graph.securityBaselineState":
                from . import security_baseline_state

                return security_baseline_state.SecurityBaselineState()
            if mapping_value == "#microsoft.graph.securityBaselineStateSummary":
                from . import security_baseline_state_summary

                return security_baseline_state_summary.SecurityBaselineStateSummary()
            if mapping_value == "#microsoft.graph.securityBaselineTemplate":
                from . import security_baseline_template

                return security_baseline_template.SecurityBaselineTemplate()
            if mapping_value == "#microsoft.graph.securityConfigurationTask":
                from . import security_configuration_task

                return security_configuration_task.SecurityConfigurationTask()
            if mapping_value == "#microsoft.graph.securityReportsRoot":
                from . import security_reports_root

                return security_reports_root.SecurityReportsRoot()
            if mapping_value == "#microsoft.graph.sensitiveType":
                from . import sensitive_type

                return sensitive_type.SensitiveType()
            if mapping_value == "#microsoft.graph.sensitivityLabel":
                from . import sensitivity_label
                from .security import sensitivity_label

                return sensitivity_label.SensitivityLabel()
            if mapping_value == "#microsoft.graph.sensitivityPolicySettings":
                from . import sensitivity_policy_settings

                return sensitivity_policy_settings.SensitivityPolicySettings()
            if mapping_value == "#microsoft.graph.sequentialActivationRenewalsAlertConfiguration":
                from . import sequential_activation_renewals_alert_configuration

                return sequential_activation_renewals_alert_configuration.SequentialActivationRenewalsAlertConfiguration()
            if mapping_value == "#microsoft.graph.sequentialActivationRenewalsAlertIncident":
                from . import sequential_activation_renewals_alert_incident

                return sequential_activation_renewals_alert_incident.SequentialActivationRenewalsAlertIncident()
            if mapping_value == "#microsoft.graph.serviceAnnouncement":
                from . import service_announcement

                return service_announcement.ServiceAnnouncement()
            if mapping_value == "#microsoft.graph.serviceAnnouncementAttachment":
                from . import service_announcement_attachment

                return service_announcement_attachment.ServiceAnnouncementAttachment()
            if mapping_value == "#microsoft.graph.serviceAnnouncementBase":
                from . import service_announcement_base

                return service_announcement_base.ServiceAnnouncementBase()
            if mapping_value == "#microsoft.graph.serviceHealth":
                from . import service_health

                return service_health.ServiceHealth()
            if mapping_value == "#microsoft.graph.serviceHealthIssue":
                from . import service_health_issue

                return service_health_issue.ServiceHealthIssue()
            if mapping_value == "#microsoft.graph.serviceNowConnection":
                from . import service_now_connection

                return service_now_connection.ServiceNowConnection()
            if mapping_value == "#microsoft.graph.servicePrincipal":
                from . import service_principal

                return service_principal.ServicePrincipal()
            if mapping_value == "#microsoft.graph.servicePrincipalCreationConditionSet":
                from . import service_principal_creation_condition_set

                return service_principal_creation_condition_set.ServicePrincipalCreationConditionSet()
            if mapping_value == "#microsoft.graph.servicePrincipalCreationPolicy":
                from . import service_principal_creation_policy

                return service_principal_creation_policy.ServicePrincipalCreationPolicy()
            if mapping_value == "#microsoft.graph.servicePrincipalRiskDetection":
                from . import service_principal_risk_detection

                return service_principal_risk_detection.ServicePrincipalRiskDetection()
            if mapping_value == "#microsoft.graph.serviceUpdateMessage":
                from . import service_update_message

                return service_update_message.ServiceUpdateMessage()
            if mapping_value == "#microsoft.graph.settingStateDeviceSummary":
                from . import setting_state_device_summary

                return setting_state_device_summary.SettingStateDeviceSummary()
            if mapping_value == "#microsoft.graph.sharedDriveItem":
                from . import shared_drive_item

                return shared_drive_item.SharedDriveItem()
            if mapping_value == "#microsoft.graph.sharedEmailDomain":
                from . import shared_email_domain

                return shared_email_domain.SharedEmailDomain()
            if mapping_value == "#microsoft.graph.sharedEmailDomainInvitation":
                from . import shared_email_domain_invitation

                return shared_email_domain_invitation.SharedEmailDomainInvitation()
            if mapping_value == "#microsoft.graph.sharedInsight":
                from . import shared_insight

                return shared_insight.SharedInsight()
            if mapping_value == "#microsoft.graph.sharedPCConfiguration":
                from . import shared_p_c_configuration

                return shared_p_c_configuration.SharedPCConfiguration()
            if mapping_value == "#microsoft.graph.sharedWithChannelTeamInfo":
                from . import shared_with_channel_team_info

                return shared_with_channel_team_info.SharedWithChannelTeamInfo()
            if mapping_value == "#microsoft.graph.shift":
                from . import shift

                return shift.Shift()
            if mapping_value == "#microsoft.graph.shiftPreferences":
                from . import shift_preferences

                return shift_preferences.ShiftPreferences()
            if mapping_value == "#microsoft.graph.shipmentMethod":
                from . import shipment_method

                return shipment_method.ShipmentMethod()
            if mapping_value == "#microsoft.graph.signIn":
                from . import sign_in

                return sign_in.SignIn()
            if mapping_value == "#microsoft.graph.simulation":
                from . import simulation

                return simulation.Simulation()
            if mapping_value == "#microsoft.graph.simulationAutomation":
                from . import simulation_automation

                return simulation_automation.SimulationAutomation()
            if mapping_value == "#microsoft.graph.simulationAutomationRun":
                from . import simulation_automation_run

                return simulation_automation_run.SimulationAutomationRun()
            if mapping_value == "#microsoft.graph.singleValueLegacyExtendedProperty":
                from . import single_value_legacy_extended_property

                return single_value_legacy_extended_property.SingleValueLegacyExtendedProperty()
            if mapping_value == "#microsoft.graph.site":
                from . import site

                return site.Site()
            if mapping_value == "#microsoft.graph.sitePage":
                from . import site_page

                return site_page.SitePage()
            if mapping_value == "#microsoft.graph.skillProficiency":
                from . import skill_proficiency

                return skill_proficiency.SkillProficiency()
            if mapping_value == "#microsoft.graph.skypeForBusinessUserConversationMember":
                from . import skype_for_business_user_conversation_member

                return skype_for_business_user_conversation_member.SkypeForBusinessUserConversationMember()
            if mapping_value == "#microsoft.graph.skypeUserConversationMember":
                from . import skype_user_conversation_member

                return skype_user_conversation_member.SkypeUserConversationMember()
            if mapping_value == "#microsoft.graph.smsAuthenticationMethodConfiguration":
                from . import sms_authentication_method_configuration

                return sms_authentication_method_configuration.SmsAuthenticationMethodConfiguration()
            if mapping_value == "#microsoft.graph.smsAuthenticationMethodTarget":
                from . import sms_authentication_method_target

                return sms_authentication_method_target.SmsAuthenticationMethodTarget()
            if mapping_value == "#microsoft.graph.socialIdentityProvider":
                from . import social_identity_provider

                return social_identity_provider.SocialIdentityProvider()
            if mapping_value == "#microsoft.graph.softwareOathAuthenticationMethod":
                from . import software_oath_authentication_method

                return software_oath_authentication_method.SoftwareOathAuthenticationMethod()
            if mapping_value == "#microsoft.graph.softwareOathAuthenticationMethodConfiguration":
                from . import software_oath_authentication_method_configuration

                return software_oath_authentication_method_configuration.SoftwareOathAuthenticationMethodConfiguration()
            if mapping_value == "#microsoft.graph.softwareUpdateStatusSummary":
                from . import software_update_status_summary

                return software_update_status_summary.SoftwareUpdateStatusSummary()
            if mapping_value == "#microsoft.graph.staleSignInAlertConfiguration":
                from . import stale_sign_in_alert_configuration

                return stale_sign_in_alert_configuration.StaleSignInAlertConfiguration()
            if mapping_value == "#microsoft.graph.staleSignInAlertIncident":
                from . import stale_sign_in_alert_incident

                return stale_sign_in_alert_incident.StaleSignInAlertIncident()
            if mapping_value == "#microsoft.graph.standardWebPart":
                from . import standard_web_part

                return standard_web_part.StandardWebPart()
            if mapping_value == "#microsoft.graph.startHoldMusicOperation":
                from . import start_hold_music_operation

                return start_hold_music_operation.StartHoldMusicOperation()
            if mapping_value == "#microsoft.graph.stopHoldMusicOperation":
                from . import stop_hold_music_operation

                return stop_hold_music_operation.StopHoldMusicOperation()
            if mapping_value == "#microsoft.graph.strongAuthenticationDetail":
                from . import strong_authentication_detail

                return strong_authentication_detail.StrongAuthenticationDetail()
            if mapping_value == "#microsoft.graph.strongAuthenticationPhoneAppDetail":
                from . import strong_authentication_phone_app_detail

                return strong_authentication_phone_app_detail.StrongAuthenticationPhoneAppDetail()
            if mapping_value == "#microsoft.graph.stsPolicy":
                from . import sts_policy

                return sts_policy.StsPolicy()
            if mapping_value == "#microsoft.graph.subjectRightsRequest":
                from . import subject_rights_request

                return subject_rights_request.SubjectRightsRequest()
            if mapping_value == "#microsoft.graph.subscribedSku":
                from . import subscribed_sku

                return subscribed_sku.SubscribedSku()
            if mapping_value == "#microsoft.graph.subscribeToToneOperation":
                from . import subscribe_to_tone_operation

                return subscribe_to_tone_operation.SubscribeToToneOperation()
            if mapping_value == "#microsoft.graph.subscription":
                from . import subscription

                return subscription.Subscription()
            if mapping_value == "#microsoft.graph.swapShiftsChangeRequest":
                from . import swap_shifts_change_request

                return swap_shifts_change_request.SwapShiftsChangeRequest()
            if mapping_value == "#microsoft.graph.symantecCodeSigningCertificate":
                from . import symantec_code_signing_certificate

                return symantec_code_signing_certificate.SymantecCodeSigningCertificate()
            if mapping_value == "#microsoft.graph.synchronization":
                from . import synchronization

                return synchronization.Synchronization()
            if mapping_value == "#microsoft.graph.synchronizationJob":
                from . import synchronization_job

                return synchronization_job.SynchronizationJob()
            if mapping_value == "#microsoft.graph.synchronizationSchema":
                from . import synchronization_schema

                return synchronization_schema.SynchronizationSchema()
            if mapping_value == "#microsoft.graph.synchronizationTemplate":
                from . import synchronization_template

                return synchronization_template.SynchronizationTemplate()
            if mapping_value == "#microsoft.graph.targetedManagedAppConfiguration":
                from . import targeted_managed_app_configuration

                return targeted_managed_app_configuration.TargetedManagedAppConfiguration()
            if mapping_value == "#microsoft.graph.targetedManagedAppConfigurationPolicySetItem":
                from . import targeted_managed_app_configuration_policy_set_item

                return targeted_managed_app_configuration_policy_set_item.TargetedManagedAppConfigurationPolicySetItem()
            if mapping_value == "#microsoft.graph.targetedManagedAppPolicyAssignment":
                from . import targeted_managed_app_policy_assignment

                return targeted_managed_app_policy_assignment.TargetedManagedAppPolicyAssignment()
            if mapping_value == "#microsoft.graph.targetedManagedAppProtection":
                from . import targeted_managed_app_protection

                return targeted_managed_app_protection.TargetedManagedAppProtection()
            if mapping_value == "#microsoft.graph.taskFileAttachment":
                from . import task_file_attachment

                return task_file_attachment.TaskFileAttachment()
            if mapping_value == "#microsoft.graph.taxArea":
                from . import tax_area

                return tax_area.TaxArea()
            if mapping_value == "#microsoft.graph.taxGroup":
                from . import tax_group

                return tax_group.TaxGroup()
            if mapping_value == "#microsoft.graph.team":
                from . import team

                return team.Team()
            if mapping_value == "#microsoft.graph.teamInfo":
                from . import team_info

                return team_info.TeamInfo()
            if mapping_value == "#microsoft.graph.teamsApp":
                from . import teams_app

                return teams_app.TeamsApp()
            if mapping_value == "#microsoft.graph.teamsAppDefinition":
                from . import teams_app_definition

                return teams_app_definition.TeamsAppDefinition()
            if mapping_value == "#microsoft.graph.teamsAppIcon":
                from . import teams_app_icon

                return teams_app_icon.TeamsAppIcon()
            if mapping_value == "#microsoft.graph.teamsAppInstallation":
                from . import teams_app_installation

                return teams_app_installation.TeamsAppInstallation()
            if mapping_value == "#microsoft.graph.teamsAppSettings":
                from . import teams_app_settings

                return teams_app_settings.TeamsAppSettings()
            if mapping_value == "#microsoft.graph.teamsAsyncOperation":
                from . import teams_async_operation

                return teams_async_operation.TeamsAsyncOperation()
            if mapping_value == "#microsoft.graph.teamsTab":
                from . import teams_tab

                return teams_tab.TeamsTab()
            if mapping_value == "#microsoft.graph.teamsTemplate":
                from . import teams_template

                return teams_template.TeamsTemplate()
            if mapping_value == "#microsoft.graph.teamTemplate":
                from . import team_template

                return team_template.TeamTemplate()
            if mapping_value == "#microsoft.graph.teamTemplateDefinition":
                from . import team_template_definition

                return team_template_definition.TeamTemplateDefinition()
            if mapping_value == "#microsoft.graph.teamwork":
                from . import teamwork

                return teamwork.Teamwork()
            if mapping_value == "#microsoft.graph.teamworkBot":
                from . import teamwork_bot

                return teamwork_bot.TeamworkBot()
            if mapping_value == "#microsoft.graph.teamworkDevice":
                from . import teamwork_device

                return teamwork_device.TeamworkDevice()
            if mapping_value == "#microsoft.graph.teamworkDeviceActivity":
                from . import teamwork_device_activity

                return teamwork_device_activity.TeamworkDeviceActivity()
            if mapping_value == "#microsoft.graph.teamworkDeviceConfiguration":
                from . import teamwork_device_configuration

                return teamwork_device_configuration.TeamworkDeviceConfiguration()
            if mapping_value == "#microsoft.graph.teamworkDeviceHealth":
                from . import teamwork_device_health

                return teamwork_device_health.TeamworkDeviceHealth()
            if mapping_value == "#microsoft.graph.teamworkDeviceOperation":
                from . import teamwork_device_operation

                return teamwork_device_operation.TeamworkDeviceOperation()
            if mapping_value == "#microsoft.graph.teamworkHostedContent":
                from . import teamwork_hosted_content

                return teamwork_hosted_content.TeamworkHostedContent()
            if mapping_value == "#microsoft.graph.teamworkPeripheral":
                from . import teamwork_peripheral

                return teamwork_peripheral.TeamworkPeripheral()
            if mapping_value == "#microsoft.graph.teamworkTag":
                from . import teamwork_tag

                return teamwork_tag.TeamworkTag()
            if mapping_value == "#microsoft.graph.teamworkTagMember":
                from . import teamwork_tag_member

                return teamwork_tag_member.TeamworkTagMember()
            if mapping_value == "#microsoft.graph.telecomExpenseManagementPartner":
                from . import telecom_expense_management_partner

                return telecom_expense_management_partner.TelecomExpenseManagementPartner()
            if mapping_value == "#microsoft.graph.temporaryAccessPassAuthenticationMethod":
                from . import temporary_access_pass_authentication_method

                return temporary_access_pass_authentication_method.TemporaryAccessPassAuthenticationMethod()
            if mapping_value == "#microsoft.graph.temporaryAccessPassAuthenticationMethodConfiguration":
                from . import temporary_access_pass_authentication_method_configuration

                return temporary_access_pass_authentication_method_configuration.TemporaryAccessPassAuthenticationMethodConfiguration()
            if mapping_value == "#microsoft.graph.tenantAdmin.settings":
                from .tenant_admin import settings

                return settings.Settings()
            if mapping_value == "#microsoft.graph.tenantAdmin.sharepoint":
                from .tenant_admin import sharepoint

                return sharepoint.Sharepoint()
            if mapping_value == "#microsoft.graph.tenantAppManagementPolicy":
                from . import tenant_app_management_policy

                return tenant_app_management_policy.TenantAppManagementPolicy()
            if mapping_value == "#microsoft.graph.tenantAttachRBAC":
                from . import tenant_attach_r_b_a_c

                return tenant_attach_r_b_a_c.TenantAttachRBAC()
            if mapping_value == "#microsoft.graph.tenantRelationshipAccessPolicyBase":
                from . import tenant_relationship_access_policy_base

                return tenant_relationship_access_policy_base.TenantRelationshipAccessPolicyBase()
            if mapping_value == "#microsoft.graph.tenantSetupInfo":
                from . import tenant_setup_info

                return tenant_setup_info.TenantSetupInfo()
            if mapping_value == "#microsoft.graph.termsAndConditions":
                from . import terms_and_conditions

                return terms_and_conditions.TermsAndConditions()
            if mapping_value == "#microsoft.graph.termsAndConditionsAcceptanceStatus":
                from . import terms_and_conditions_acceptance_status

                return terms_and_conditions_acceptance_status.TermsAndConditionsAcceptanceStatus()
            if mapping_value == "#microsoft.graph.termsAndConditionsAssignment":
                from . import terms_and_conditions_assignment

                return terms_and_conditions_assignment.TermsAndConditionsAssignment()
            if mapping_value == "#microsoft.graph.termsAndConditionsGroupAssignment":
                from . import terms_and_conditions_group_assignment

                return terms_and_conditions_group_assignment.TermsAndConditionsGroupAssignment()
            if mapping_value == "#microsoft.graph.termsOfUseContainer":
                from . import terms_of_use_container

                return terms_of_use_container.TermsOfUseContainer()
            if mapping_value == "#microsoft.graph.termStore.group":
                from . import group
                from .term_store import group

                return group.Group()
            if mapping_value == "#microsoft.graph.termStore.relation":
                from .term_store import relation

                return relation.Relation()
            if mapping_value == "#microsoft.graph.termStore.set":
                from .term_store import set

                return set.Set()
            if mapping_value == "#microsoft.graph.termStore.store":
                from .term_store import store

                return store.Store()
            if mapping_value == "#microsoft.graph.termStore.term":
                from .term_store import term

                return term.Term()
            if mapping_value == "#microsoft.graph.textClassificationRequest":
                from . import text_classification_request

                return text_classification_request.TextClassificationRequest()
            if mapping_value == "#microsoft.graph.textWebPart":
                from . import text_web_part

                return text_web_part.TextWebPart()
            if mapping_value == "#microsoft.graph.threatAssessmentRequest":
                from . import threat_assessment_request

                return threat_assessment_request.ThreatAssessmentRequest()
            if mapping_value == "#microsoft.graph.threatAssessmentResult":
                from . import threat_assessment_result

                return threat_assessment_result.ThreatAssessmentResult()
            if mapping_value == "#microsoft.graph.thumbnailSet":
                from . import thumbnail_set

                return thumbnail_set.ThumbnailSet()
            if mapping_value == "#microsoft.graph.tiIndicator":
                from . import ti_indicator

                return ti_indicator.TiIndicator()
            if mapping_value == "#microsoft.graph.timeCard":
                from . import time_card

                return time_card.TimeCard()
            if mapping_value == "#microsoft.graph.timeOff":
                from . import time_off

                return time_off.TimeOff()
            if mapping_value == "#microsoft.graph.timeOffReason":
                from . import time_off_reason

                return time_off_reason.TimeOffReason()
            if mapping_value == "#microsoft.graph.timeOffRequest":
                from . import time_off_request

                return time_off_request.TimeOffRequest()
            if mapping_value == "#microsoft.graph.todo":
                from . import todo

                return todo.Todo()
            if mapping_value == "#microsoft.graph.todoTask":
                from . import todo_task

                return todo_task.TodoTask()
            if mapping_value == "#microsoft.graph.todoTaskList":
                from . import todo_task_list

                return todo_task_list.TodoTaskList()
            if mapping_value == "#microsoft.graph.tokenIssuancePolicy":
                from . import token_issuance_policy

                return token_issuance_policy.TokenIssuancePolicy()
            if mapping_value == "#microsoft.graph.tokenLifetimePolicy":
                from . import token_lifetime_policy

                return token_lifetime_policy.TokenLifetimePolicy()
            if mapping_value == "#microsoft.graph.tooManyGlobalAdminsAssignedToTenantAlertConfiguration":
                from . import too_many_global_admins_assigned_to_tenant_alert_configuration

                return too_many_global_admins_assigned_to_tenant_alert_configuration.TooManyGlobalAdminsAssignedToTenantAlertConfiguration()
            if mapping_value == "#microsoft.graph.tooManyGlobalAdminsAssignedToTenantAlertIncident":
                from . import too_many_global_admins_assigned_to_tenant_alert_incident

                return too_many_global_admins_assigned_to_tenant_alert_incident.TooManyGlobalAdminsAssignedToTenantAlertIncident()
            if mapping_value == "#microsoft.graph.trending":
                from . import trending

                return trending.Trending()
            if mapping_value == "#microsoft.graph.trustFrameworkKeySet":
                from . import trust_framework_key_set

                return trust_framework_key_set.TrustFrameworkKeySet()
            if mapping_value == "#microsoft.graph.trustFrameworkPolicy":
                from . import trust_framework_policy

                return trust_framework_policy.TrustFrameworkPolicy()
            if mapping_value == "#microsoft.graph.unifiedRbacApplication":
                from . import unified_rbac_application

                return unified_rbac_application.UnifiedRbacApplication()
            if mapping_value == "#microsoft.graph.unifiedRbacResourceAction":
                from . import unified_rbac_resource_action

                return unified_rbac_resource_action.UnifiedRbacResourceAction()
            if mapping_value == "#microsoft.graph.unifiedRbacResourceNamespace":
                from . import unified_rbac_resource_namespace

                return unified_rbac_resource_namespace.UnifiedRbacResourceNamespace()
            if mapping_value == "#microsoft.graph.unifiedRbacResourceScope":
                from . import unified_rbac_resource_scope

                return unified_rbac_resource_scope.UnifiedRbacResourceScope()
            if mapping_value == "#microsoft.graph.unifiedRoleAssignment":
                from . import unified_role_assignment

                return unified_role_assignment.UnifiedRoleAssignment()
            if mapping_value == "#microsoft.graph.unifiedRoleAssignmentMultiple":
                from . import unified_role_assignment_multiple

                return unified_role_assignment_multiple.UnifiedRoleAssignmentMultiple()
            if mapping_value == "#microsoft.graph.unifiedRoleAssignmentSchedule":
                from . import unified_role_assignment_schedule

                return unified_role_assignment_schedule.UnifiedRoleAssignmentSchedule()
            if mapping_value == "#microsoft.graph.unifiedRoleAssignmentScheduleInstance":
                from . import unified_role_assignment_schedule_instance

                return unified_role_assignment_schedule_instance.UnifiedRoleAssignmentScheduleInstance()
            if mapping_value == "#microsoft.graph.unifiedRoleAssignmentScheduleRequest":
                from . import unified_role_assignment_schedule_request

                return unified_role_assignment_schedule_request.UnifiedRoleAssignmentScheduleRequest()
            if mapping_value == "#microsoft.graph.unifiedRoleDefinition":
                from . import unified_role_definition

                return unified_role_definition.UnifiedRoleDefinition()
            if mapping_value == "#microsoft.graph.unifiedRoleEligibilitySchedule":
                from . import unified_role_eligibility_schedule

                return unified_role_eligibility_schedule.UnifiedRoleEligibilitySchedule()
            if mapping_value == "#microsoft.graph.unifiedRoleEligibilityScheduleInstance":
                from . import unified_role_eligibility_schedule_instance

                return unified_role_eligibility_schedule_instance.UnifiedRoleEligibilityScheduleInstance()
            if mapping_value == "#microsoft.graph.unifiedRoleEligibilityScheduleRequest":
                from . import unified_role_eligibility_schedule_request

                return unified_role_eligibility_schedule_request.UnifiedRoleEligibilityScheduleRequest()
            if mapping_value == "#microsoft.graph.unifiedRoleManagementAlert":
                from . import unified_role_management_alert

                return unified_role_management_alert.UnifiedRoleManagementAlert()
            if mapping_value == "#microsoft.graph.unifiedRoleManagementAlertConfiguration":
                from . import unified_role_management_alert_configuration

                return unified_role_management_alert_configuration.UnifiedRoleManagementAlertConfiguration()
            if mapping_value == "#microsoft.graph.unifiedRoleManagementAlertDefinition":
                from . import unified_role_management_alert_definition

                return unified_role_management_alert_definition.UnifiedRoleManagementAlertDefinition()
            if mapping_value == "#microsoft.graph.unifiedRoleManagementAlertIncident":
                from . import unified_role_management_alert_incident

                return unified_role_management_alert_incident.UnifiedRoleManagementAlertIncident()
            if mapping_value == "#microsoft.graph.unifiedRoleManagementPolicy":
                from . import unified_role_management_policy

                return unified_role_management_policy.UnifiedRoleManagementPolicy()
            if mapping_value == "#microsoft.graph.unifiedRoleManagementPolicyApprovalRule":
                from . import unified_role_management_policy_approval_rule

                return unified_role_management_policy_approval_rule.UnifiedRoleManagementPolicyApprovalRule()
            if mapping_value == "#microsoft.graph.unifiedRoleManagementPolicyAssignment":
                from . import unified_role_management_policy_assignment

                return unified_role_management_policy_assignment.UnifiedRoleManagementPolicyAssignment()
            if mapping_value == "#microsoft.graph.unifiedRoleManagementPolicyAuthenticationContextRule":
                from . import unified_role_management_policy_authentication_context_rule

                return unified_role_management_policy_authentication_context_rule.UnifiedRoleManagementPolicyAuthenticationContextRule()
            if mapping_value == "#microsoft.graph.unifiedRoleManagementPolicyEnablementRule":
                from . import unified_role_management_policy_enablement_rule

                return unified_role_management_policy_enablement_rule.UnifiedRoleManagementPolicyEnablementRule()
            if mapping_value == "#microsoft.graph.unifiedRoleManagementPolicyExpirationRule":
                from . import unified_role_management_policy_expiration_rule

                return unified_role_management_policy_expiration_rule.UnifiedRoleManagementPolicyExpirationRule()
            if mapping_value == "#microsoft.graph.unifiedRoleManagementPolicyNotificationRule":
                from . import unified_role_management_policy_notification_rule

                return unified_role_management_policy_notification_rule.UnifiedRoleManagementPolicyNotificationRule()
            if mapping_value == "#microsoft.graph.unifiedRoleManagementPolicyRule":
                from . import unified_role_management_policy_rule

                return unified_role_management_policy_rule.UnifiedRoleManagementPolicyRule()
            if mapping_value == "#microsoft.graph.unifiedRoleScheduleBase":
                from . import unified_role_schedule_base

                return unified_role_schedule_base.UnifiedRoleScheduleBase()
            if mapping_value == "#microsoft.graph.unifiedRoleScheduleInstanceBase":
                from . import unified_role_schedule_instance_base

                return unified_role_schedule_instance_base.UnifiedRoleScheduleInstanceBase()
            if mapping_value == "#microsoft.graph.unitOfMeasure":
                from . import unit_of_measure

                return unit_of_measure.UnitOfMeasure()
            if mapping_value == "#microsoft.graph.unmanagedDeviceDiscoveryTask":
                from . import unmanaged_device_discovery_task

                return unmanaged_device_discovery_task.UnmanagedDeviceDiscoveryTask()
            if mapping_value == "#microsoft.graph.unmuteParticipantOperation":
                from . import unmute_participant_operation

                return unmute_participant_operation.UnmuteParticipantOperation()
            if mapping_value == "#microsoft.graph.unsupportedDeviceConfiguration":
                from . import unsupported_device_configuration

                return unsupported_device_configuration.UnsupportedDeviceConfiguration()
            if mapping_value == "#microsoft.graph.unsupportedGroupPolicyExtension":
                from . import unsupported_group_policy_extension

                return unsupported_group_policy_extension.UnsupportedGroupPolicyExtension()
            if mapping_value == "#microsoft.graph.updateRecordingStatusOperation":
                from . import update_recording_status_operation

                return update_recording_status_operation.UpdateRecordingStatusOperation()
            if mapping_value == "#microsoft.graph.urlAssessmentRequest":
                from . import url_assessment_request

                return url_assessment_request.UrlAssessmentRequest()
            if mapping_value == "#microsoft.graph.usageRight":
                from . import usage_right

                return usage_right.UsageRight()
            if mapping_value == "#microsoft.graph.usedInsight":
                from . import used_insight

                return used_insight.UsedInsight()
            if mapping_value == "#microsoft.graph.user":
                from . import user

                return user.User()
            if mapping_value == "#microsoft.graph.userAccountInformation":
                from . import user_account_information

                return user_account_information.UserAccountInformation()
            if mapping_value == "#microsoft.graph.userActivity":
                from . import user_activity

                return user_activity.UserActivity()
            if mapping_value == "#microsoft.graph.userAnalytics":
                from . import user_analytics

                return user_analytics.UserAnalytics()
            if mapping_value == "#microsoft.graph.userAppInstallStatus":
                from . import user_app_install_status

                return user_app_install_status.UserAppInstallStatus()
            if mapping_value == "#microsoft.graph.userConfiguration":
                from . import user_configuration

                return user_configuration.UserConfiguration()
            if mapping_value == "#microsoft.graph.userConsentRequest":
                from . import user_consent_request

                return user_consent_request.UserConsentRequest()
            if mapping_value == "#microsoft.graph.userCredentialUsageDetails":
                from . import user_credential_usage_details

                return user_credential_usage_details.UserCredentialUsageDetails()
            if mapping_value == "#microsoft.graph.userExperienceAnalyticsAnomaly":
                from . import user_experience_analytics_anomaly

                return user_experience_analytics_anomaly.UserExperienceAnalyticsAnomaly()
            if mapping_value == "#microsoft.graph.userExperienceAnalyticsAnomalyDevice":
                from . import user_experience_analytics_anomaly_device

                return user_experience_analytics_anomaly_device.UserExperienceAnalyticsAnomalyDevice()
            if mapping_value == "#microsoft.graph.userExperienceAnalyticsAppHealthApplicationPerformance":
                from . import user_experience_analytics_app_health_application_performance

                return user_experience_analytics_app_health_application_performance.UserExperienceAnalyticsAppHealthApplicationPerformance()
            if mapping_value == "#microsoft.graph.userExperienceAnalyticsAppHealthAppPerformanceByAppVersion":
                from . import user_experience_analytics_app_health_app_performance_by_app_version

                return user_experience_analytics_app_health_app_performance_by_app_version.UserExperienceAnalyticsAppHealthAppPerformanceByAppVersion()
            if mapping_value == "#microsoft.graph.userExperienceAnalyticsAppHealthAppPerformanceByAppVersionDetails":
                from . import user_experience_analytics_app_health_app_performance_by_app_version_details

                return user_experience_analytics_app_health_app_performance_by_app_version_details.UserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDetails()
            if mapping_value == "#microsoft.graph.userExperienceAnalyticsAppHealthAppPerformanceByAppVersionDeviceId":
                from . import user_experience_analytics_app_health_app_performance_by_app_version_device_id

                return user_experience_analytics_app_health_app_performance_by_app_version_device_id.UserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDeviceId()
            if mapping_value == "#microsoft.graph.userExperienceAnalyticsAppHealthAppPerformanceByOSVersion":
                from . import user_experience_analytics_app_health_app_performance_by_o_s_version

                return user_experience_analytics_app_health_app_performance_by_o_s_version.UserExperienceAnalyticsAppHealthAppPerformanceByOSVersion()
            if mapping_value == "#microsoft.graph.userExperienceAnalyticsAppHealthDeviceModelPerformance":
                from . import user_experience_analytics_app_health_device_model_performance

                return user_experience_analytics_app_health_device_model_performance.UserExperienceAnalyticsAppHealthDeviceModelPerformance()
            if mapping_value == "#microsoft.graph.userExperienceAnalyticsAppHealthDevicePerformance":
                from . import user_experience_analytics_app_health_device_performance

                return user_experience_analytics_app_health_device_performance.UserExperienceAnalyticsAppHealthDevicePerformance()
            if mapping_value == "#microsoft.graph.userExperienceAnalyticsAppHealthDevicePerformanceDetails":
                from . import user_experience_analytics_app_health_device_performance_details

                return user_experience_analytics_app_health_device_performance_details.UserExperienceAnalyticsAppHealthDevicePerformanceDetails()
            if mapping_value == "#microsoft.graph.userExperienceAnalyticsAppHealthOSVersionPerformance":
                from . import user_experience_analytics_app_health_o_s_version_performance

                return user_experience_analytics_app_health_o_s_version_performance.UserExperienceAnalyticsAppHealthOSVersionPerformance()
            if mapping_value == "#microsoft.graph.userExperienceAnalyticsBaseline":
                from . import user_experience_analytics_baseline

                return user_experience_analytics_baseline.UserExperienceAnalyticsBaseline()
            if mapping_value == "#microsoft.graph.userExperienceAnalyticsBatteryHealthAppImpact":
                from . import user_experience_analytics_battery_health_app_impact

                return user_experience_analytics_battery_health_app_impact.UserExperienceAnalyticsBatteryHealthAppImpact()
            if mapping_value == "#microsoft.graph.userExperienceAnalyticsBatteryHealthCapacityDetails":
                from . import user_experience_analytics_battery_health_capacity_details

                return user_experience_analytics_battery_health_capacity_details.UserExperienceAnalyticsBatteryHealthCapacityDetails()
            if mapping_value == "#microsoft.graph.userExperienceAnalyticsBatteryHealthDeviceAppImpact":
                from . import user_experience_analytics_battery_health_device_app_impact

                return user_experience_analytics_battery_health_device_app_impact.UserExperienceAnalyticsBatteryHealthDeviceAppImpact()
            if mapping_value == "#microsoft.graph.userExperienceAnalyticsBatteryHealthDevicePerformance":
                from . import user_experience_analytics_battery_health_device_performance

                return user_experience_analytics_battery_health_device_performance.UserExperienceAnalyticsBatteryHealthDevicePerformance()
            if mapping_value == "#microsoft.graph.userExperienceAnalyticsBatteryHealthDeviceRuntimeHistory":
                from . import user_experience_analytics_battery_health_device_runtime_history

                return user_experience_analytics_battery_health_device_runtime_history.UserExperienceAnalyticsBatteryHealthDeviceRuntimeHistory()
            if mapping_value == "#microsoft.graph.userExperienceAnalyticsBatteryHealthModelPerformance":
                from . import user_experience_analytics_battery_health_model_performance

                return user_experience_analytics_battery_health_model_performance.UserExperienceAnalyticsBatteryHealthModelPerformance()
            if mapping_value == "#microsoft.graph.userExperienceAnalyticsBatteryHealthOsPerformance":
                from . import user_experience_analytics_battery_health_os_performance

                return user_experience_analytics_battery_health_os_performance.UserExperienceAnalyticsBatteryHealthOsPerformance()
            if mapping_value == "#microsoft.graph.userExperienceAnalyticsBatteryHealthRuntimeDetails":
                from . import user_experience_analytics_battery_health_runtime_details

                return user_experience_analytics_battery_health_runtime_details.UserExperienceAnalyticsBatteryHealthRuntimeDetails()
            if mapping_value == "#microsoft.graph.userExperienceAnalyticsCategory":
                from . import user_experience_analytics_category

                return user_experience_analytics_category.UserExperienceAnalyticsCategory()
            if mapping_value == "#microsoft.graph.userExperienceAnalyticsDevicePerformance":
                from . import user_experience_analytics_device_performance

                return user_experience_analytics_device_performance.UserExperienceAnalyticsDevicePerformance()
            if mapping_value == "#microsoft.graph.userExperienceAnalyticsDeviceScope":
                from . import user_experience_analytics_device_scope

                return user_experience_analytics_device_scope.UserExperienceAnalyticsDeviceScope()
            if mapping_value == "#microsoft.graph.userExperienceAnalyticsDeviceScores":
                from . import user_experience_analytics_device_scores

                return user_experience_analytics_device_scores.UserExperienceAnalyticsDeviceScores()
            if mapping_value == "#microsoft.graph.userExperienceAnalyticsDeviceStartupHistory":
                from . import user_experience_analytics_device_startup_history

                return user_experience_analytics_device_startup_history.UserExperienceAnalyticsDeviceStartupHistory()
            if mapping_value == "#microsoft.graph.userExperienceAnalyticsDeviceStartupProcess":
                from . import user_experience_analytics_device_startup_process

                return user_experience_analytics_device_startup_process.UserExperienceAnalyticsDeviceStartupProcess()
            if mapping_value == "#microsoft.graph.userExperienceAnalyticsDeviceStartupProcessPerformance":
                from . import user_experience_analytics_device_startup_process_performance

                return user_experience_analytics_device_startup_process_performance.UserExperienceAnalyticsDeviceStartupProcessPerformance()
            if mapping_value == "#microsoft.graph.userExperienceAnalyticsDeviceTimelineEvent":
                from . import user_experience_analytics_device_timeline_event

                return user_experience_analytics_device_timeline_event.UserExperienceAnalyticsDeviceTimelineEvent()
            if mapping_value == "#microsoft.graph.userExperienceAnalyticsDeviceWithoutCloudIdentity":
                from . import user_experience_analytics_device_without_cloud_identity

                return user_experience_analytics_device_without_cloud_identity.UserExperienceAnalyticsDeviceWithoutCloudIdentity()
            if mapping_value == "#microsoft.graph.userExperienceAnalyticsImpactingProcess":
                from . import user_experience_analytics_impacting_process

                return user_experience_analytics_impacting_process.UserExperienceAnalyticsImpactingProcess()
            if mapping_value == "#microsoft.graph.userExperienceAnalyticsMetric":
                from . import user_experience_analytics_metric

                return user_experience_analytics_metric.UserExperienceAnalyticsMetric()
            if mapping_value == "#microsoft.graph.userExperienceAnalyticsMetricHistory":
                from . import user_experience_analytics_metric_history

                return user_experience_analytics_metric_history.UserExperienceAnalyticsMetricHistory()
            if mapping_value == "#microsoft.graph.userExperienceAnalyticsModelScores":
                from . import user_experience_analytics_model_scores

                return user_experience_analytics_model_scores.UserExperienceAnalyticsModelScores()
            if mapping_value == "#microsoft.graph.userExperienceAnalyticsNotAutopilotReadyDevice":
                from . import user_experience_analytics_not_autopilot_ready_device

                return user_experience_analytics_not_autopilot_ready_device.UserExperienceAnalyticsNotAutopilotReadyDevice()
            if mapping_value == "#microsoft.graph.userExperienceAnalyticsOverview":
                from . import user_experience_analytics_overview

                return user_experience_analytics_overview.UserExperienceAnalyticsOverview()
            if mapping_value == "#microsoft.graph.userExperienceAnalyticsRemoteConnection":
                from . import user_experience_analytics_remote_connection

                return user_experience_analytics_remote_connection.UserExperienceAnalyticsRemoteConnection()
            if mapping_value == "#microsoft.graph.userExperienceAnalyticsResourcePerformance":
                from . import user_experience_analytics_resource_performance

                return user_experience_analytics_resource_performance.UserExperienceAnalyticsResourcePerformance()
            if mapping_value == "#microsoft.graph.userExperienceAnalyticsScoreHistory":
                from . import user_experience_analytics_score_history

                return user_experience_analytics_score_history.UserExperienceAnalyticsScoreHistory()
            if mapping_value == "#microsoft.graph.userExperienceAnalyticsWorkFromAnywhereDevice":
                from . import user_experience_analytics_work_from_anywhere_device

                return user_experience_analytics_work_from_anywhere_device.UserExperienceAnalyticsWorkFromAnywhereDevice()
            if mapping_value == "#microsoft.graph.userExperienceAnalyticsWorkFromAnywhereHardwareReadinessMetric":
                from . import user_experience_analytics_work_from_anywhere_hardware_readiness_metric

                return user_experience_analytics_work_from_anywhere_hardware_readiness_metric.UserExperienceAnalyticsWorkFromAnywhereHardwareReadinessMetric()
            if mapping_value == "#microsoft.graph.userExperienceAnalyticsWorkFromAnywhereMetric":
                from . import user_experience_analytics_work_from_anywhere_metric

                return user_experience_analytics_work_from_anywhere_metric.UserExperienceAnalyticsWorkFromAnywhereMetric()
            if mapping_value == "#microsoft.graph.userExperienceAnalyticsWorkFromAnywhereModelPerformance":
                from . import user_experience_analytics_work_from_anywhere_model_performance

                return user_experience_analytics_work_from_anywhere_model_performance.UserExperienceAnalyticsWorkFromAnywhereModelPerformance()
            if mapping_value == "#microsoft.graph.userFlowLanguageConfiguration":
                from . import user_flow_language_configuration

                return user_flow_language_configuration.UserFlowLanguageConfiguration()
            if mapping_value == "#microsoft.graph.userFlowLanguagePage":
                from . import user_flow_language_page

                return user_flow_language_page.UserFlowLanguagePage()
            if mapping_value == "#microsoft.graph.userInsightsSettings":
                from . import user_insights_settings

                return user_insights_settings.UserInsightsSettings()
            if mapping_value == "#microsoft.graph.userInstallStateSummary":
                from . import user_install_state_summary

                return user_install_state_summary.UserInstallStateSummary()
            if mapping_value == "#microsoft.graph.userPFXCertificate":
                from . import user_p_f_x_certificate

                return user_p_f_x_certificate.UserPFXCertificate()
            if mapping_value == "#microsoft.graph.userRegistrationDetails":
                from . import user_registration_details

                return user_registration_details.UserRegistrationDetails()
            if mapping_value == "#microsoft.graph.userScopeTeamsAppInstallation":
                from . import user_scope_teams_app_installation

                return user_scope_teams_app_installation.UserScopeTeamsAppInstallation()
            if mapping_value == "#microsoft.graph.userSecurityProfile":
                from . import user_security_profile

                return user_security_profile.UserSecurityProfile()
            if mapping_value == "#microsoft.graph.userSettings":
                from . import user_settings

                return user_settings.UserSettings()
            if mapping_value == "#microsoft.graph.userSignInInsight":
                from . import user_sign_in_insight

                return user_sign_in_insight.UserSignInInsight()
            if mapping_value == "#microsoft.graph.userTeamwork":
                from . import user_teamwork

                return user_teamwork.UserTeamwork()
            if mapping_value == "#microsoft.graph.vendor":
                from . import vendor

                return vendor.Vendor()
            if mapping_value == "#microsoft.graph.verticalSection":
                from . import vertical_section

                return vertical_section.VerticalSection()
            if mapping_value == "#microsoft.graph.virtualAppointment":
                from . import virtual_appointment

                return virtual_appointment.VirtualAppointment()
            if mapping_value == "#microsoft.graph.virtualEndpoint":
                from . import virtual_endpoint

                return virtual_endpoint.VirtualEndpoint()
            if mapping_value == "#microsoft.graph.voiceAuthenticationMethodConfiguration":
                from . import voice_authentication_method_configuration

                return voice_authentication_method_configuration.VoiceAuthenticationMethodConfiguration()
            if mapping_value == "#microsoft.graph.voiceAuthenticationMethodTarget":
                from . import voice_authentication_method_target

                return voice_authentication_method_target.VoiceAuthenticationMethodTarget()
            if mapping_value == "#microsoft.graph.vpnConfiguration":
                from . import vpn_configuration

                return vpn_configuration.VpnConfiguration()
            if mapping_value == "#microsoft.graph.vppToken":
                from . import vpp_token

                return vpp_token.VppToken()
            if mapping_value == "#microsoft.graph.vulnerableManagedDevice":
                from . import vulnerable_managed_device

                return vulnerable_managed_device.VulnerableManagedDevice()
            if mapping_value == "#microsoft.graph.webAccount":
                from . import web_account

                return web_account.WebAccount()
            if mapping_value == "#microsoft.graph.webApp":
                from . import web_app

                return web_app.WebApp()
            if mapping_value == "#microsoft.graph.webApplicationSegment":
                from . import web_application_segment

                return web_application_segment.WebApplicationSegment()
            if mapping_value == "#microsoft.graph.webPart":
                from . import web_part

                return web_part.WebPart()
            if mapping_value == "#microsoft.graph.win32LobApp":
                from . import win32_lob_app

                return win32_lob_app.Win32LobApp()
            if mapping_value == "#microsoft.graph.windows10CertificateProfileBase":
                from . import windows10_certificate_profile_base

                return windows10_certificate_profile_base.Windows10CertificateProfileBase()
            if mapping_value == "#microsoft.graph.windows10CompliancePolicy":
                from . import windows10_compliance_policy

                return windows10_compliance_policy.Windows10CompliancePolicy()
            if mapping_value == "#microsoft.graph.windows10CustomConfiguration":
                from . import windows10_custom_configuration

                return windows10_custom_configuration.Windows10CustomConfiguration()
            if mapping_value == "#microsoft.graph.windows10DeviceFirmwareConfigurationInterface":
                from . import windows10_device_firmware_configuration_interface

                return windows10_device_firmware_configuration_interface.Windows10DeviceFirmwareConfigurationInterface()
            if mapping_value == "#microsoft.graph.windows10EasEmailProfileConfiguration":
                from . import windows10_eas_email_profile_configuration

                return windows10_eas_email_profile_configuration.Windows10EasEmailProfileConfiguration()
            if mapping_value == "#microsoft.graph.windows10EndpointProtectionConfiguration":
                from . import windows10_endpoint_protection_configuration

                return windows10_endpoint_protection_configuration.Windows10EndpointProtectionConfiguration()
            if mapping_value == "#microsoft.graph.windows10EnrollmentCompletionPageConfiguration":
                from . import windows10_enrollment_completion_page_configuration

                return windows10_enrollment_completion_page_configuration.Windows10EnrollmentCompletionPageConfiguration()
            if mapping_value == "#microsoft.graph.windows10EnrollmentCompletionPageConfigurationPolicySetItem":
                from . import windows10_enrollment_completion_page_configuration_policy_set_item

                return windows10_enrollment_completion_page_configuration_policy_set_item.Windows10EnrollmentCompletionPageConfigurationPolicySetItem()
            if mapping_value == "#microsoft.graph.windows10EnterpriseModernAppManagementConfiguration":
                from . import windows10_enterprise_modern_app_management_configuration

                return windows10_enterprise_modern_app_management_configuration.Windows10EnterpriseModernAppManagementConfiguration()
            if mapping_value == "#microsoft.graph.windows10GeneralConfiguration":
                from . import windows10_general_configuration

                return windows10_general_configuration.Windows10GeneralConfiguration()
            if mapping_value == "#microsoft.graph.windows10ImportedPFXCertificateProfile":
                from . import windows10_imported_p_f_x_certificate_profile

                return windows10_imported_p_f_x_certificate_profile.Windows10ImportedPFXCertificateProfile()
            if mapping_value == "#microsoft.graph.windows10MobileCompliancePolicy":
                from . import windows10_mobile_compliance_policy

                return windows10_mobile_compliance_policy.Windows10MobileCompliancePolicy()
            if mapping_value == "#microsoft.graph.windows10NetworkBoundaryConfiguration":
                from . import windows10_network_boundary_configuration

                return windows10_network_boundary_configuration.Windows10NetworkBoundaryConfiguration()
            if mapping_value == "#microsoft.graph.windows10PFXImportCertificateProfile":
                from . import windows10_p_f_x_import_certificate_profile

                return windows10_p_f_x_import_certificate_profile.Windows10PFXImportCertificateProfile()
            if mapping_value == "#microsoft.graph.windows10PkcsCertificateProfile":
                from . import windows10_pkcs_certificate_profile

                return windows10_pkcs_certificate_profile.Windows10PkcsCertificateProfile()
            if mapping_value == "#microsoft.graph.windows10SecureAssessmentConfiguration":
                from . import windows10_secure_assessment_configuration

                return windows10_secure_assessment_configuration.Windows10SecureAssessmentConfiguration()
            if mapping_value == "#microsoft.graph.windows10TeamGeneralConfiguration":
                from . import windows10_team_general_configuration

                return windows10_team_general_configuration.Windows10TeamGeneralConfiguration()
            if mapping_value == "#microsoft.graph.windows10VpnConfiguration":
                from . import windows10_vpn_configuration

                return windows10_vpn_configuration.Windows10VpnConfiguration()
            if mapping_value == "#microsoft.graph.windows10XCertificateProfile":
                from . import windows10_x_certificate_profile

                return windows10_x_certificate_profile.Windows10XCertificateProfile()
            if mapping_value == "#microsoft.graph.windows10XSCEPCertificateProfile":
                from . import windows10_x_s_c_e_p_certificate_profile

                return windows10_x_s_c_e_p_certificate_profile.Windows10XSCEPCertificateProfile()
            if mapping_value == "#microsoft.graph.windows10XTrustedRootCertificate":
                from . import windows10_x_trusted_root_certificate

                return windows10_x_trusted_root_certificate.Windows10XTrustedRootCertificate()
            if mapping_value == "#microsoft.graph.windows10XVpnConfiguration":
                from . import windows10_x_vpn_configuration

                return windows10_x_vpn_configuration.Windows10XVpnConfiguration()
            if mapping_value == "#microsoft.graph.windows10XWifiConfiguration":
                from . import windows10_x_wifi_configuration

                return windows10_x_wifi_configuration.Windows10XWifiConfiguration()
            if mapping_value == "#microsoft.graph.windows81CertificateProfileBase":
                from . import windows81_certificate_profile_base

                return windows81_certificate_profile_base.Windows81CertificateProfileBase()
            if mapping_value == "#microsoft.graph.windows81CompliancePolicy":
                from . import windows81_compliance_policy

                return windows81_compliance_policy.Windows81CompliancePolicy()
            if mapping_value == "#microsoft.graph.windows81GeneralConfiguration":
                from . import windows81_general_configuration

                return windows81_general_configuration.Windows81GeneralConfiguration()
            if mapping_value == "#microsoft.graph.windows81SCEPCertificateProfile":
                from . import windows81_s_c_e_p_certificate_profile

                return windows81_s_c_e_p_certificate_profile.Windows81SCEPCertificateProfile()
            if mapping_value == "#microsoft.graph.windows81TrustedRootCertificate":
                from . import windows81_trusted_root_certificate

                return windows81_trusted_root_certificate.Windows81TrustedRootCertificate()
            if mapping_value == "#microsoft.graph.windows81VpnConfiguration":
                from . import windows81_vpn_configuration

                return windows81_vpn_configuration.Windows81VpnConfiguration()
            if mapping_value == "#microsoft.graph.windows81WifiImportConfiguration":
                from . import windows81_wifi_import_configuration

                return windows81_wifi_import_configuration.Windows81WifiImportConfiguration()
            if mapping_value == "#microsoft.graph.windowsAppX":
                from . import windows_app_x

                return windows_app_x.WindowsAppX()
            if mapping_value == "#microsoft.graph.windowsAssignedAccessProfile":
                from . import windows_assigned_access_profile

                return windows_assigned_access_profile.WindowsAssignedAccessProfile()
            if mapping_value == "#microsoft.graph.windowsAutopilotDeploymentProfile":
                from . import windows_autopilot_deployment_profile

                return windows_autopilot_deployment_profile.WindowsAutopilotDeploymentProfile()
            if mapping_value == "#microsoft.graph.windowsAutopilotDeploymentProfileAssignment":
                from . import windows_autopilot_deployment_profile_assignment

                return windows_autopilot_deployment_profile_assignment.WindowsAutopilotDeploymentProfileAssignment()
            if mapping_value == "#microsoft.graph.windowsAutopilotDeploymentProfilePolicySetItem":
                from . import windows_autopilot_deployment_profile_policy_set_item

                return windows_autopilot_deployment_profile_policy_set_item.WindowsAutopilotDeploymentProfilePolicySetItem()
            if mapping_value == "#microsoft.graph.windowsAutopilotDeviceIdentity":
                from . import windows_autopilot_device_identity

                return windows_autopilot_device_identity.WindowsAutopilotDeviceIdentity()
            if mapping_value == "#microsoft.graph.windowsAutopilotSettings":
                from . import windows_autopilot_settings

                return windows_autopilot_settings.WindowsAutopilotSettings()
            if mapping_value == "#microsoft.graph.windowsCertificateProfileBase":
                from . import windows_certificate_profile_base

                return windows_certificate_profile_base.WindowsCertificateProfileBase()
            if mapping_value == "#microsoft.graph.windowsDefenderAdvancedThreatProtectionConfiguration":
                from . import windows_defender_advanced_threat_protection_configuration

                return windows_defender_advanced_threat_protection_configuration.WindowsDefenderAdvancedThreatProtectionConfiguration()
            if mapping_value == "#microsoft.graph.windowsDefenderApplicationControlSupplementalPolicy":
                from . import windows_defender_application_control_supplemental_policy

                return windows_defender_application_control_supplemental_policy.WindowsDefenderApplicationControlSupplementalPolicy()
            if mapping_value == "#microsoft.graph.windowsDefenderApplicationControlSupplementalPolicyAssignment":
                from . import windows_defender_application_control_supplemental_policy_assignment

                return windows_defender_application_control_supplemental_policy_assignment.WindowsDefenderApplicationControlSupplementalPolicyAssignment()
            if mapping_value == "#microsoft.graph.windowsDefenderApplicationControlSupplementalPolicyDeploymentStatus":
                from . import windows_defender_application_control_supplemental_policy_deployment_status

                return windows_defender_application_control_supplemental_policy_deployment_status.WindowsDefenderApplicationControlSupplementalPolicyDeploymentStatus()
            if mapping_value == "#microsoft.graph.windowsDefenderApplicationControlSupplementalPolicyDeploymentSummary":
                from . import windows_defender_application_control_supplemental_policy_deployment_summary

                return windows_defender_application_control_supplemental_policy_deployment_summary.WindowsDefenderApplicationControlSupplementalPolicyDeploymentSummary()
            if mapping_value == "#microsoft.graph.windowsDeliveryOptimizationConfiguration":
                from . import windows_delivery_optimization_configuration

                return windows_delivery_optimization_configuration.WindowsDeliveryOptimizationConfiguration()
            if mapping_value == "#microsoft.graph.windowsDeviceMalwareState":
                from . import windows_device_malware_state
                from .managed_tenants import windows_device_malware_state

                return windows_device_malware_state.WindowsDeviceMalwareState()
            if mapping_value == "#microsoft.graph.windowsDomainJoinConfiguration":
                from . import windows_domain_join_configuration

                return windows_domain_join_configuration.WindowsDomainJoinConfiguration()
            if mapping_value == "#microsoft.graph.windowsDriverUpdateInventory":
                from . import windows_driver_update_inventory

                return windows_driver_update_inventory.WindowsDriverUpdateInventory()
            if mapping_value == "#microsoft.graph.windowsDriverUpdateProfile":
                from . import windows_driver_update_profile

                return windows_driver_update_profile.WindowsDriverUpdateProfile()
            if mapping_value == "#microsoft.graph.windowsDriverUpdateProfileAssignment":
                from . import windows_driver_update_profile_assignment

                return windows_driver_update_profile_assignment.WindowsDriverUpdateProfileAssignment()
            if mapping_value == "#microsoft.graph.windowsFeatureUpdateCatalogItem":
                from . import windows_feature_update_catalog_item

                return windows_feature_update_catalog_item.WindowsFeatureUpdateCatalogItem()
            if mapping_value == "#microsoft.graph.windowsFeatureUpdateProfile":
                from . import windows_feature_update_profile

                return windows_feature_update_profile.WindowsFeatureUpdateProfile()
            if mapping_value == "#microsoft.graph.windowsFeatureUpdateProfileAssignment":
                from . import windows_feature_update_profile_assignment

                return windows_feature_update_profile_assignment.WindowsFeatureUpdateProfileAssignment()
            if mapping_value == "#microsoft.graph.windowsHealthMonitoringConfiguration":
                from . import windows_health_monitoring_configuration

                return windows_health_monitoring_configuration.WindowsHealthMonitoringConfiguration()
            if mapping_value == "#microsoft.graph.windowsHelloForBusinessAuthenticationMethod":
                from . import windows_hello_for_business_authentication_method

                return windows_hello_for_business_authentication_method.WindowsHelloForBusinessAuthenticationMethod()
            if mapping_value == "#microsoft.graph.windowsIdentityProtectionConfiguration":
                from . import windows_identity_protection_configuration

                return windows_identity_protection_configuration.WindowsIdentityProtectionConfiguration()
            if mapping_value == "#microsoft.graph.windowsInformationProtection":
                from . import windows_information_protection

                return windows_information_protection.WindowsInformationProtection()
            if mapping_value == "#microsoft.graph.windowsInformationProtectionAppLearningSummary":
                from . import windows_information_protection_app_learning_summary

                return windows_information_protection_app_learning_summary.WindowsInformationProtectionAppLearningSummary()
            if mapping_value == "#microsoft.graph.windowsInformationProtectionAppLockerFile":
                from . import windows_information_protection_app_locker_file

                return windows_information_protection_app_locker_file.WindowsInformationProtectionAppLockerFile()
            if mapping_value == "#microsoft.graph.windowsInformationProtectionDeviceRegistration":
                from . import windows_information_protection_device_registration

                return windows_information_protection_device_registration.WindowsInformationProtectionDeviceRegistration()
            if mapping_value == "#microsoft.graph.windowsInformationProtectionNetworkLearningSummary":
                from . import windows_information_protection_network_learning_summary

                return windows_information_protection_network_learning_summary.WindowsInformationProtectionNetworkLearningSummary()
            if mapping_value == "#microsoft.graph.windowsInformationProtectionPolicy":
                from . import windows_information_protection_policy

                return windows_information_protection_policy.WindowsInformationProtectionPolicy()
            if mapping_value == "#microsoft.graph.windowsInformationProtectionWipeAction":
                from . import windows_information_protection_wipe_action

                return windows_information_protection_wipe_action.WindowsInformationProtectionWipeAction()
            if mapping_value == "#microsoft.graph.windowsKioskConfiguration":
                from . import windows_kiosk_configuration

                return windows_kiosk_configuration.WindowsKioskConfiguration()
            if mapping_value == "#microsoft.graph.windowsMalwareInformation":
                from . import windows_malware_information

                return windows_malware_information.WindowsMalwareInformation()
            if mapping_value == "#microsoft.graph.windowsManagedAppProtection":
                from . import windows_managed_app_protection

                return windows_managed_app_protection.WindowsManagedAppProtection()
            if mapping_value == "#microsoft.graph.windowsManagedDevice":
                from . import windows_managed_device

                return windows_managed_device.WindowsManagedDevice()
            if mapping_value == "#microsoft.graph.windowsManagementApp":
                from . import windows_management_app

                return windows_management_app.WindowsManagementApp()
            if mapping_value == "#microsoft.graph.windowsManagementAppHealthState":
                from . import windows_management_app_health_state

                return windows_management_app_health_state.WindowsManagementAppHealthState()
            if mapping_value == "#microsoft.graph.windowsManagementAppHealthSummary":
                from . import windows_management_app_health_summary

                return windows_management_app_health_summary.WindowsManagementAppHealthSummary()
            if mapping_value == "#microsoft.graph.windowsMicrosoftEdgeApp":
                from . import windows_microsoft_edge_app

                return windows_microsoft_edge_app.WindowsMicrosoftEdgeApp()
            if mapping_value == "#microsoft.graph.windowsMobileMSI":
                from . import windows_mobile_m_s_i

                return windows_mobile_m_s_i.WindowsMobileMSI()
            if mapping_value == "#microsoft.graph.windowsOfficeClientConfiguration":
                from . import windows_office_client_configuration

                return windows_office_client_configuration.WindowsOfficeClientConfiguration()
            if mapping_value == "#microsoft.graph.windowsOfficeClientSecurityConfiguration":
                from . import windows_office_client_security_configuration

                return windows_office_client_security_configuration.WindowsOfficeClientSecurityConfiguration()
            if mapping_value == "#microsoft.graph.windowsPhone81AppX":
                from . import windows_phone81_app_x

                return windows_phone81_app_x.WindowsPhone81AppX()
            if mapping_value == "#microsoft.graph.windowsPhone81AppXBundle":
                from . import windows_phone81_app_x_bundle

                return windows_phone81_app_x_bundle.WindowsPhone81AppXBundle()
            if mapping_value == "#microsoft.graph.windowsPhone81CertificateProfileBase":
                from . import windows_phone81_certificate_profile_base

                return windows_phone81_certificate_profile_base.WindowsPhone81CertificateProfileBase()
            if mapping_value == "#microsoft.graph.windowsPhone81CompliancePolicy":
                from . import windows_phone81_compliance_policy

                return windows_phone81_compliance_policy.WindowsPhone81CompliancePolicy()
            if mapping_value == "#microsoft.graph.windowsPhone81CustomConfiguration":
                from . import windows_phone81_custom_configuration

                return windows_phone81_custom_configuration.WindowsPhone81CustomConfiguration()
            if mapping_value == "#microsoft.graph.windowsPhone81GeneralConfiguration":
                from . import windows_phone81_general_configuration

                return windows_phone81_general_configuration.WindowsPhone81GeneralConfiguration()
            if mapping_value == "#microsoft.graph.windowsPhone81ImportedPFXCertificateProfile":
                from . import windows_phone81_imported_p_f_x_certificate_profile

                return windows_phone81_imported_p_f_x_certificate_profile.WindowsPhone81ImportedPFXCertificateProfile()
            if mapping_value == "#microsoft.graph.windowsPhone81SCEPCertificateProfile":
                from . import windows_phone81_s_c_e_p_certificate_profile

                return windows_phone81_s_c_e_p_certificate_profile.WindowsPhone81SCEPCertificateProfile()
            if mapping_value == "#microsoft.graph.windowsPhone81StoreApp":
                from . import windows_phone81_store_app

                return windows_phone81_store_app.WindowsPhone81StoreApp()
            if mapping_value == "#microsoft.graph.windowsPhone81TrustedRootCertificate":
                from . import windows_phone81_trusted_root_certificate

                return windows_phone81_trusted_root_certificate.WindowsPhone81TrustedRootCertificate()
            if mapping_value == "#microsoft.graph.windowsPhone81VpnConfiguration":
                from . import windows_phone81_vpn_configuration

                return windows_phone81_vpn_configuration.WindowsPhone81VpnConfiguration()
            if mapping_value == "#microsoft.graph.windowsPhoneEASEmailProfileConfiguration":
                from . import windows_phone_e_a_s_email_profile_configuration

                return windows_phone_e_a_s_email_profile_configuration.WindowsPhoneEASEmailProfileConfiguration()
            if mapping_value == "#microsoft.graph.windowsPhoneXAP":
                from . import windows_phone_x_a_p

                return windows_phone_x_a_p.WindowsPhoneXAP()
            if mapping_value == "#microsoft.graph.windowsPrivacyDataAccessControlItem":
                from . import windows_privacy_data_access_control_item

                return windows_privacy_data_access_control_item.WindowsPrivacyDataAccessControlItem()
            if mapping_value == "#microsoft.graph.windowsProtectionState":
                from . import windows_protection_state
                from .managed_tenants import windows_protection_state

                return windows_protection_state.WindowsProtectionState()
            if mapping_value == "#microsoft.graph.windowsQualityUpdateCatalogItem":
                from . import windows_quality_update_catalog_item

                return windows_quality_update_catalog_item.WindowsQualityUpdateCatalogItem()
            if mapping_value == "#microsoft.graph.windowsQualityUpdateProfile":
                from . import windows_quality_update_profile

                return windows_quality_update_profile.WindowsQualityUpdateProfile()
            if mapping_value == "#microsoft.graph.windowsQualityUpdateProfileAssignment":
                from . import windows_quality_update_profile_assignment

                return windows_quality_update_profile_assignment.WindowsQualityUpdateProfileAssignment()
            if mapping_value == "#microsoft.graph.windowsStoreApp":
                from . import windows_store_app

                return windows_store_app.WindowsStoreApp()
            if mapping_value == "#microsoft.graph.windowsUniversalAppX":
                from . import windows_universal_app_x

                return windows_universal_app_x.WindowsUniversalAppX()
            if mapping_value == "#microsoft.graph.windowsUniversalAppXContainedApp":
                from . import windows_universal_app_x_contained_app

                return windows_universal_app_x_contained_app.WindowsUniversalAppXContainedApp()
            if mapping_value == "#microsoft.graph.windowsUpdateCatalogItem":
                from . import windows_update_catalog_item

                return windows_update_catalog_item.WindowsUpdateCatalogItem()
            if mapping_value == "#microsoft.graph.windowsUpdateForBusinessConfiguration":
                from . import windows_update_for_business_configuration

                return windows_update_for_business_configuration.WindowsUpdateForBusinessConfiguration()
            if mapping_value == "#microsoft.graph.windowsUpdates.azureADDevice":
                from .windows_updates import azure_a_d_device

                return azure_a_d_device.AzureADDevice()
            if mapping_value == "#microsoft.graph.windowsUpdates.catalog":
                from .windows_updates import catalog

                return catalog.Catalog()
            if mapping_value == "#microsoft.graph.windowsUpdates.catalogEntry":
                from .windows_updates import catalog_entry

                return catalog_entry.CatalogEntry()
            if mapping_value == "#microsoft.graph.windowsUpdates.complianceChange":
                from .windows_updates import compliance_change

                return compliance_change.ComplianceChange()
            if mapping_value == "#microsoft.graph.windowsUpdates.contentApproval":
                from .windows_updates import content_approval

                return content_approval.ContentApproval()
            if mapping_value == "#microsoft.graph.windowsUpdates.deployment":
                from .windows_updates import deployment

                return deployment.Deployment()
            if mapping_value == "#microsoft.graph.windowsUpdates.deploymentAudience":
                from .windows_updates import deployment_audience

                return deployment_audience.DeploymentAudience()
            if mapping_value == "#microsoft.graph.windowsUpdates.driverUpdateCatalogEntry":
                from .windows_updates import driver_update_catalog_entry

                return driver_update_catalog_entry.DriverUpdateCatalogEntry()
            if mapping_value == "#microsoft.graph.windowsUpdates.featureUpdateCatalogEntry":
                from .windows_updates import feature_update_catalog_entry

                return feature_update_catalog_entry.FeatureUpdateCatalogEntry()
            if mapping_value == "#microsoft.graph.windowsUpdates.operationalInsightsConnection":
                from .windows_updates import operational_insights_connection

                return operational_insights_connection.OperationalInsightsConnection()
            if mapping_value == "#microsoft.graph.windowsUpdates.qualityUpdateCatalogEntry":
                from .windows_updates import quality_update_catalog_entry

                return quality_update_catalog_entry.QualityUpdateCatalogEntry()
            if mapping_value == "#microsoft.graph.windowsUpdates.resourceConnection":
                from .windows_updates import resource_connection

                return resource_connection.ResourceConnection()
            if mapping_value == "#microsoft.graph.windowsUpdates.softwareUpdateCatalogEntry":
                from .windows_updates import software_update_catalog_entry

                return software_update_catalog_entry.SoftwareUpdateCatalogEntry()
            if mapping_value == "#microsoft.graph.windowsUpdates.updatableAsset":
                from .windows_updates import updatable_asset

                return updatable_asset.UpdatableAsset()
            if mapping_value == "#microsoft.graph.windowsUpdates.updatableAssetGroup":
                from .windows_updates import updatable_asset_group

                return updatable_asset_group.UpdatableAssetGroup()
            if mapping_value == "#microsoft.graph.windowsUpdates.updatePolicy":
                from .windows_updates import update_policy

                return update_policy.UpdatePolicy()
            if mapping_value == "#microsoft.graph.windowsUpdateState":
                from . import windows_update_state

                return windows_update_state.WindowsUpdateState()
            if mapping_value == "#microsoft.graph.windowsVpnConfiguration":
                from . import windows_vpn_configuration

                return windows_vpn_configuration.WindowsVpnConfiguration()
            if mapping_value == "#microsoft.graph.windowsWebApp":
                from . import windows_web_app

                return windows_web_app.WindowsWebApp()
            if mapping_value == "#microsoft.graph.windowsWifiConfiguration":
                from . import windows_wifi_configuration

                return windows_wifi_configuration.WindowsWifiConfiguration()
            if mapping_value == "#microsoft.graph.windowsWifiEnterpriseEAPConfiguration":
                from . import windows_wifi_enterprise_e_a_p_configuration

                return windows_wifi_enterprise_e_a_p_configuration.WindowsWifiEnterpriseEAPConfiguration()
            if mapping_value == "#microsoft.graph.windowsWiredNetworkConfiguration":
                from . import windows_wired_network_configuration

                return windows_wired_network_configuration.WindowsWiredNetworkConfiguration()
            if mapping_value == "#microsoft.graph.winGetApp":
                from . import win_get_app

                return win_get_app.WinGetApp()
            if mapping_value == "#microsoft.graph.workbook":
                from . import workbook

                return workbook.Workbook()
            if mapping_value == "#microsoft.graph.workbookApplication":
                from . import workbook_application

                return workbook_application.WorkbookApplication()
            if mapping_value == "#microsoft.graph.workbookChart":
                from . import workbook_chart

                return workbook_chart.WorkbookChart()
            if mapping_value == "#microsoft.graph.workbookChartAreaFormat":
                from . import workbook_chart_area_format

                return workbook_chart_area_format.WorkbookChartAreaFormat()
            if mapping_value == "#microsoft.graph.workbookChartAxes":
                from . import workbook_chart_axes

                return workbook_chart_axes.WorkbookChartAxes()
            if mapping_value == "#microsoft.graph.workbookChartAxis":
                from . import workbook_chart_axis

                return workbook_chart_axis.WorkbookChartAxis()
            if mapping_value == "#microsoft.graph.workbookChartAxisFormat":
                from . import workbook_chart_axis_format

                return workbook_chart_axis_format.WorkbookChartAxisFormat()
            if mapping_value == "#microsoft.graph.workbookChartAxisTitle":
                from . import workbook_chart_axis_title

                return workbook_chart_axis_title.WorkbookChartAxisTitle()
            if mapping_value == "#microsoft.graph.workbookChartAxisTitleFormat":
                from . import workbook_chart_axis_title_format

                return workbook_chart_axis_title_format.WorkbookChartAxisTitleFormat()
            if mapping_value == "#microsoft.graph.workbookChartDataLabelFormat":
                from . import workbook_chart_data_label_format

                return workbook_chart_data_label_format.WorkbookChartDataLabelFormat()
            if mapping_value == "#microsoft.graph.workbookChartDataLabels":
                from . import workbook_chart_data_labels

                return workbook_chart_data_labels.WorkbookChartDataLabels()
            if mapping_value == "#microsoft.graph.workbookChartFill":
                from . import workbook_chart_fill

                return workbook_chart_fill.WorkbookChartFill()
            if mapping_value == "#microsoft.graph.workbookChartFont":
                from . import workbook_chart_font

                return workbook_chart_font.WorkbookChartFont()
            if mapping_value == "#microsoft.graph.workbookChartGridlines":
                from . import workbook_chart_gridlines

                return workbook_chart_gridlines.WorkbookChartGridlines()
            if mapping_value == "#microsoft.graph.workbookChartGridlinesFormat":
                from . import workbook_chart_gridlines_format

                return workbook_chart_gridlines_format.WorkbookChartGridlinesFormat()
            if mapping_value == "#microsoft.graph.workbookChartLegend":
                from . import workbook_chart_legend

                return workbook_chart_legend.WorkbookChartLegend()
            if mapping_value == "#microsoft.graph.workbookChartLegendFormat":
                from . import workbook_chart_legend_format

                return workbook_chart_legend_format.WorkbookChartLegendFormat()
            if mapping_value == "#microsoft.graph.workbookChartLineFormat":
                from . import workbook_chart_line_format

                return workbook_chart_line_format.WorkbookChartLineFormat()
            if mapping_value == "#microsoft.graph.workbookChartPoint":
                from . import workbook_chart_point

                return workbook_chart_point.WorkbookChartPoint()
            if mapping_value == "#microsoft.graph.workbookChartPointFormat":
                from . import workbook_chart_point_format

                return workbook_chart_point_format.WorkbookChartPointFormat()
            if mapping_value == "#microsoft.graph.workbookChartSeries":
                from . import workbook_chart_series

                return workbook_chart_series.WorkbookChartSeries()
            if mapping_value == "#microsoft.graph.workbookChartSeriesFormat":
                from . import workbook_chart_series_format

                return workbook_chart_series_format.WorkbookChartSeriesFormat()
            if mapping_value == "#microsoft.graph.workbookChartTitle":
                from . import workbook_chart_title

                return workbook_chart_title.WorkbookChartTitle()
            if mapping_value == "#microsoft.graph.workbookChartTitleFormat":
                from . import workbook_chart_title_format

                return workbook_chart_title_format.WorkbookChartTitleFormat()
            if mapping_value == "#microsoft.graph.workbookComment":
                from . import workbook_comment

                return workbook_comment.WorkbookComment()
            if mapping_value == "#microsoft.graph.workbookCommentReply":
                from . import workbook_comment_reply

                return workbook_comment_reply.WorkbookCommentReply()
            if mapping_value == "#microsoft.graph.workbookFilter":
                from . import workbook_filter

                return workbook_filter.WorkbookFilter()
            if mapping_value == "#microsoft.graph.workbookFormatProtection":
                from . import workbook_format_protection

                return workbook_format_protection.WorkbookFormatProtection()
            if mapping_value == "#microsoft.graph.workbookFunctionResult":
                from . import workbook_function_result

                return workbook_function_result.WorkbookFunctionResult()
            if mapping_value == "#microsoft.graph.workbookFunctions":
                from . import workbook_functions

                return workbook_functions.WorkbookFunctions()
            if mapping_value == "#microsoft.graph.workbookNamedItem":
                from . import workbook_named_item

                return workbook_named_item.WorkbookNamedItem()
            if mapping_value == "#microsoft.graph.workbookOperation":
                from . import workbook_operation

                return workbook_operation.WorkbookOperation()
            if mapping_value == "#microsoft.graph.workbookPivotTable":
                from . import workbook_pivot_table

                return workbook_pivot_table.WorkbookPivotTable()
            if mapping_value == "#microsoft.graph.workbookRange":
                from . import workbook_range

                return workbook_range.WorkbookRange()
            if mapping_value == "#microsoft.graph.workbookRangeBorder":
                from . import workbook_range_border

                return workbook_range_border.WorkbookRangeBorder()
            if mapping_value == "#microsoft.graph.workbookRangeFill":
                from . import workbook_range_fill

                return workbook_range_fill.WorkbookRangeFill()
            if mapping_value == "#microsoft.graph.workbookRangeFont":
                from . import workbook_range_font

                return workbook_range_font.WorkbookRangeFont()
            if mapping_value == "#microsoft.graph.workbookRangeFormat":
                from . import workbook_range_format

                return workbook_range_format.WorkbookRangeFormat()
            if mapping_value == "#microsoft.graph.workbookRangeSort":
                from . import workbook_range_sort

                return workbook_range_sort.WorkbookRangeSort()
            if mapping_value == "#microsoft.graph.workbookRangeView":
                from . import workbook_range_view

                return workbook_range_view.WorkbookRangeView()
            if mapping_value == "#microsoft.graph.workbookTable":
                from . import workbook_table

                return workbook_table.WorkbookTable()
            if mapping_value == "#microsoft.graph.workbookTableColumn":
                from . import workbook_table_column

                return workbook_table_column.WorkbookTableColumn()
            if mapping_value == "#microsoft.graph.workbookTableRow":
                from . import workbook_table_row

                return workbook_table_row.WorkbookTableRow()
            if mapping_value == "#microsoft.graph.workbookTableSort":
                from . import workbook_table_sort

                return workbook_table_sort.WorkbookTableSort()
            if mapping_value == "#microsoft.graph.workbookWorksheet":
                from . import workbook_worksheet

                return workbook_worksheet.WorkbookWorksheet()
            if mapping_value == "#microsoft.graph.workbookWorksheetProtection":
                from . import workbook_worksheet_protection

                return workbook_worksheet_protection.WorkbookWorksheetProtection()
            if mapping_value == "#microsoft.graph.workforceIntegration":
                from . import workforce_integration

                return workforce_integration.WorkforceIntegration()
            if mapping_value == "#microsoft.graph.workPosition":
                from . import work_position

                return work_position.WorkPosition()
            if mapping_value == "#microsoft.graph.workspace":
                from . import workspace

                return workspace.Workspace()
            if mapping_value == "#microsoft.graph.x509CertificateAuthenticationMethodConfiguration":
                from . import x509_certificate_authentication_method_configuration

                return x509_certificate_authentication_method_configuration.X509CertificateAuthenticationMethodConfiguration()
            if mapping_value == "#microsoft.graph.zebraFotaArtifact":
                from . import zebra_fota_artifact

                return zebra_fota_artifact.ZebraFotaArtifact()
            if mapping_value == "#microsoft.graph.zebraFotaConnector":
                from . import zebra_fota_connector

                return zebra_fota_connector.ZebraFotaConnector()
            if mapping_value == "#microsoft.graph.zebraFotaDeployment":
                from . import zebra_fota_deployment

                return zebra_fota_deployment.ZebraFotaDeployment()
        return Entity()
    
    def get_field_deserializers(self,) -> Dict[str, Callable[[ParseNode], None]]:
        """
        The deserialization information for the current model
        Returns: Dict[str, Callable[[ParseNode], None]]
        """
        from . import aad_user_conversation_member, access_package, access_package_assignment, access_package_assignment_policy, access_package_assignment_request, access_package_assignment_request_workflow_extension, access_package_assignment_resource_role, access_package_assignment_workflow_extension, access_package_catalog, access_package_resource, access_package_resource_environment, access_package_resource_request, access_package_resource_role, access_package_resource_role_scope, access_package_resource_scope, access_package_subject, access_review, access_review_decision, access_review_history_definition, access_review_history_instance, access_review_instance, access_review_instance_decision_item, access_review_policy, access_review_reviewer, access_review_schedule_definition, access_review_set, access_review_stage, account, active_directory_windows_autopilot_deployment_profile, activity_based_timeout_policy, activity_history_item, activity_statistics, add_large_gallery_view_operation, administrative_unit, admin_consent_request_policy, admin_report_settings, admin_windows, admin_windows_updates, advanced_threat_protection_onboarding_device_setting_state, advanced_threat_protection_onboarding_state_summary, aged_accounts_payable, aged_accounts_receivable, agreement, agreement_acceptance, agreement_file, agreement_file_localization, agreement_file_properties, agreement_file_version, alert, allowed_data_location, allowed_value, android_certificate_profile_base, android_compliance_policy, android_custom_configuration, android_device_compliance_local_action_base, android_device_compliance_local_action_lock_device, android_device_compliance_local_action_lock_device_with_passcode, android_device_owner_certificate_profile_base, android_device_owner_compliance_policy, android_device_owner_derived_credential_authentication_configuration, android_device_owner_enrollment_profile, android_device_owner_enterprise_wi_fi_configuration, android_device_owner_general_device_configuration, android_device_owner_imported_p_f_x_certificate_profile, android_device_owner_pkcs_certificate_profile, android_device_owner_scep_certificate_profile, android_device_owner_trusted_root_certificate, android_device_owner_vpn_configuration, android_device_owner_wi_fi_configuration, android_eas_email_profile_configuration, android_enterprise_wi_fi_configuration, android_for_work_app, android_for_work_app_configuration_schema, android_for_work_certificate_profile_base, android_for_work_compliance_policy, android_for_work_custom_configuration, android_for_work_eas_email_profile_base, android_for_work_enrollment_profile, android_for_work_enterprise_wi_fi_configuration, android_for_work_general_device_configuration, android_for_work_gmail_eas_configuration, android_for_work_imported_p_f_x_certificate_profile, android_for_work_mobile_app_configuration, android_for_work_nine_work_eas_configuration, android_for_work_pkcs_certificate_profile, android_for_work_scep_certificate_profile, android_for_work_settings, android_for_work_trusted_root_certificate, android_for_work_vpn_configuration, android_for_work_wi_fi_configuration, android_general_device_configuration, android_imported_p_f_x_certificate_profile, android_lob_app, android_managed_app_protection, android_managed_app_registration, android_managed_store_account_enterprise_settings, android_managed_store_app, android_managed_store_app_configuration, android_managed_store_app_configuration_schema, android_managed_store_web_app, android_oma_cp_configuration, android_pkcs_certificate_profile, android_scep_certificate_profile, android_store_app, android_trusted_root_certificate, android_vpn_configuration, android_wi_fi_configuration, android_work_profile_certificate_profile_base, android_work_profile_compliance_policy, android_work_profile_custom_configuration, android_work_profile_eas_email_profile_base, android_work_profile_enterprise_wi_fi_configuration, android_work_profile_general_device_configuration, android_work_profile_gmail_eas_configuration, android_work_profile_nine_work_eas_configuration, android_work_profile_pkcs_certificate_profile, android_work_profile_scep_certificate_profile, android_work_profile_trusted_root_certificate, android_work_profile_vpn_configuration, android_work_profile_wi_fi_configuration, anonymous_guest_conversation_member, aosp_device_owner_certificate_profile_base, aosp_device_owner_compliance_policy, aosp_device_owner_device_configuration, aosp_device_owner_enterprise_wi_fi_configuration, aosp_device_owner_pkcs_certificate_profile, aosp_device_owner_scep_certificate_profile, aosp_device_owner_trusted_root_certificate, aosp_device_owner_wi_fi_configuration, apple_device_features_configuration_base, apple_enrollment_profile_assignment, apple_expedited_checkin_configuration_base, apple_managed_identity_provider, apple_push_notification_certificate, apple_user_initiated_enrollment_profile, apple_vpn_configuration, apple_vpp_token_troubleshooting_event, application, application_segment, application_sign_in_detailed_summary, application_sign_in_summary, application_template, approval, approval_step, approval_workflow_provider, app_consent_approval_route, app_consent_request, app_log_collection_request, app_management_policy, app_role_assignment, app_scope, app_vulnerability_managed_device, app_vulnerability_mobile_app, app_vulnerability_task, assignment_filter_evaluation_status_details, associated_team_info, attachment, attachment_base, attachment_session, attack_simulation_operation, attack_simulation_root, attendance_record, attribute_mapping_function_schema, attribute_set, audio_routing_group, audit_event, authentication, authentication_combination_configuration, authentication_context_class_reference, authentication_events_policy, authentication_event_listener, authentication_flows_policy, authentication_listener, authentication_method, authentication_methods_policy, authentication_methods_root, authentication_method_configuration, authentication_method_mode_detail, authentication_method_target, authentication_strength_policy, authentication_strength_root, authored_note, authorization_policy, azure_a_d_windows_autopilot_deployment_profile, azure_communication_services_user_conversation_member, b2c_authentication_methods_policy, b2c_identity_user_flow, b2x_identity_user_flow, base_item, base_item_version, bitlocker, bitlocker_recovery_key, booking_appointment, booking_business, booking_currency, booking_customer, booking_custom_question, booking_named_entity, booking_person, booking_service, booking_staff_member, browser_shared_cookie, browser_site, browser_site_list, built_in_identity_provider, business_flow, business_flow_template, business_scenario, business_scenario_planner, business_scenario_plan_reference, business_scenario_task, calendar, calendar_group, calendar_permission, calendar_sharing_message, call, call_activity_statistics, call_transcript, cancel_media_processing_operation, canvas_layout, cart_to_class_association, certificate_based_auth_configuration, certificate_connector_details, change_tracked_entity, channel, chat, chat_activity_statistics, chat_message, chat_message_hosted_content, chat_message_info, checklist_item, chrome_o_s_onboarding_settings, claims_mapping_policy, classification_job_response, cloud_app_security_profile, cloud_communications, cloud_pc_audit_event, cloud_pc_cross_cloud_government_organization_mapping, cloud_pc_device_image, cloud_pc_export_job, cloud_pc_external_partner_setting, cloud_pc_gallery_image, cloud_pc_on_premises_connection, cloud_pc_organization_settings, cloud_pc_provisioning_policy, cloud_pc_provisioning_policy_assignment, cloud_pc_reports, cloud_pc_service_plan, cloud_pc_shared_use_service_plan, cloud_pc_snapshot, cloud_pc_supported_region, cloud_pc_user_setting, cloud_pc_user_setting_assignment, cloud_p_c, cloud_p_c_connectivity_issue, column_definition, column_link, comanagement_eligible_device, command, comms_operation, company, company_information, compliance_management_partner, conditional_access_policy, conditional_access_root, conditional_access_template, config_manager_collection, connected_organization, connection_operation, connector, connector_group, contact, contact_folder, contact_merge_suggestions, content_sharing_session, content_type, continuous_access_evaluation_policy, contract, conversation, conversation_member, conversation_thread, cors_configuration_v2, country_named_location, country_region, credential_usage_summary, credential_user_registration_count, credential_user_registration_details, cross_tenant_access_policy, cross_tenant_access_policy_configuration_default, currency, customer, customer_payment, customer_payment_journal, custom_access_package_workflow_extension, custom_authentication_extension, custom_callout_extension, custom_extension_handler, custom_extension_stage_setting, custom_security_attribute_definition, data_classification_service, data_loss_prevention_policy, data_policy_operation, data_sharing_consent, default_device_compliance_policy, default_managed_app_protection, default_user_role_override, delegated_admin_access_assignment, delegated_admin_customer, delegated_admin_relationship, delegated_admin_relationship_operation, delegated_admin_relationship_request, delegated_admin_service_management_detail, delegated_permission_classification, deleted_item_container, deleted_team, dep_enrollment_base_profile, dep_enrollment_profile, dep_i_o_s_enrollment_profile, dep_mac_o_s_enrollment_profile, dep_onboarding_setting, detected_app, device, device_and_app_management_assignment_filter, device_and_app_management_role_assignment, device_and_app_management_role_definition, device_app_management, device_app_management_task, device_category, device_comanagement_authority_configuration, device_compliance_action_item, device_compliance_device_overview, device_compliance_device_status, device_compliance_policy, device_compliance_policy_assignment, device_compliance_policy_device_state_summary, device_compliance_policy_group_assignment, device_compliance_policy_policy_set_item, device_compliance_policy_setting_state_summary, device_compliance_policy_state, device_compliance_scheduled_action_for_rule, device_compliance_script, device_compliance_script_device_state, device_compliance_script_run_summary, device_compliance_setting_state, device_compliance_user_overview, device_compliance_user_status, device_configuration, device_configuration_assignment, device_configuration_conflict_summary, device_configuration_device_overview, device_configuration_device_state_summary, device_configuration_device_status, device_configuration_group_assignment, device_configuration_policy_set_item, device_configuration_state, device_configuration_user_overview, device_configuration_user_state_summary, device_configuration_user_status, device_custom_attribute_shell_script, device_enrollment_configuration, device_enrollment_limit_configuration, device_enrollment_notification_configuration, device_enrollment_platform_restrictions_configuration, device_enrollment_platform_restriction_configuration, device_enrollment_windows_hello_for_business_configuration, device_health_script, device_health_script_assignment, device_health_script_device_state, device_health_script_run_summary, device_install_state, device_log_collection_response, device_management_abstract_complex_setting_definition, device_management_abstract_complex_setting_instance, device_management_autopilot_event, device_management_autopilot_policy_status_detail, device_management_boolean_setting_instance, device_management_cached_report_configuration, device_management_collection_setting_definition, device_management_collection_setting_instance, device_management_complex_setting_definition, device_management_complex_setting_instance, device_management_compliance_action_item, device_management_compliance_policy, device_management_compliance_scheduled_action_for_rule, device_management_configuration_category, device_management_configuration_choice_setting_collection_definition, device_management_configuration_choice_setting_definition, device_management_configuration_policy, device_management_configuration_policy_assignment, device_management_configuration_policy_policy_set_item, device_management_configuration_policy_template, device_management_configuration_redirect_setting_definition, device_management_configuration_setting, device_management_configuration_setting_definition, device_management_configuration_setting_group_collection_definition, device_management_configuration_setting_group_definition, device_management_configuration_setting_template, device_management_configuration_simple_setting_collection_definition, device_management_configuration_simple_setting_definition, device_management_derived_credential_settings, device_management_domain_join_connector, device_management_exchange_connector, device_management_exchange_on_premises_policy, device_management_export_job, device_management_integer_setting_instance, device_management_intent, device_management_intent_assignment, device_management_intent_device_setting_state_summary, device_management_intent_device_state, device_management_intent_device_state_summary, device_management_intent_setting_category, device_management_intent_user_state, device_management_intent_user_state_summary, device_management_partner, device_management_reports, device_management_resource_access_profile_assignment, device_management_resource_access_profile_base, device_management_reusable_policy_setting, device_management_script, device_management_script_assignment, device_management_script_device_state, device_management_script_group_assignment, device_management_script_policy_set_item, device_management_script_run_summary, device_management_script_user_state, device_management_setting_category, device_management_setting_definition, device_management_setting_instance, device_management_string_setting_instance, device_management_template, device_management_template_setting_category, device_management_troubleshooting_event, device_registration_policy, device_setup_configuration, device_shell_script, dimension, dimension_value, directory, directory_audit, directory_definition, directory_object, directory_object_partner_reference, directory_role, directory_role_access_review_policy, directory_role_template, directory_setting, directory_setting_template, dlp_evaluate_policies_job_response, document, document_comment, document_comment_reply, document_set_version, domain, domain_dns_cname_record, domain_dns_mx_record, domain_dns_record, domain_dns_srv_record, domain_dns_txt_record, domain_dns_unavailable_record, domain_security_profile, drive, drive_item, drive_item_version, eas_email_profile_configuration_base, edge, edition_upgrade_configuration, educational_activity, education_assignment, education_assignment_defaults, education_assignment_resource, education_assignment_settings, education_category, education_class, education_feedback_outcome, education_feedback_resource_outcome, education_organization, education_outcome, education_points_outcome, education_rubric, education_rubric_outcome, education_school, education_submission, education_submission_resource, education_synchronization_error, education_synchronization_profile, education_synchronization_profile_status, education_user, email_activity_statistics, email_authentication_method, email_authentication_method_configuration, email_file_assessment_request, embedded_s_i_m_activation_code_pool, embedded_s_i_m_activation_code_pool_assignment, embedded_s_i_m_device_state, employee, endpoint, enrollment_configuration_assignment, enrollment_profile, enrollment_restrictions_configuration_policy_set_item, enrollment_troubleshooting_event, enterprise_code_signing_certificate, entitlement_management, entitlement_management_settings, evaluate_label_job_response, event, event_message, event_message_request, event_message_response, exact_match_data_store, exact_match_data_store_base, exact_match_job_base, exact_match_lookup_job, exact_match_session, exact_match_session_base, exact_match_upload_agent, extension, extension_property, external, external_connection, external_domain_name, external_group, external_identities_policy, external_item, external_meeting_registrant, external_meeting_registration, e_book_install_summary, feature_rollout_policy, federated_identity_credential, fido2_authentication_method, fido2_authentication_method_configuration, fido2_combination_configuration, field_value_set, file_assessment_request, file_attachment, file_classification_request, file_security_profile, filter_operator_schema, focus_activity_statistics, general_ledger_entry, governance_insight, governance_policy_template, governance_resource, governance_role_assignment, governance_role_assignment_request, governance_role_definition, governance_role_setting, governance_subject, group, group_lifecycle_policy, group_policy_category, group_policy_configuration, group_policy_configuration_assignment, group_policy_definition, group_policy_definition_file, group_policy_definition_value, group_policy_migration_report, group_policy_object_file, group_policy_operation, group_policy_presentation, group_policy_presentation_check_box, group_policy_presentation_combo_box, group_policy_presentation_decimal_text_box, group_policy_presentation_dropdown_list, group_policy_presentation_list_box, group_policy_presentation_long_decimal_text_box, group_policy_presentation_multi_text_box, group_policy_presentation_text, group_policy_presentation_text_box, group_policy_presentation_value, group_policy_presentation_value_boolean, group_policy_presentation_value_decimal, group_policy_presentation_value_list, group_policy_presentation_value_long_decimal, group_policy_presentation_value_multi_text, group_policy_presentation_value_text, group_policy_setting_mapping, group_policy_uploaded_definition_file, group_policy_uploaded_presentation, home_realm_discovery_policy, horizontal_section, horizontal_section_column, host_security_profile, identity_api_connector, identity_built_in_user_flow_attribute, identity_custom_user_flow_attribute, identity_provider, identity_provider_base, identity_security_defaults_enforcement_policy, identity_user_flow, identity_user_flow_attribute, identity_user_flow_attribute_assignment, impacted_resource, imported_apple_device_identity, imported_apple_device_identity_result, imported_device_identity, imported_device_identity_result, imported_windows_autopilot_device_identity, imported_windows_autopilot_device_identity_upload, inference_classification, inference_classification_override, information_protection, information_protection_label, information_protection_policy, insights_settings, internal_domain_federation, internet_explorer_mode, intune_branding_profile, intune_branding_profile_assignment, invalid_license_alert_configuration, invalid_license_alert_incident, invitation, invite_participants_operation, invoke_user_flow_listener, iosik_ev2_vpn_configuration, iosi_pad_o_s_web_clip, ios_certificate_profile, ios_certificate_profile_base, ios_compliance_policy, ios_custom_configuration, ios_derived_credential_authentication_configuration, ios_device_features_configuration, ios_eas_email_profile_configuration, ios_education_device_configuration, ios_edu_device_configuration, ios_enterprise_wi_fi_configuration, ios_expedited_checkin_configuration, ios_general_device_configuration, ios_imported_p_f_x_certificate_profile, ios_lob_app, ios_lob_app_provisioning_configuration, ios_lob_app_provisioning_configuration_assignment, ios_lob_app_provisioning_configuration_policy_set_item, ios_managed_app_protection, ios_managed_app_registration, ios_mobile_app_configuration, ios_pkcs_certificate_profile, ios_scep_certificate_profile, ios_store_app, ios_trusted_root_certificate, ios_update_configuration, ios_update_device_status, ios_vpn_configuration, ios_vpp_app, ios_vpp_app_assigned_device_license, ios_vpp_app_assigned_license, ios_vpp_app_assigned_user_license, ios_vpp_e_book, ios_vpp_e_book_assignment, ios_wi_fi_configuration, ip_application_segment, ip_named_location, ip_security_profile, item, item_activity, item_activity_o_l_d, item_activity_stat, item_address, item_analytics, item_attachment, item_category, item_email, item_facet, item_insights, item_patent, item_phone, item_publication, job_response_base, journal, journal_line, language_proficiency, learning_content, learning_provider, license_details, linked_resource, list, list_item, list_item_version, localized_notification_message, long_running_operation, lookup_result_row, mac_os_vpp_app, mac_os_vpp_app_assigned_license, mac_o_s_certificate_profile_base, mac_o_s_compliance_policy, mac_o_s_custom_app_configuration, mac_o_s_custom_configuration, mac_o_s_device_features_configuration, mac_o_s_dmg_app, mac_o_s_endpoint_protection_configuration, mac_o_s_enterprise_wi_fi_configuration, mac_o_s_extensions_configuration, mac_o_s_general_device_configuration, mac_o_s_imported_p_f_x_certificate_profile, mac_o_s_lob_app, mac_o_s_mdatp_app, mac_o_s_microsoft_defender_app, mac_o_s_microsoft_edge_app, mac_o_s_office_suite_app, mac_o_s_pkcs_certificate_profile, mac_o_s_scep_certificate_profile, mac_o_s_software_update_account_summary, mac_o_s_software_update_category_summary, mac_o_s_software_update_configuration, mac_o_s_software_update_state_summary, mac_o_s_trusted_root_certificate, mac_o_s_vpn_configuration, mac_o_s_wired_network_configuration, mac_o_s_wi_fi_configuration, mail_assessment_request, mail_folder, mail_search_folder, malware_state_for_windows_device, managed_all_device_certificate_state, managed_android_lob_app, managed_android_store_app, managed_app, managed_app_configuration, managed_app_operation, managed_app_policy, managed_app_policy_deployment_summary, managed_app_protection, managed_app_protection_policy_set_item, managed_app_registration, managed_app_status, managed_app_status_raw, managed_device, managed_device_certificate_state, managed_device_encryption_state, managed_device_mobile_app_configuration, managed_device_mobile_app_configuration_assignment, managed_device_mobile_app_configuration_device_status, managed_device_mobile_app_configuration_device_summary, managed_device_mobile_app_configuration_policy_set_item, managed_device_mobile_app_configuration_state, managed_device_mobile_app_configuration_user_status, managed_device_mobile_app_configuration_user_summary, managed_device_overview, managed_e_book, managed_e_book_assignment, managed_e_book_category, managed_i_o_s_lob_app, managed_i_o_s_store_app, managed_mobile_app, managed_mobile_lob_app, mdm_windows_information_protection_policy, mdm_windows_information_protection_policy_policy_set_item, meeting_activity_statistics, meeting_attendance_report, meeting_registrant, meeting_registrant_base, meeting_registration, meeting_registration_base, meeting_registration_question, membership_outlier_insight, mention, message, message_event, message_recipient, message_rule, message_trace, microsoft_account_user_conversation_member, microsoft_application_data_access_settings, microsoft_authenticator_authentication_method, microsoft_authenticator_authentication_method_configuration, microsoft_authenticator_authentication_method_target, microsoft_store_for_business_app, microsoft_store_for_business_contained_app, microsoft_tunnel_configuration, microsoft_tunnel_health_threshold, microsoft_tunnel_server, microsoft_tunnel_server_log_collection_response, microsoft_tunnel_site, mobile_app, mobile_app_assignment, mobile_app_category, mobile_app_content, mobile_app_content_file, mobile_app_dependency, mobile_app_install_status, mobile_app_install_summary, mobile_app_intent_and_state, mobile_app_policy_set_item, mobile_app_provisioning_config_group_assignment, mobile_app_relationship, mobile_app_supersedence, mobile_app_troubleshooting_event, mobile_contained_app, mobile_lob_app, mobile_threat_defense_connector, mobility_management_policy, multi_value_legacy_extended_property, mute_participants_operation, mute_participant_operation, named_location, ndes_connector, note, notebook, notification, notification_message_template, no_mfa_on_role_activation_alert_configuration, no_mfa_on_role_activation_alert_incident, oem_warranty_information_onboarding, offer_shift_request, office365_active_user_counts, office365_active_user_detail, office365_groups_activity_counts, office365_groups_activity_detail, office365_groups_activity_file_counts, office365_groups_activity_group_counts, office365_groups_activity_storage, office365_services_user_counts, office_client_configuration, office_client_configuration_assignment, office_graph_insights, office_suite_app, onenote, onenote_entity_base_model, onenote_entity_hierarchy_model, onenote_entity_schema_object_model, onenote_operation, onenote_page, onenote_resource, onenote_section, online_meeting, on_premises_agent, on_premises_agent_group, on_premises_conditional_access_settings, on_premises_directory_synchronization, on_premises_publishing_profile, on_token_issuance_start_custom_extension, on_token_issuance_start_listener, open_id_connect_identity_provider, open_id_connect_provider, open_shift, open_shift_change_request, open_type_extension, operation, organization, organizational_branding, organizational_branding_localization, organizational_branding_properties, organization_settings, org_contact, outlook_category, outlook_item, outlook_task, outlook_task_folder, outlook_task_group, outlook_user, o_auth2_permission_grant, participant, participant_joining_notification, participant_left_notification, passwordless_microsoft_authenticator_authentication_method, password_authentication_method, payload, payload_compatible_assignment_filter, payload_response, payment_method, payment_term, permission, permission_grant_condition_set, permission_grant_policy, person, person_annotation, person_annual_event, person_award, person_certification, person_extension, person_interest, person_name, person_responsibility, person_website, phone_authentication_method, picture, pinned_chat_message_info, place, planner, planner_assigned_to_task_board_task_format, planner_bucket, planner_bucket_task_board_task_format, planner_delta, planner_group, planner_plan, planner_plan_configuration, planner_plan_configuration_localization, planner_plan_details, planner_progress_task_board_task_format, planner_roster, planner_roster_member, planner_task, planner_task_configuration, planner_task_details, planner_user, play_prompt_operation, policy_base, policy_set, policy_set_assignment, policy_set_item, post, presence, presentation, printer, printer_base, printer_create_operation, printer_share, print_connector, print_document, print_job, print_operation, print_service, print_service_endpoint, print_task, print_task_definition, print_task_trigger, print_usage, print_usage_by_printer, print_usage_by_user, privileged_access, privileged_access_group, privileged_access_group_assignment_schedule, privileged_access_group_assignment_schedule_instance, privileged_access_group_assignment_schedule_request, privileged_access_group_eligibility_schedule, privileged_access_group_eligibility_schedule_instance, privileged_access_group_eligibility_schedule_request, privileged_access_root, privileged_access_schedule, privileged_access_schedule_instance, privileged_access_schedule_request, privileged_approval, privileged_operation_event, privileged_role, privileged_role_assignment, privileged_role_assignment_request, privileged_role_settings, privileged_role_summary, privileged_signup_status, privilege_management_elevation, profile, profile_card_property, profile_photo, program, program_control, program_control_type, project_participation, pronouns_settings, provider_tenant_setting, provisioning_object_summary, published_resource, purchase_invoice, purchase_invoice_line, rbac_application, rbac_application_multiple, recommendation, recommendation_base, record_operation, redundant_assignment_alert_configuration, redundant_assignment_alert_incident, reference_attachment, regional_and_language_settings, relying_party_detailed_summary, remote_action_audit, remote_assistance_partner, remote_assistance_settings, report_root, request, resource_operation, resource_specific_permission_grant, restricted_apps_violation, rich_long_running_operation, risky_service_principal, risky_service_principal_history_item, risky_user, risky_user_history_item, risk_detection, roles_assigned_outside_privileged_identity_management_alert_configuration, roles_assigned_outside_privileged_identity_management_alert_incident, role_assignment, role_definition, role_management_alert, role_scope_tag, role_scope_tag_auto_assignment, room, room_list, sales_credit_memo, sales_credit_memo_line, sales_invoice, sales_invoice_line, sales_order, sales_order_line, sales_quote, sales_quote_line, saml_or_ws_fed_external_domain_federation, saml_or_ws_fed_provider, schedule, schedule_change_request, scheduling_group, schema, schema_extension, scoped_role_membership, search_entity, section_group, secure_score, secure_score_control_profile, security_action, security_baseline_category_state_summary, security_baseline_device_state, security_baseline_setting_state, security_baseline_state, security_baseline_state_summary, security_baseline_template, security_configuration_task, security_reports_root, sensitive_type, sensitivity_label, sensitivity_policy_settings, sequential_activation_renewals_alert_configuration, sequential_activation_renewals_alert_incident, service_announcement, service_announcement_attachment, service_announcement_base, service_health, service_health_issue, service_now_connection, service_principal, service_principal_creation_condition_set, service_principal_creation_policy, service_principal_risk_detection, service_update_message, setting_state_device_summary, shared_drive_item, shared_email_domain, shared_email_domain_invitation, shared_insight, shared_p_c_configuration, shared_with_channel_team_info, shift, shift_preferences, shipment_method, sign_in, simulation, simulation_automation, simulation_automation_run, single_value_legacy_extended_property, site, site_page, skill_proficiency, skype_for_business_user_conversation_member, skype_user_conversation_member, sms_authentication_method_configuration, sms_authentication_method_target, social_identity_provider, software_oath_authentication_method, software_oath_authentication_method_configuration, software_update_status_summary, stale_sign_in_alert_configuration, stale_sign_in_alert_incident, standard_web_part, start_hold_music_operation, stop_hold_music_operation, strong_authentication_detail, strong_authentication_phone_app_detail, sts_policy, subject_rights_request, subscribed_sku, subscribe_to_tone_operation, subscription, swap_shifts_change_request, symantec_code_signing_certificate, synchronization, synchronization_job, synchronization_schema, synchronization_template, targeted_managed_app_configuration, targeted_managed_app_configuration_policy_set_item, targeted_managed_app_policy_assignment, targeted_managed_app_protection, task_file_attachment, tax_area, tax_group, team, teams_app, teams_app_definition, teams_app_icon, teams_app_installation, teams_app_settings, teams_async_operation, teams_tab, teams_template, teamwork, teamwork_bot, teamwork_device, teamwork_device_activity, teamwork_device_configuration, teamwork_device_health, teamwork_device_operation, teamwork_hosted_content, teamwork_peripheral, teamwork_tag, teamwork_tag_member, team_info, team_template, team_template_definition, telecom_expense_management_partner, temporary_access_pass_authentication_method, temporary_access_pass_authentication_method_configuration, tenant_app_management_policy, tenant_attach_r_b_a_c, tenant_relationship_access_policy_base, tenant_setup_info, terms_and_conditions, terms_and_conditions_acceptance_status, terms_and_conditions_assignment, terms_and_conditions_group_assignment, terms_of_use_container, text_classification_request, text_web_part, threat_assessment_request, threat_assessment_result, thumbnail_set, time_card, time_off, time_off_reason, time_off_request, ti_indicator, todo, todo_task, todo_task_list, token_issuance_policy, token_lifetime_policy, too_many_global_admins_assigned_to_tenant_alert_configuration, too_many_global_admins_assigned_to_tenant_alert_incident, trending, trust_framework_key_set, trust_framework_policy, unified_rbac_application, unified_rbac_resource_action, unified_rbac_resource_namespace, unified_rbac_resource_scope, unified_role_assignment, unified_role_assignment_multiple, unified_role_assignment_schedule, unified_role_assignment_schedule_instance, unified_role_assignment_schedule_request, unified_role_definition, unified_role_eligibility_schedule, unified_role_eligibility_schedule_instance, unified_role_eligibility_schedule_request, unified_role_management_alert, unified_role_management_alert_configuration, unified_role_management_alert_definition, unified_role_management_alert_incident, unified_role_management_policy, unified_role_management_policy_approval_rule, unified_role_management_policy_assignment, unified_role_management_policy_authentication_context_rule, unified_role_management_policy_enablement_rule, unified_role_management_policy_expiration_rule, unified_role_management_policy_notification_rule, unified_role_management_policy_rule, unified_role_schedule_base, unified_role_schedule_instance_base, unit_of_measure, unmanaged_device_discovery_task, unmute_participant_operation, unsupported_device_configuration, unsupported_group_policy_extension, update_recording_status_operation, url_assessment_request, usage_right, used_insight, user, user_account_information, user_activity, user_analytics, user_app_install_status, user_configuration, user_consent_request, user_credential_usage_details, user_experience_analytics_anomaly, user_experience_analytics_anomaly_device, user_experience_analytics_app_health_application_performance, user_experience_analytics_app_health_app_performance_by_app_version, user_experience_analytics_app_health_app_performance_by_app_version_details, user_experience_analytics_app_health_app_performance_by_app_version_device_id, user_experience_analytics_app_health_app_performance_by_o_s_version, user_experience_analytics_app_health_device_model_performance, user_experience_analytics_app_health_device_performance, user_experience_analytics_app_health_device_performance_details, user_experience_analytics_app_health_o_s_version_performance, user_experience_analytics_baseline, user_experience_analytics_battery_health_app_impact, user_experience_analytics_battery_health_capacity_details, user_experience_analytics_battery_health_device_app_impact, user_experience_analytics_battery_health_device_performance, user_experience_analytics_battery_health_device_runtime_history, user_experience_analytics_battery_health_model_performance, user_experience_analytics_battery_health_os_performance, user_experience_analytics_battery_health_runtime_details, user_experience_analytics_category, user_experience_analytics_device_performance, user_experience_analytics_device_scope, user_experience_analytics_device_scores, user_experience_analytics_device_startup_history, user_experience_analytics_device_startup_process, user_experience_analytics_device_startup_process_performance, user_experience_analytics_device_timeline_event, user_experience_analytics_device_without_cloud_identity, user_experience_analytics_impacting_process, user_experience_analytics_metric, user_experience_analytics_metric_history, user_experience_analytics_model_scores, user_experience_analytics_not_autopilot_ready_device, user_experience_analytics_overview, user_experience_analytics_remote_connection, user_experience_analytics_resource_performance, user_experience_analytics_score_history, user_experience_analytics_work_from_anywhere_device, user_experience_analytics_work_from_anywhere_hardware_readiness_metric, user_experience_analytics_work_from_anywhere_metric, user_experience_analytics_work_from_anywhere_model_performance, user_flow_language_configuration, user_flow_language_page, user_insights_settings, user_install_state_summary, user_p_f_x_certificate, user_registration_details, user_scope_teams_app_installation, user_security_profile, user_settings, user_sign_in_insight, user_teamwork, vendor, vertical_section, virtual_appointment, virtual_endpoint, voice_authentication_method_configuration, voice_authentication_method_target, vpn_configuration, vpp_token, vulnerable_managed_device, web_account, web_app, web_application_segment, web_part, win32_lob_app, windows10_certificate_profile_base, windows10_compliance_policy, windows10_custom_configuration, windows10_device_firmware_configuration_interface, windows10_eas_email_profile_configuration, windows10_endpoint_protection_configuration, windows10_enrollment_completion_page_configuration, windows10_enrollment_completion_page_configuration_policy_set_item, windows10_enterprise_modern_app_management_configuration, windows10_general_configuration, windows10_imported_p_f_x_certificate_profile, windows10_mobile_compliance_policy, windows10_network_boundary_configuration, windows10_pkcs_certificate_profile, windows10_p_f_x_import_certificate_profile, windows10_secure_assessment_configuration, windows10_team_general_configuration, windows10_vpn_configuration, windows10_x_certificate_profile, windows10_x_s_c_e_p_certificate_profile, windows10_x_trusted_root_certificate, windows10_x_vpn_configuration, windows10_x_wifi_configuration, windows81_certificate_profile_base, windows81_compliance_policy, windows81_general_configuration, windows81_s_c_e_p_certificate_profile, windows81_trusted_root_certificate, windows81_vpn_configuration, windows81_wifi_import_configuration, windows_app_x, windows_assigned_access_profile, windows_autopilot_deployment_profile, windows_autopilot_deployment_profile_assignment, windows_autopilot_deployment_profile_policy_set_item, windows_autopilot_device_identity, windows_autopilot_settings, windows_certificate_profile_base, windows_defender_advanced_threat_protection_configuration, windows_defender_application_control_supplemental_policy, windows_defender_application_control_supplemental_policy_assignment, windows_defender_application_control_supplemental_policy_deployment_status, windows_defender_application_control_supplemental_policy_deployment_summary, windows_delivery_optimization_configuration, windows_device_malware_state, windows_domain_join_configuration, windows_driver_update_inventory, windows_driver_update_profile, windows_driver_update_profile_assignment, windows_feature_update_catalog_item, windows_feature_update_profile, windows_feature_update_profile_assignment, windows_health_monitoring_configuration, windows_hello_for_business_authentication_method, windows_identity_protection_configuration, windows_information_protection, windows_information_protection_app_learning_summary, windows_information_protection_app_locker_file, windows_information_protection_device_registration, windows_information_protection_network_learning_summary, windows_information_protection_policy, windows_information_protection_wipe_action, windows_kiosk_configuration, windows_malware_information, windows_managed_app_protection, windows_managed_device, windows_management_app, windows_management_app_health_state, windows_management_app_health_summary, windows_microsoft_edge_app, windows_mobile_m_s_i, windows_office_client_configuration, windows_office_client_security_configuration, windows_phone81_app_x, windows_phone81_app_x_bundle, windows_phone81_certificate_profile_base, windows_phone81_compliance_policy, windows_phone81_custom_configuration, windows_phone81_general_configuration, windows_phone81_imported_p_f_x_certificate_profile, windows_phone81_store_app, windows_phone81_s_c_e_p_certificate_profile, windows_phone81_trusted_root_certificate, windows_phone81_vpn_configuration, windows_phone_e_a_s_email_profile_configuration, windows_phone_x_a_p, windows_privacy_data_access_control_item, windows_protection_state, windows_quality_update_catalog_item, windows_quality_update_profile, windows_quality_update_profile_assignment, windows_store_app, windows_universal_app_x, windows_universal_app_x_contained_app, windows_update_catalog_item, windows_update_for_business_configuration, windows_update_state, windows_vpn_configuration, windows_web_app, windows_wifi_configuration, windows_wifi_enterprise_e_a_p_configuration, windows_wired_network_configuration, win_get_app, workbook, workbook_application, workbook_chart, workbook_chart_area_format, workbook_chart_axes, workbook_chart_axis, workbook_chart_axis_format, workbook_chart_axis_title, workbook_chart_axis_title_format, workbook_chart_data_labels, workbook_chart_data_label_format, workbook_chart_fill, workbook_chart_font, workbook_chart_gridlines, workbook_chart_gridlines_format, workbook_chart_legend, workbook_chart_legend_format, workbook_chart_line_format, workbook_chart_point, workbook_chart_point_format, workbook_chart_series, workbook_chart_series_format, workbook_chart_title, workbook_chart_title_format, workbook_comment, workbook_comment_reply, workbook_filter, workbook_format_protection, workbook_functions, workbook_function_result, workbook_named_item, workbook_operation, workbook_pivot_table, workbook_range, workbook_range_border, workbook_range_fill, workbook_range_font, workbook_range_format, workbook_range_sort, workbook_range_view, workbook_table, workbook_table_column, workbook_table_row, workbook_table_sort, workbook_worksheet, workbook_worksheet_protection, workforce_integration, workspace, work_position, x509_certificate_authentication_method_configuration, zebra_fota_artifact, zebra_fota_connector, zebra_fota_deployment
        from .call_records import call_record, segment, session
        from .device_management import alert_record, alert_rule, device_management, monitoring
        from .ediscovery import add_to_review_set_operation, case, case_export_operation, case_hold_operation, case_index_operation, case_operation, case_settings, custodian, data_source, data_source_container, ediscoveryroot, estimate_statistics_operation, legal_hold, noncustodial_data_source, purge_data_operation, review_set, review_set_query, site_source, source_collection, tag, tag_operation, unified_group_source, user_source
        from .external_connectors import connection_operation, connection_quota, external_activity, external_activity_result, external_connection, external_group, external_item, identity, schema
        from .identity_governance import custom_task_extension, lifecycle_management_settings, lifecycle_workflows_container, run, task, task_definition, task_processing_result, task_report, user_processing_result, workflow_template
        from .industry_data import azure_data_lake_connector, file_data_connector, file_validate_operation, inbound_file_flow, inbound_flow, inbound_flow_activity, industry_data_activity, industry_data_connector, industry_data_root, industry_data_run, industry_data_run_activity, outbound_flow_activity, reference_definition, role_group, source_system_definition, validate_operation, year_time_period_definition
        from .managed_tenants import aggregated_policy_compliance, app_performance, audit_event, cloud_pc_connection, cloud_pc_device, cloud_pc_overview, conditional_access_policy_coverage, credential_user_registrations_summary, device_app_performance, device_compliance_policy_setting_state_summary, device_health_status, managed_device_compliance, managed_device_compliance_trend, managed_tenant, managed_tenant_alert, managed_tenant_alert_log, managed_tenant_alert_rule, managed_tenant_alert_rule_definition, managed_tenant_api_notification, managed_tenant_email_notification, managed_tenant_ticketing_endpoint, management_action, management_action_tenant_deployment_status, management_intent, management_template, management_template_collection, management_template_collection_tenant_summary, management_template_step, management_template_step_deployment, management_template_step_tenant_summary, management_template_step_version, tenant, tenant_customized_information, tenant_detailed_information, tenant_group, tenant_tag, windows_device_malware_state, windows_protection_state
        from .search import acronym, bookmark, qna, search_answer
        from .security import alert, article, article_indicator, artifact, case, cases_root, case_operation, data_set, data_source, data_source_container, disposition_review_stage, ediscovery_add_to_review_set_operation, ediscovery_case, ediscovery_case_settings, ediscovery_custodian, ediscovery_estimate_operation, ediscovery_export_operation, ediscovery_file, ediscovery_hold_operation, ediscovery_hold_policy, ediscovery_index_operation, ediscovery_noncustodial_data_source, ediscovery_purge_data_operation, ediscovery_review_set, ediscovery_review_set_query, ediscovery_review_tag, ediscovery_search, ediscovery_tag_operation, email_content_threat_submission, email_threat_submission, email_threat_submission_policy, email_url_threat_submission, file, file_content_threat_submission, file_threat_submission, file_url_threat_submission, host, hostname, host_component, host_cookie, host_reputation, host_tracker, incident, indicator, information_protection, information_protection_policy_setting, intelligence_profile, intelligence_profile_indicator, ip_address, labels_root, passive_dns_record, policy_base, retention_event, retention_event_type, retention_label, search, security, sensitivity_label, site_source, tag, threat_intelligence, threat_submission, threat_submission_root, triggers_root, trigger_types_root, unclassified_artifact, unified_group_source, url_threat_submission, user_source, vulnerability, vulnerability_component
        from .tenant_admin import settings, sharepoint
        from .term_store import group, relation, set, store, term
        from .windows_updates import azure_a_d_device, catalog, catalog_entry, compliance_change, content_approval, deployment, deployment_audience, driver_update_catalog_entry, feature_update_catalog_entry, operational_insights_connection, quality_update_catalog_entry, resource_connection, software_update_catalog_entry, updatable_asset, updatable_asset_group, update_policy

        fields: Dict[str, Callable[[Any], None]] = {
            "id": lambda n : setattr(self, 'id', n.get_str_value()),
            "@odata.type": lambda n : setattr(self, 'odata_type', n.get_str_value()),
        }
        return fields
    
    @property
    def id(self,) -> Optional[str]:
        """
        Gets the id property value. The unique identifier for an entity. Read-only.
        Returns: Optional[str]
        """
        return self._id
    
    @id.setter
    def id(self,value: Optional[str] = None) -> None:
        """
        Sets the id property value. The unique identifier for an entity. Read-only.
        Args:
            value: Value to set for the id property.
        """
        self._id = value
    
    @property
    def odata_type(self,) -> Optional[str]:
        """
        Gets the @odata.type property value. The OdataType property
        Returns: Optional[str]
        """
        return self._odata_type
    
    @odata_type.setter
    def odata_type(self,value: Optional[str] = None) -> None:
        """
        Sets the @odata.type property value. The OdataType property
        Args:
            value: Value to set for the odata_type property.
        """
        self._odata_type = value
    
    def serialize(self,writer: SerializationWriter) -> None:
        """
        Serializes information the current object
        Args:
            writer: Serialization writer to use to serialize this model
        """
        if writer is None:
            raise Exception("writer cannot be undefined")
        writer.write_str_value("id", self.id)
        writer.write_str_value("@odata.type", self.odata_type)
        writer.write_additional_data_value(self.additional_data)
    

