from __future__ import annotations
import datetime
from dataclasses import dataclass, field
from kiota_abstractions.serialization import Parsable, ParseNode, SerializationWriter
from typing import Any, Callable, Dict, List, Optional, TYPE_CHECKING, Union

if TYPE_CHECKING:
    from ..entity import Entity

from ..entity import Entity

@dataclass
class WindowsDeviceMalwareState(Entity):
    # The additional information URL for the discovered malware. Optional. Read-only.
    additional_information_url: Optional[str] = None
    # The number of times the piece of malware has been detected. Optional. Read-only.
    detection_count: Optional[int] = None
    # A flag indicating whether the device has been deleted. Optional. Read-only.
    device_deleted: Optional[bool] = None
    # The date and time the piece of malware was initially detected. Optional. Read-only.
    initial_detection_date_time: Optional[datetime.datetime] = None
    # Date and time the entity was last updated in the multi-tenant management platform. Optional. Read-only.
    last_refreshed_date_time: Optional[datetime.datetime] = None
    # The date and time the malware state was last changed. Optional. Read-only.
    last_state_change_date_time: Optional[datetime.datetime] = None
    # The category for the detected malware. Optional. Read-only.
    malware_category: Optional[str] = None
    # The display name for the detected malware. Optional. Read-only.
    malware_display_name: Optional[str] = None
    # The execution state for the detected malware. Optional. Read-only.
    malware_execution_state: Optional[str] = None
    # The unique identifier for the detected malware. Optional. Read-only.
    malware_id: Optional[str] = None
    # The severity for the detected malware. Optional. Read-only.
    malware_severity: Optional[str] = None
    # The threat state for the detected malware. Optional. Read-only.
    malware_threat_state: Optional[str] = None
    # The identifier for the managed device where the malware was detected. Optional. Read-only.
    managed_device_id: Optional[str] = None
    # The display name for the managed device where the malware was detected. Optional. Read-only.
    managed_device_name: Optional[str] = None
    # The OdataType property
    odata_type: Optional[str] = None
    # The display name for the managed tenant. Optional. Read-only.
    tenant_display_name: Optional[str] = None
    # The Microsoft Entra tenant identifier for the managed tenant. Optional. Read-only.
    tenant_id: Optional[str] = None
    
    @staticmethod
    def create_from_discriminator_value(parse_node: Optional[ParseNode] = None) -> WindowsDeviceMalwareState:
        """
        Creates a new instance of the appropriate class based on discriminator value
        param parse_node: The parse node to use to read the discriminator value and create the object
        Returns: WindowsDeviceMalwareState
        """
        if not parse_node:
            raise TypeError("parse_node cannot be null.")
        return WindowsDeviceMalwareState()
    
    def get_field_deserializers(self,) -> Dict[str, Callable[[ParseNode], None]]:
        """
        The deserialization information for the current model
        Returns: Dict[str, Callable[[ParseNode], None]]
        """
        from ..entity import Entity

        from ..entity import Entity

        fields: Dict[str, Callable[[Any], None]] = {
            "additionalInformationUrl": lambda n : setattr(self, 'additional_information_url', n.get_str_value()),
            "detectionCount": lambda n : setattr(self, 'detection_count', n.get_int_value()),
            "deviceDeleted": lambda n : setattr(self, 'device_deleted', n.get_bool_value()),
            "initialDetectionDateTime": lambda n : setattr(self, 'initial_detection_date_time', n.get_datetime_value()),
            "lastRefreshedDateTime": lambda n : setattr(self, 'last_refreshed_date_time', n.get_datetime_value()),
            "lastStateChangeDateTime": lambda n : setattr(self, 'last_state_change_date_time', n.get_datetime_value()),
            "malwareCategory": lambda n : setattr(self, 'malware_category', n.get_str_value()),
            "malwareDisplayName": lambda n : setattr(self, 'malware_display_name', n.get_str_value()),
            "malwareExecutionState": lambda n : setattr(self, 'malware_execution_state', n.get_str_value()),
            "malwareId": lambda n : setattr(self, 'malware_id', n.get_str_value()),
            "malwareSeverity": lambda n : setattr(self, 'malware_severity', n.get_str_value()),
            "malwareThreatState": lambda n : setattr(self, 'malware_threat_state', n.get_str_value()),
            "managedDeviceId": lambda n : setattr(self, 'managed_device_id', n.get_str_value()),
            "managedDeviceName": lambda n : setattr(self, 'managed_device_name', n.get_str_value()),
            "tenantDisplayName": lambda n : setattr(self, 'tenant_display_name', n.get_str_value()),
            "tenantId": lambda n : setattr(self, 'tenant_id', n.get_str_value()),
        }
        super_fields = super().get_field_deserializers()
        fields.update(super_fields)
        return fields
    
    def serialize(self,writer: SerializationWriter) -> None:
        """
        Serializes information the current object
        param writer: Serialization writer to use to serialize this model
        Returns: None
        """
        if not writer:
            raise TypeError("writer cannot be null.")
        super().serialize(writer)
        writer.write_str_value("additionalInformationUrl", self.additional_information_url)
        writer.write_int_value("detectionCount", self.detection_count)
        writer.write_bool_value("deviceDeleted", self.device_deleted)
        writer.write_datetime_value("initialDetectionDateTime", self.initial_detection_date_time)
        writer.write_datetime_value("lastRefreshedDateTime", self.last_refreshed_date_time)
        writer.write_datetime_value("lastStateChangeDateTime", self.last_state_change_date_time)
        writer.write_str_value("malwareCategory", self.malware_category)
        writer.write_str_value("malwareDisplayName", self.malware_display_name)
        writer.write_str_value("malwareExecutionState", self.malware_execution_state)
        writer.write_str_value("malwareId", self.malware_id)
        writer.write_str_value("malwareSeverity", self.malware_severity)
        writer.write_str_value("malwareThreatState", self.malware_threat_state)
        writer.write_str_value("managedDeviceId", self.managed_device_id)
        writer.write_str_value("managedDeviceName", self.managed_device_name)
        writer.write_str_value("tenantDisplayName", self.tenant_display_name)
        writer.write_str_value("tenantId", self.tenant_id)
    

