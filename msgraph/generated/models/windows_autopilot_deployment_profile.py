from __future__ import annotations
import datetime
from dataclasses import dataclass, field
from kiota_abstractions.serialization import Parsable, ParseNode, SerializationWriter
from typing import Any, Callable, Dict, List, Optional, TYPE_CHECKING, Union

if TYPE_CHECKING:
    from .active_directory_windows_autopilot_deployment_profile import ActiveDirectoryWindowsAutopilotDeploymentProfile
    from .azure_a_d_windows_autopilot_deployment_profile import AzureADWindowsAutopilotDeploymentProfile
    from .entity import Entity
    from .out_of_box_experience_settings import OutOfBoxExperienceSettings
    from .windows_autopilot_deployment_profile_assignment import WindowsAutopilotDeploymentProfileAssignment
    from .windows_autopilot_device_identity import WindowsAutopilotDeviceIdentity
    from .windows_autopilot_device_type import WindowsAutopilotDeviceType
    from .windows_enrollment_status_screen_settings import WindowsEnrollmentStatusScreenSettings

from .entity import Entity

@dataclass
class WindowsAutopilotDeploymentProfile(Entity):
    """
    Windows Autopilot Deployment Profile
    """
    # The list of assigned devices for the profile.
    assigned_devices: Optional[List[WindowsAutopilotDeviceIdentity]] = None
    # The list of group assignments for the profile.
    assignments: Optional[List[WindowsAutopilotDeploymentProfileAssignment]] = None
    # Profile creation time
    created_date_time: Optional[datetime.datetime] = None
    # Description of the profile
    description: Optional[str] = None
    # The template used to name the AutoPilot Device. This can be a custom text and can also contain either the serial number of the device, or a randomly generated number. The total length of the text generated by the template can be no more than 15 characters.
    device_name_template: Optional[str] = None
    # The deviceType property
    device_type: Optional[WindowsAutopilotDeviceType] = None
    # Name of the profile
    display_name: Optional[str] = None
    # Enable Autopilot White Glove for the profile.
    enable_white_glove: Optional[bool] = None
    # Enrollment status screen setting
    enrollment_status_screen_settings: Optional[WindowsEnrollmentStatusScreenSettings] = None
    # HardwareHash Extraction for the profile
    extract_hardware_hash: Optional[bool] = None
    # Language configured on the device
    language: Optional[str] = None
    # Profile last modified time
    last_modified_date_time: Optional[datetime.datetime] = None
    # AzureAD management app ID used during client device-based enrollment discovery
    management_service_app_id: Optional[str] = None
    # The OdataType property
    odata_type: Optional[str] = None
    # Out of box experience setting
    out_of_box_experience_settings: Optional[OutOfBoxExperienceSettings] = None
    # Scope tags for the profile.
    role_scope_tag_ids: Optional[List[str]] = None
    
    @staticmethod
    def create_from_discriminator_value(parse_node: Optional[ParseNode] = None) -> WindowsAutopilotDeploymentProfile:
        """
        Creates a new instance of the appropriate class based on discriminator value
        param parse_node: The parse node to use to read the discriminator value and create the object
        Returns: WindowsAutopilotDeploymentProfile
        """
        if not parse_node:
            raise TypeError("parse_node cannot be null.")
        try:
            mapping_value = parse_node.get_child_node("@odata.type").get_str_value()
        except AttributeError:
            mapping_value = None
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.activeDirectoryWindowsAutopilotDeploymentProfile".casefold():
            from .active_directory_windows_autopilot_deployment_profile import ActiveDirectoryWindowsAutopilotDeploymentProfile

            return ActiveDirectoryWindowsAutopilotDeploymentProfile()
        if mapping_value and mapping_value.casefold() == "#microsoft.graph.azureADWindowsAutopilotDeploymentProfile".casefold():
            from .azure_a_d_windows_autopilot_deployment_profile import AzureADWindowsAutopilotDeploymentProfile

            return AzureADWindowsAutopilotDeploymentProfile()
        return WindowsAutopilotDeploymentProfile()
    
    def get_field_deserializers(self,) -> Dict[str, Callable[[ParseNode], None]]:
        """
        The deserialization information for the current model
        Returns: Dict[str, Callable[[ParseNode], None]]
        """
        from .active_directory_windows_autopilot_deployment_profile import ActiveDirectoryWindowsAutopilotDeploymentProfile
        from .azure_a_d_windows_autopilot_deployment_profile import AzureADWindowsAutopilotDeploymentProfile
        from .entity import Entity
        from .out_of_box_experience_settings import OutOfBoxExperienceSettings
        from .windows_autopilot_deployment_profile_assignment import WindowsAutopilotDeploymentProfileAssignment
        from .windows_autopilot_device_identity import WindowsAutopilotDeviceIdentity
        from .windows_autopilot_device_type import WindowsAutopilotDeviceType
        from .windows_enrollment_status_screen_settings import WindowsEnrollmentStatusScreenSettings

        from .active_directory_windows_autopilot_deployment_profile import ActiveDirectoryWindowsAutopilotDeploymentProfile
        from .azure_a_d_windows_autopilot_deployment_profile import AzureADWindowsAutopilotDeploymentProfile
        from .entity import Entity
        from .out_of_box_experience_settings import OutOfBoxExperienceSettings
        from .windows_autopilot_deployment_profile_assignment import WindowsAutopilotDeploymentProfileAssignment
        from .windows_autopilot_device_identity import WindowsAutopilotDeviceIdentity
        from .windows_autopilot_device_type import WindowsAutopilotDeviceType
        from .windows_enrollment_status_screen_settings import WindowsEnrollmentStatusScreenSettings

        fields: Dict[str, Callable[[Any], None]] = {
            "assignedDevices": lambda n : setattr(self, 'assigned_devices', n.get_collection_of_object_values(WindowsAutopilotDeviceIdentity)),
            "assignments": lambda n : setattr(self, 'assignments', n.get_collection_of_object_values(WindowsAutopilotDeploymentProfileAssignment)),
            "createdDateTime": lambda n : setattr(self, 'created_date_time', n.get_datetime_value()),
            "description": lambda n : setattr(self, 'description', n.get_str_value()),
            "deviceNameTemplate": lambda n : setattr(self, 'device_name_template', n.get_str_value()),
            "deviceType": lambda n : setattr(self, 'device_type', n.get_enum_value(WindowsAutopilotDeviceType)),
            "displayName": lambda n : setattr(self, 'display_name', n.get_str_value()),
            "enableWhiteGlove": lambda n : setattr(self, 'enable_white_glove', n.get_bool_value()),
            "enrollmentStatusScreenSettings": lambda n : setattr(self, 'enrollment_status_screen_settings', n.get_object_value(WindowsEnrollmentStatusScreenSettings)),
            "extractHardwareHash": lambda n : setattr(self, 'extract_hardware_hash', n.get_bool_value()),
            "language": lambda n : setattr(self, 'language', n.get_str_value()),
            "lastModifiedDateTime": lambda n : setattr(self, 'last_modified_date_time', n.get_datetime_value()),
            "managementServiceAppId": lambda n : setattr(self, 'management_service_app_id', n.get_str_value()),
            "outOfBoxExperienceSettings": lambda n : setattr(self, 'out_of_box_experience_settings', n.get_object_value(OutOfBoxExperienceSettings)),
            "roleScopeTagIds": lambda n : setattr(self, 'role_scope_tag_ids', n.get_collection_of_primitive_values(str)),
        }
        super_fields = super().get_field_deserializers()
        fields.update(super_fields)
        return fields
    
    def serialize(self,writer: SerializationWriter) -> None:
        """
        Serializes information the current object
        param writer: Serialization writer to use to serialize this model
        Returns: None
        """
        if not writer:
            raise TypeError("writer cannot be null.")
        super().serialize(writer)
        writer.write_collection_of_object_values("assignedDevices", self.assigned_devices)
        writer.write_collection_of_object_values("assignments", self.assignments)
        writer.write_datetime_value("createdDateTime", self.created_date_time)
        writer.write_str_value("description", self.description)
        writer.write_str_value("deviceNameTemplate", self.device_name_template)
        writer.write_enum_value("deviceType", self.device_type)
        writer.write_str_value("displayName", self.display_name)
        writer.write_bool_value("enableWhiteGlove", self.enable_white_glove)
        writer.write_object_value("enrollmentStatusScreenSettings", self.enrollment_status_screen_settings)
        writer.write_bool_value("extractHardwareHash", self.extract_hardware_hash)
        writer.write_str_value("language", self.language)
        writer.write_datetime_value("lastModifiedDateTime", self.last_modified_date_time)
        writer.write_str_value("managementServiceAppId", self.management_service_app_id)
        writer.write_object_value("outOfBoxExperienceSettings", self.out_of_box_experience_settings)
        writer.write_collection_of_primitive_values("roleScopeTagIds", self.role_scope_tag_ids)
    

