from __future__ import annotations
from dataclasses import dataclass, field
from datetime import datetime
from kiota_abstractions.serialization import Parsable, ParseNode, SerializationWriter
from typing import Any, Callable, Dict, List, Optional, TYPE_CHECKING, Union

if TYPE_CHECKING:
    from . import entity, windows_malware_execution_state, windows_malware_threat_state

from . import entity

@dataclass
class MalwareStateForWindowsDevice(entity.Entity):
    """
    Malware state for a windows device
    """
    # Number of times the malware is detected
    detection_count: Optional[int] = None
    # Device name
    device_name: Optional[str] = None
    # Execution status of the malware like blocked/executing etc. Possible values are: unknown, blocked, allowed, running, notRunning.
    execution_state: Optional[windows_malware_execution_state.WindowsMalwareExecutionState] = None
    # Initial detection datetime of the malware
    initial_detection_date_time: Optional[datetime] = None
    # The last time this particular threat was changed
    last_state_change_date_time: Optional[datetime] = None
    # The OdataType property
    odata_type: Optional[str] = None
    # Threat status of the malware like cleaned/quarantined/allowed etc. Possible values are: active, actionFailed, manualStepsRequired, fullScanRequired, rebootRequired, remediatedWithNonCriticalFailures, quarantined, removed, cleaned, allowed, noStatusCleared.
    threat_state: Optional[windows_malware_threat_state.WindowsMalwareThreatState] = None
    
    @staticmethod
    def create_from_discriminator_value(parse_node: Optional[ParseNode] = None) -> MalwareStateForWindowsDevice:
        """
        Creates a new instance of the appropriate class based on discriminator value
        Args:
            parseNode: The parse node to use to read the discriminator value and create the object
        Returns: MalwareStateForWindowsDevice
        """
        if not parse_node:
            raise TypeError("parse_node cannot be null.")
        return MalwareStateForWindowsDevice()
    
    def get_field_deserializers(self,) -> Dict[str, Callable[[ParseNode], None]]:
        """
        The deserialization information for the current model
        Returns: Dict[str, Callable[[ParseNode], None]]
        """
        from . import entity, windows_malware_execution_state, windows_malware_threat_state

        from . import entity, windows_malware_execution_state, windows_malware_threat_state

        fields: Dict[str, Callable[[Any], None]] = {
            "detectionCount": lambda n : setattr(self, 'detection_count', n.get_int_value()),
            "deviceName": lambda n : setattr(self, 'device_name', n.get_str_value()),
            "executionState": lambda n : setattr(self, 'execution_state', n.get_enum_value(windows_malware_execution_state.WindowsMalwareExecutionState)),
            "initialDetectionDateTime": lambda n : setattr(self, 'initial_detection_date_time', n.get_datetime_value()),
            "lastStateChangeDateTime": lambda n : setattr(self, 'last_state_change_date_time', n.get_datetime_value()),
            "threatState": lambda n : setattr(self, 'threat_state', n.get_enum_value(windows_malware_threat_state.WindowsMalwareThreatState)),
        }
        super_fields = super().get_field_deserializers()
        fields.update(super_fields)
        return fields
    
    def serialize(self,writer: SerializationWriter) -> None:
        """
        Serializes information the current object
        Args:
            writer: Serialization writer to use to serialize this model
        """
        if not writer:
            raise TypeError("writer cannot be null.")
        super().serialize(writer)
        writer.write_int_value("detectionCount", self.detection_count)
        writer.write_str_value("deviceName", self.device_name)
        writer.write_enum_value("executionState", self.execution_state)
        writer.write_datetime_value("initialDetectionDateTime", self.initial_detection_date_time)
        writer.write_datetime_value("lastStateChangeDateTime", self.last_state_change_date_time)
        writer.write_enum_value("threatState", self.threat_state)
    

