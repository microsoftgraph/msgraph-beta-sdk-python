from __future__ import annotations
from dataclasses import dataclass, field
from kiota_abstractions.serialization import Parsable, ParseNode, SerializationWriter
from typing import Any, Callable, Dict, List, Optional, TYPE_CHECKING, Union

if TYPE_CHECKING:
    from . import app_vulnerability_managed_device, app_vulnerability_mobile_app, app_vulnerability_task_mitigation_type, device_app_management_task

from . import device_app_management_task

@dataclass
class AppVulnerabilityTask(device_app_management_task.DeviceAppManagementTask):
    odata_type = "#microsoft.graph.appVulnerabilityTask"
    # The app name.
    app_name: Optional[str] = None
    # The app publisher.
    app_publisher: Optional[str] = None
    # The app version.
    app_version: Optional[str] = None
    # Information about the mitigation.
    insights: Optional[str] = None
    # The number of vulnerable devices.
    managed_device_count: Optional[int] = None
    # The vulnerable managed devices.
    managed_devices: Optional[List[app_vulnerability_managed_device.AppVulnerabilityManagedDevice]] = None
    # Device app management task mitigation type.
    mitigation_type: Optional[app_vulnerability_task_mitigation_type.AppVulnerabilityTaskMitigationType] = None
    # The number of vulnerable mobile apps.
    mobile_app_count: Optional[int] = None
    # The vulnerable mobile apps.
    mobile_apps: Optional[List[app_vulnerability_mobile_app.AppVulnerabilityMobileApp]] = None
    # The remediation steps.
    remediation: Optional[str] = None
    
    @staticmethod
    def create_from_discriminator_value(parse_node: Optional[ParseNode] = None) -> AppVulnerabilityTask:
        """
        Creates a new instance of the appropriate class based on discriminator value
        Args:
            parseNode: The parse node to use to read the discriminator value and create the object
        Returns: AppVulnerabilityTask
        """
        if not parse_node:
            raise TypeError("parse_node cannot be null.")
        return AppVulnerabilityTask()
    
    def get_field_deserializers(self,) -> Dict[str, Callable[[ParseNode], None]]:
        """
        The deserialization information for the current model
        Returns: Dict[str, Callable[[ParseNode], None]]
        """
        from . import app_vulnerability_managed_device, app_vulnerability_mobile_app, app_vulnerability_task_mitigation_type, device_app_management_task

        from . import app_vulnerability_managed_device, app_vulnerability_mobile_app, app_vulnerability_task_mitigation_type, device_app_management_task

        fields: Dict[str, Callable[[Any], None]] = {
            "appName": lambda n : setattr(self, 'app_name', n.get_str_value()),
            "appPublisher": lambda n : setattr(self, 'app_publisher', n.get_str_value()),
            "appVersion": lambda n : setattr(self, 'app_version', n.get_str_value()),
            "insights": lambda n : setattr(self, 'insights', n.get_str_value()),
            "managedDeviceCount": lambda n : setattr(self, 'managed_device_count', n.get_int_value()),
            "managedDevices": lambda n : setattr(self, 'managed_devices', n.get_collection_of_object_values(app_vulnerability_managed_device.AppVulnerabilityManagedDevice)),
            "mitigationType": lambda n : setattr(self, 'mitigation_type', n.get_enum_value(app_vulnerability_task_mitigation_type.AppVulnerabilityTaskMitigationType)),
            "mobileAppCount": lambda n : setattr(self, 'mobile_app_count', n.get_int_value()),
            "mobileApps": lambda n : setattr(self, 'mobile_apps', n.get_collection_of_object_values(app_vulnerability_mobile_app.AppVulnerabilityMobileApp)),
            "remediation": lambda n : setattr(self, 'remediation', n.get_str_value()),
        }
        super_fields = super().get_field_deserializers()
        fields.update(super_fields)
        return fields
    
    def serialize(self,writer: SerializationWriter) -> None:
        """
        Serializes information the current object
        Args:
            writer: Serialization writer to use to serialize this model
        """
        if not writer:
            raise TypeError("writer cannot be null.")
        super().serialize(writer)
        writer.write_str_value("appName", self.app_name)
        writer.write_str_value("appPublisher", self.app_publisher)
        writer.write_str_value("appVersion", self.app_version)
        writer.write_str_value("insights", self.insights)
        writer.write_int_value("managedDeviceCount", self.managed_device_count)
        writer.write_collection_of_object_values("managedDevices", self.managed_devices)
        writer.write_enum_value("mitigationType", self.mitigation_type)
        writer.write_int_value("mobileAppCount", self.mobile_app_count)
        writer.write_collection_of_object_values("mobileApps", self.mobile_apps)
        writer.write_str_value("remediation", self.remediation)
    

