from __future__ import annotations
from dataclasses import dataclass, field
from kiota_abstractions.serialization import Parsable, ParseNode, SerializationWriter
from typing import Any, Callable, Dict, List, Optional, TYPE_CHECKING, Union

if TYPE_CHECKING:
    from . import item_facet, locale_info

from . import item_facet

@dataclass
class UserAccountInformation(item_facet.ItemFacet):
    odata_type = "#microsoft.graph.userAccountInformation"
    # Shows the age group of user. Allowed values null, minor, notAdult and adult are generated by the directory and cannot be changed.
    age_group: Optional[str] = None
    # Contains the two-character country code associated with the users account.
    country_code: Optional[str] = None
    # The preferredLanguageTag property
    preferred_language_tag: Optional[locale_info.LocaleInfo] = None
    # The user principal name (UPN) of the user associated with the account.
    user_principal_name: Optional[str] = None
    
    @staticmethod
    def create_from_discriminator_value(parse_node: Optional[ParseNode] = None) -> UserAccountInformation:
        """
        Creates a new instance of the appropriate class based on discriminator value
        Args:
            parseNode: The parse node to use to read the discriminator value and create the object
        Returns: UserAccountInformation
        """
        if not parse_node:
            raise TypeError("parse_node cannot be null.")
        return UserAccountInformation()
    
    def get_field_deserializers(self,) -> Dict[str, Callable[[ParseNode], None]]:
        """
        The deserialization information for the current model
        Returns: Dict[str, Callable[[ParseNode], None]]
        """
        from . import item_facet, locale_info

        from . import item_facet, locale_info

        fields: Dict[str, Callable[[Any], None]] = {
            "ageGroup": lambda n : setattr(self, 'age_group', n.get_str_value()),
            "countryCode": lambda n : setattr(self, 'country_code', n.get_str_value()),
            "preferredLanguageTag": lambda n : setattr(self, 'preferred_language_tag', n.get_object_value(locale_info.LocaleInfo)),
            "userPrincipalName": lambda n : setattr(self, 'user_principal_name', n.get_str_value()),
        }
        super_fields = super().get_field_deserializers()
        fields.update(super_fields)
        return fields
    
    def serialize(self,writer: SerializationWriter) -> None:
        """
        Serializes information the current object
        Args:
            writer: Serialization writer to use to serialize this model
        """
        if not writer:
            raise TypeError("writer cannot be null.")
        super().serialize(writer)
        writer.write_str_value("ageGroup", self.age_group)
        writer.write_str_value("countryCode", self.country_code)
        writer.write_object_value("preferredLanguageTag", self.preferred_language_tag)
        writer.write_str_value("userPrincipalName", self.user_principal_name)
    

