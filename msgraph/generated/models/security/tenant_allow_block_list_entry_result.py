from __future__ import annotations
import datetime
from dataclasses import dataclass, field
from kiota_abstractions.serialization import AdditionalDataHolder, Parsable, ParseNode, SerializationWriter
from kiota_abstractions.store import BackedModel, BackingStore, BackingStoreFactorySingleton
from typing import Any, Callable, Dict, List, Optional, TYPE_CHECKING, Union

if TYPE_CHECKING:
    from .long_running_operation_status import LongRunningOperationStatus
    from .tenant_allow_block_list_entry_type import TenantAllowBlockListEntryType

@dataclass
class TenantAllowBlockListEntryResult(AdditionalDataHolder, BackedModel, Parsable):
    # Stores model information.
    backing_store: BackingStore = field(default_factory=BackingStoreFactorySingleton(backing_store_factory=None).backing_store_factory.create_backing_store, repr=False)

    # Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
    additional_data: Dict[str, Any] = field(default_factory=dict)
    # The tenant allow-block list entry type. The possible values are: url, fileHash, sender, recipient and unkownFutureValue.
    entry_type: Optional[TenantAllowBlockListEntryType] = None
    # Specifies the date and time when the entry expires.
    expiration_date_time: Optional[datetime.datetime] = None
    # Specifies the identity of the entry generated by the tenant allow block list system.
    identity: Optional[str] = None
    # The OdataType property
    odata_type: Optional[str] = None
    # Specifies whether the tenant allow block list entry creation operation was successful. The possible values are: notStarted, running, succeeded, failed, skipped and unkownFutureValue.
    status: Optional[LongRunningOperationStatus] = None
    # Specifies the value of the created tenant allow block list entry.
    value: Optional[str] = None
    
    @staticmethod
    def create_from_discriminator_value(parse_node: Optional[ParseNode] = None) -> TenantAllowBlockListEntryResult:
        """
        Creates a new instance of the appropriate class based on discriminator value
        param parse_node: The parse node to use to read the discriminator value and create the object
        Returns: TenantAllowBlockListEntryResult
        """
        if not parse_node:
            raise TypeError("parse_node cannot be null.")
        return TenantAllowBlockListEntryResult()
    
    def get_field_deserializers(self,) -> Dict[str, Callable[[ParseNode], None]]:
        """
        The deserialization information for the current model
        Returns: Dict[str, Callable[[ParseNode], None]]
        """
        from .long_running_operation_status import LongRunningOperationStatus
        from .tenant_allow_block_list_entry_type import TenantAllowBlockListEntryType

        from .long_running_operation_status import LongRunningOperationStatus
        from .tenant_allow_block_list_entry_type import TenantAllowBlockListEntryType

        fields: Dict[str, Callable[[Any], None]] = {
            "entryType": lambda n : setattr(self, 'entry_type', n.get_enum_value(TenantAllowBlockListEntryType)),
            "expirationDateTime": lambda n : setattr(self, 'expiration_date_time', n.get_datetime_value()),
            "identity": lambda n : setattr(self, 'identity', n.get_str_value()),
            "@odata.type": lambda n : setattr(self, 'odata_type', n.get_str_value()),
            "status": lambda n : setattr(self, 'status', n.get_enum_value(LongRunningOperationStatus)),
            "value": lambda n : setattr(self, 'value', n.get_str_value()),
        }
        return fields
    
    def serialize(self,writer: SerializationWriter) -> None:
        """
        Serializes information the current object
        param writer: Serialization writer to use to serialize this model
        Returns: None
        """
        if not writer:
            raise TypeError("writer cannot be null.")
        writer.write_enum_value("entryType", self.entry_type)
        writer.write_datetime_value("expirationDateTime", self.expiration_date_time)
        writer.write_str_value("identity", self.identity)
        writer.write_str_value("@odata.type", self.odata_type)
        writer.write_enum_value("status", self.status)
        writer.write_str_value("value", self.value)
        writer.write_additional_data_value(self.additional_data)
    

