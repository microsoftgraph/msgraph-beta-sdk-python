from __future__ import annotations
from datetime import datetime
from kiota_abstractions.serialization import Parsable, ParseNode, SerializationWriter
from typing import Any, Callable, Dict, List, Optional, TYPE_CHECKING, Union

if TYPE_CHECKING:
    from . import article, cvss_summary, formatted_content, hyperlink, vulnerability_component, vulnerability_severity
    from .. import entity

from .. import entity

class Vulnerability(entity.Entity):
    def __init__(self,) -> None:
        """
        Instantiates a new vulnerability and sets the default values.
        """
        super().__init__()
        # Indicates whether this vulnerability has any known exploits associated to known bad actors.
        self._active_exploits_observed: Optional[bool] = None
        # Articles related to this vulnerability.
        self._articles: Optional[List[article.Article]] = None
        # Community-defined common weakness enumerations (CWE).
        self._common_weakness_enumeration_ids: Optional[List[str]] = None
        # Components related to this vulnerability article.
        self._components: Optional[List[vulnerability_component.VulnerabilityComponent]] = None
        # The date and time when this vulnerability article was first created.
        self._created_date_time: Optional[datetime] = None
        # The cvss2Summary property
        self._cvss2_summary: Optional[cvss_summary.CvssSummary] = None
        # The cvss3Summary property
        self._cvss3_summary: Optional[cvss_summary.CvssSummary] = None
        # The description property
        self._description: Optional[formatted_content.FormattedContent] = None
        # Known exploits for this vulnerability.
        self._exploits: Optional[List[hyperlink.Hyperlink]] = None
        # Indicates whether this vulnerability has exploits in public sources (such as Packetstorm or Exploit-DB) online.
        self._exploits_available: Optional[bool] = None
        # Indicates whether chatter about this vulnerability has been discovered online.
        self._has_chatter: Optional[bool] = None
        # The date and time when this vulnerability article was most recently updated.
        self._last_modified_date_time: Optional[datetime] = None
        # The OdataType property
        self.odata_type: Optional[str] = None
        # A unique algorithm that reflects the priority of a vulnerability based on the CVSS score, exploits, chatter, and linkage to malware. This property also evaluates the recency of these components so users can understand which vulnerability should be remediated first.
        self._priority_score: Optional[int] = None
        # The date and time when this vulnerability article was published.
        self._published_date_time: Optional[datetime] = None
        # Reference links where further information can be learned about this vulnerability.
        self._references: Optional[List[hyperlink.Hyperlink]] = None
        # Any known remediation steps.
        self._remediation: Optional[formatted_content.FormattedContent] = None
        # The severity property
        self._severity: Optional[vulnerability_severity.VulnerabilitySeverity] = None
    
    @property
    def active_exploits_observed(self,) -> Optional[bool]:
        """
        Gets the activeExploitsObserved property value. Indicates whether this vulnerability has any known exploits associated to known bad actors.
        Returns: Optional[bool]
        """
        return self._active_exploits_observed
    
    @active_exploits_observed.setter
    def active_exploits_observed(self,value: Optional[bool] = None) -> None:
        """
        Sets the activeExploitsObserved property value. Indicates whether this vulnerability has any known exploits associated to known bad actors.
        Args:
            value: Value to set for the active_exploits_observed property.
        """
        self._active_exploits_observed = value
    
    @property
    def articles(self,) -> Optional[List[article.Article]]:
        """
        Gets the articles property value. Articles related to this vulnerability.
        Returns: Optional[List[article.Article]]
        """
        return self._articles
    
    @articles.setter
    def articles(self,value: Optional[List[article.Article]] = None) -> None:
        """
        Sets the articles property value. Articles related to this vulnerability.
        Args:
            value: Value to set for the articles property.
        """
        self._articles = value
    
    @property
    def common_weakness_enumeration_ids(self,) -> Optional[List[str]]:
        """
        Gets the commonWeaknessEnumerationIds property value. Community-defined common weakness enumerations (CWE).
        Returns: Optional[List[str]]
        """
        return self._common_weakness_enumeration_ids
    
    @common_weakness_enumeration_ids.setter
    def common_weakness_enumeration_ids(self,value: Optional[List[str]] = None) -> None:
        """
        Sets the commonWeaknessEnumerationIds property value. Community-defined common weakness enumerations (CWE).
        Args:
            value: Value to set for the common_weakness_enumeration_ids property.
        """
        self._common_weakness_enumeration_ids = value
    
    @property
    def components(self,) -> Optional[List[vulnerability_component.VulnerabilityComponent]]:
        """
        Gets the components property value. Components related to this vulnerability article.
        Returns: Optional[List[vulnerability_component.VulnerabilityComponent]]
        """
        return self._components
    
    @components.setter
    def components(self,value: Optional[List[vulnerability_component.VulnerabilityComponent]] = None) -> None:
        """
        Sets the components property value. Components related to this vulnerability article.
        Args:
            value: Value to set for the components property.
        """
        self._components = value
    
    @property
    def created_date_time(self,) -> Optional[datetime]:
        """
        Gets the createdDateTime property value. The date and time when this vulnerability article was first created.
        Returns: Optional[datetime]
        """
        return self._created_date_time
    
    @created_date_time.setter
    def created_date_time(self,value: Optional[datetime] = None) -> None:
        """
        Sets the createdDateTime property value. The date and time when this vulnerability article was first created.
        Args:
            value: Value to set for the created_date_time property.
        """
        self._created_date_time = value
    
    @staticmethod
    def create_from_discriminator_value(parse_node: Optional[ParseNode] = None) -> Vulnerability:
        """
        Creates a new instance of the appropriate class based on discriminator value
        Args:
            parseNode: The parse node to use to read the discriminator value and create the object
        Returns: Vulnerability
        """
        if parse_node is None:
            raise Exception("parse_node cannot be undefined")
        return Vulnerability()
    
    @property
    def cvss2_summary(self,) -> Optional[cvss_summary.CvssSummary]:
        """
        Gets the cvss2Summary property value. The cvss2Summary property
        Returns: Optional[cvss_summary.CvssSummary]
        """
        return self._cvss2_summary
    
    @cvss2_summary.setter
    def cvss2_summary(self,value: Optional[cvss_summary.CvssSummary] = None) -> None:
        """
        Sets the cvss2Summary property value. The cvss2Summary property
        Args:
            value: Value to set for the cvss2_summary property.
        """
        self._cvss2_summary = value
    
    @property
    def cvss3_summary(self,) -> Optional[cvss_summary.CvssSummary]:
        """
        Gets the cvss3Summary property value. The cvss3Summary property
        Returns: Optional[cvss_summary.CvssSummary]
        """
        return self._cvss3_summary
    
    @cvss3_summary.setter
    def cvss3_summary(self,value: Optional[cvss_summary.CvssSummary] = None) -> None:
        """
        Sets the cvss3Summary property value. The cvss3Summary property
        Args:
            value: Value to set for the cvss3_summary property.
        """
        self._cvss3_summary = value
    
    @property
    def description(self,) -> Optional[formatted_content.FormattedContent]:
        """
        Gets the description property value. The description property
        Returns: Optional[formatted_content.FormattedContent]
        """
        return self._description
    
    @description.setter
    def description(self,value: Optional[formatted_content.FormattedContent] = None) -> None:
        """
        Sets the description property value. The description property
        Args:
            value: Value to set for the description property.
        """
        self._description = value
    
    @property
    def exploits(self,) -> Optional[List[hyperlink.Hyperlink]]:
        """
        Gets the exploits property value. Known exploits for this vulnerability.
        Returns: Optional[List[hyperlink.Hyperlink]]
        """
        return self._exploits
    
    @exploits.setter
    def exploits(self,value: Optional[List[hyperlink.Hyperlink]] = None) -> None:
        """
        Sets the exploits property value. Known exploits for this vulnerability.
        Args:
            value: Value to set for the exploits property.
        """
        self._exploits = value
    
    @property
    def exploits_available(self,) -> Optional[bool]:
        """
        Gets the exploitsAvailable property value. Indicates whether this vulnerability has exploits in public sources (such as Packetstorm or Exploit-DB) online.
        Returns: Optional[bool]
        """
        return self._exploits_available
    
    @exploits_available.setter
    def exploits_available(self,value: Optional[bool] = None) -> None:
        """
        Sets the exploitsAvailable property value. Indicates whether this vulnerability has exploits in public sources (such as Packetstorm or Exploit-DB) online.
        Args:
            value: Value to set for the exploits_available property.
        """
        self._exploits_available = value
    
    def get_field_deserializers(self,) -> Dict[str, Callable[[ParseNode], None]]:
        """
        The deserialization information for the current model
        Returns: Dict[str, Callable[[ParseNode], None]]
        """
        from . import article, cvss_summary, formatted_content, hyperlink, vulnerability_component, vulnerability_severity
        from .. import entity

        fields: Dict[str, Callable[[Any], None]] = {
            "activeExploitsObserved": lambda n : setattr(self, 'active_exploits_observed', n.get_bool_value()),
            "articles": lambda n : setattr(self, 'articles', n.get_collection_of_object_values(article.Article)),
            "commonWeaknessEnumerationIds": lambda n : setattr(self, 'common_weakness_enumeration_ids', n.get_collection_of_primitive_values(str)),
            "components": lambda n : setattr(self, 'components', n.get_collection_of_object_values(vulnerability_component.VulnerabilityComponent)),
            "createdDateTime": lambda n : setattr(self, 'created_date_time', n.get_datetime_value()),
            "cvss2Summary": lambda n : setattr(self, 'cvss2_summary', n.get_object_value(cvss_summary.CvssSummary)),
            "cvss3Summary": lambda n : setattr(self, 'cvss3_summary', n.get_object_value(cvss_summary.CvssSummary)),
            "description": lambda n : setattr(self, 'description', n.get_object_value(formatted_content.FormattedContent)),
            "exploits": lambda n : setattr(self, 'exploits', n.get_collection_of_object_values(hyperlink.Hyperlink)),
            "exploitsAvailable": lambda n : setattr(self, 'exploits_available', n.get_bool_value()),
            "hasChatter": lambda n : setattr(self, 'has_chatter', n.get_bool_value()),
            "lastModifiedDateTime": lambda n : setattr(self, 'last_modified_date_time', n.get_datetime_value()),
            "priorityScore": lambda n : setattr(self, 'priority_score', n.get_int_value()),
            "publishedDateTime": lambda n : setattr(self, 'published_date_time', n.get_datetime_value()),
            "references": lambda n : setattr(self, 'references', n.get_collection_of_object_values(hyperlink.Hyperlink)),
            "remediation": lambda n : setattr(self, 'remediation', n.get_object_value(formatted_content.FormattedContent)),
            "severity": lambda n : setattr(self, 'severity', n.get_enum_value(vulnerability_severity.VulnerabilitySeverity)),
        }
        super_fields = super().get_field_deserializers()
        fields.update(super_fields)
        return fields
    
    @property
    def has_chatter(self,) -> Optional[bool]:
        """
        Gets the hasChatter property value. Indicates whether chatter about this vulnerability has been discovered online.
        Returns: Optional[bool]
        """
        return self._has_chatter
    
    @has_chatter.setter
    def has_chatter(self,value: Optional[bool] = None) -> None:
        """
        Sets the hasChatter property value. Indicates whether chatter about this vulnerability has been discovered online.
        Args:
            value: Value to set for the has_chatter property.
        """
        self._has_chatter = value
    
    @property
    def last_modified_date_time(self,) -> Optional[datetime]:
        """
        Gets the lastModifiedDateTime property value. The date and time when this vulnerability article was most recently updated.
        Returns: Optional[datetime]
        """
        return self._last_modified_date_time
    
    @last_modified_date_time.setter
    def last_modified_date_time(self,value: Optional[datetime] = None) -> None:
        """
        Sets the lastModifiedDateTime property value. The date and time when this vulnerability article was most recently updated.
        Args:
            value: Value to set for the last_modified_date_time property.
        """
        self._last_modified_date_time = value
    
    @property
    def priority_score(self,) -> Optional[int]:
        """
        Gets the priorityScore property value. A unique algorithm that reflects the priority of a vulnerability based on the CVSS score, exploits, chatter, and linkage to malware. This property also evaluates the recency of these components so users can understand which vulnerability should be remediated first.
        Returns: Optional[int]
        """
        return self._priority_score
    
    @priority_score.setter
    def priority_score(self,value: Optional[int] = None) -> None:
        """
        Sets the priorityScore property value. A unique algorithm that reflects the priority of a vulnerability based on the CVSS score, exploits, chatter, and linkage to malware. This property also evaluates the recency of these components so users can understand which vulnerability should be remediated first.
        Args:
            value: Value to set for the priority_score property.
        """
        self._priority_score = value
    
    @property
    def published_date_time(self,) -> Optional[datetime]:
        """
        Gets the publishedDateTime property value. The date and time when this vulnerability article was published.
        Returns: Optional[datetime]
        """
        return self._published_date_time
    
    @published_date_time.setter
    def published_date_time(self,value: Optional[datetime] = None) -> None:
        """
        Sets the publishedDateTime property value. The date and time when this vulnerability article was published.
        Args:
            value: Value to set for the published_date_time property.
        """
        self._published_date_time = value
    
    @property
    def references(self,) -> Optional[List[hyperlink.Hyperlink]]:
        """
        Gets the references property value. Reference links where further information can be learned about this vulnerability.
        Returns: Optional[List[hyperlink.Hyperlink]]
        """
        return self._references
    
    @references.setter
    def references(self,value: Optional[List[hyperlink.Hyperlink]] = None) -> None:
        """
        Sets the references property value. Reference links where further information can be learned about this vulnerability.
        Args:
            value: Value to set for the references property.
        """
        self._references = value
    
    @property
    def remediation(self,) -> Optional[formatted_content.FormattedContent]:
        """
        Gets the remediation property value. Any known remediation steps.
        Returns: Optional[formatted_content.FormattedContent]
        """
        return self._remediation
    
    @remediation.setter
    def remediation(self,value: Optional[formatted_content.FormattedContent] = None) -> None:
        """
        Sets the remediation property value. Any known remediation steps.
        Args:
            value: Value to set for the remediation property.
        """
        self._remediation = value
    
    def serialize(self,writer: SerializationWriter) -> None:
        """
        Serializes information the current object
        Args:
            writer: Serialization writer to use to serialize this model
        """
        if writer is None:
            raise Exception("writer cannot be undefined")
        super().serialize(writer)
        writer.write_bool_value("activeExploitsObserved", self.active_exploits_observed)
        writer.write_collection_of_object_values("articles", self.articles)
        writer.write_collection_of_primitive_values("commonWeaknessEnumerationIds", self.common_weakness_enumeration_ids)
        writer.write_collection_of_object_values("components", self.components)
        writer.write_datetime_value("createdDateTime", self.created_date_time)
        writer.write_object_value("cvss2Summary", self.cvss2_summary)
        writer.write_object_value("cvss3Summary", self.cvss3_summary)
        writer.write_object_value("description", self.description)
        writer.write_collection_of_object_values("exploits", self.exploits)
        writer.write_bool_value("exploitsAvailable", self.exploits_available)
        writer.write_bool_value("hasChatter", self.has_chatter)
        writer.write_datetime_value("lastModifiedDateTime", self.last_modified_date_time)
        writer.write_int_value("priorityScore", self.priority_score)
        writer.write_datetime_value("publishedDateTime", self.published_date_time)
        writer.write_collection_of_object_values("references", self.references)
        writer.write_object_value("remediation", self.remediation)
        writer.write_enum_value("severity", self.severity)
    
    @property
    def severity(self,) -> Optional[vulnerability_severity.VulnerabilitySeverity]:
        """
        Gets the severity property value. The severity property
        Returns: Optional[vulnerability_severity.VulnerabilitySeverity]
        """
        return self._severity
    
    @severity.setter
    def severity(self,value: Optional[vulnerability_severity.VulnerabilitySeverity] = None) -> None:
        """
        Sets the severity property value. The severity property
        Args:
            value: Value to set for the severity property.
        """
        self._severity = value
    

