from __future__ import annotations
from dataclasses import dataclass, field
from datetime import datetime
from kiota_abstractions.serialization import AdditionalDataHolder, Parsable, ParseNode, SerializationWriter
from typing import Any, Callable, Dict, List, Optional, TYPE_CHECKING, Union

if TYPE_CHECKING:
    from . import recurrence_pattern

@dataclass
class PlannerRecurrenceSchedule(AdditionalDataHolder, Parsable):
    # Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
    additional_data: Dict[str, Any] = field(default_factory=dict)

    # The next date for this schedule. When a new task is instantiated to continue the recurrence series, this date is used for the dueDateTime of the new plannerTask. Auto-generated by the service. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.
    next_occurrence_date_time: Optional[datetime] = None
    # The OdataType property
    odata_type: Optional[str] = None
    # The pattern for recurrence. Required.
    pattern: Optional[recurrence_pattern.RecurrencePattern] = None
    # The start date for the recurrence pattern. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Required.
    pattern_start_date_time: Optional[datetime] = None
    
    @staticmethod
    def create_from_discriminator_value(parse_node: Optional[ParseNode] = None) -> PlannerRecurrenceSchedule:
        """
        Creates a new instance of the appropriate class based on discriminator value
        Args:
            parseNode: The parse node to use to read the discriminator value and create the object
        Returns: PlannerRecurrenceSchedule
        """
        if parse_node is None:
            raise Exception("parse_node cannot be undefined")
        return PlannerRecurrenceSchedule()
    
    def get_field_deserializers(self,) -> Dict[str, Callable[[ParseNode], None]]:
        """
        The deserialization information for the current model
        Returns: Dict[str, Callable[[ParseNode], None]]
        """
        from . import recurrence_pattern

        fields: Dict[str, Callable[[Any], None]] = {
            "nextOccurrenceDateTime": lambda n : setattr(self, 'next_occurrence_date_time', n.get_datetime_value()),
            "@odata.type": lambda n : setattr(self, 'odata_type', n.get_str_value()),
            "pattern": lambda n : setattr(self, 'pattern', n.get_object_value(recurrence_pattern.RecurrencePattern)),
            "patternStartDateTime": lambda n : setattr(self, 'pattern_start_date_time', n.get_datetime_value()),
        }
        return fields
    
    def serialize(self,writer: SerializationWriter) -> None:
        """
        Serializes information the current object
        Args:
            writer: Serialization writer to use to serialize this model
        """
        if writer is None:
            raise Exception("writer cannot be undefined")
        writer.write_datetime_value("nextOccurrenceDateTime", self.next_occurrence_date_time)
        writer.write_str_value("@odata.type", self.odata_type)
        writer.write_object_value("pattern", self.pattern)
        writer.write_datetime_value("patternStartDateTime", self.pattern_start_date_time)
        writer.write_additional_data_value(self.additional_data)
    

