from __future__ import annotations
from collections.abc import Callable
from dataclasses import dataclass, field
from kiota_abstractions.serialization import Parsable, ParseNode, SerializationWriter
from typing import Any, Optional, TYPE_CHECKING, Union

if TYPE_CHECKING:
    from .malware_category import MalwareCategory
    from .related_resource import RelatedResource
    from .threat_severity import ThreatSeverity

from .related_resource import RelatedResource

@dataclass
class RelatedMalware(RelatedResource, Parsable):
    # The OdataType property
    odata_type: Optional[str] = "#microsoft.graph.networkaccess.relatedMalware"
    # Category of the malware. Required. The possible values are: adware, backdoor, behavior, bot, browserModifier, constructor, cryptojacking, ddos, dropper, dropperMalware, exploit, filelessMalware, hackTool, hybridMalware, joke, keylogger, misleading, monitoringTool, polymorphicMalware, passwordStealer, program, ransomware, remoteAccess, rogue, rootkit, settingsModifier, softwareBundler, spammer, spoofer, spyware, tool, trojan, trojanClicker, trojanDownloader, trojanNotifier, trojanProxy, trojanSpy, virus, wiperMalware, worm, unknownFutureValue, potentiallyUnwantedApplication, infostealer, unknown, phishing, obfuscatedMalware, coinMiner, dialer, grayware. Use the Prefer: include-unknown-enum-members request header to get the following values from this evolvable enum: potentiallyUnwantedApplication , infostealer , unknown , phishing , obfuscatedMalware , coinMiner , dialer , grayware.
    category: Optional[MalwareCategory] = None
    # Name of the malware. Required.
    name: Optional[str] = None
    # Severity of the malware. Required. The possible values are: low, medium, high, critical, unknownFutureValue.
    severity: Optional[ThreatSeverity] = None
    
    @staticmethod
    def create_from_discriminator_value(parse_node: ParseNode) -> RelatedMalware:
        """
        Creates a new instance of the appropriate class based on discriminator value
        param parse_node: The parse node to use to read the discriminator value and create the object
        Returns: RelatedMalware
        """
        if parse_node is None:
            raise TypeError("parse_node cannot be null.")
        return RelatedMalware()
    
    def get_field_deserializers(self,) -> dict[str, Callable[[ParseNode], None]]:
        """
        The deserialization information for the current model
        Returns: dict[str, Callable[[ParseNode], None]]
        """
        from .malware_category import MalwareCategory
        from .related_resource import RelatedResource
        from .threat_severity import ThreatSeverity

        from .malware_category import MalwareCategory
        from .related_resource import RelatedResource
        from .threat_severity import ThreatSeverity

        fields: dict[str, Callable[[Any], None]] = {
            "category": lambda n : setattr(self, 'category', n.get_enum_value(MalwareCategory)),
            "name": lambda n : setattr(self, 'name', n.get_str_value()),
            "severity": lambda n : setattr(self, 'severity', n.get_enum_value(ThreatSeverity)),
        }
        super_fields = super().get_field_deserializers()
        fields.update(super_fields)
        return fields
    
    def serialize(self,writer: SerializationWriter) -> None:
        """
        Serializes information the current object
        param writer: Serialization writer to use to serialize this model
        Returns: None
        """
        if writer is None:
            raise TypeError("writer cannot be null.")
        super().serialize(writer)
        writer.write_enum_value("category", self.category)
        writer.write_str_value("name", self.name)
        writer.write_enum_value("severity", self.severity)
    

