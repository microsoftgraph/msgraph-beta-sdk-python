from __future__ import annotations
import datetime
from dataclasses import dataclass, field
from kiota_abstractions.serialization import Parsable, ParseNode, SerializationWriter
from typing import Any, Callable, Dict, List, Optional, TYPE_CHECKING, Union

if TYPE_CHECKING:
    from ..entity import Entity
    from .analyzed_email_attachment import AnalyzedEmailAttachment
    from .analyzed_email_authentication_detail import AnalyzedEmailAuthenticationDetail
    from .analyzed_email_delivery_detail import AnalyzedEmailDeliveryDetail
    from .analyzed_email_exchange_transport_rule_info import AnalyzedEmailExchangeTransportRuleInfo
    from .analyzed_email_sender_detail import AnalyzedEmailSenderDetail
    from .analyzed_email_url import AnalyzedEmailUrl
    from .antispam_directionality import AntispamDirectionality
    from .threat_type import ThreatType

from ..entity import Entity

@dataclass
class AnalyzedEmail(Entity, Parsable):
    # A collection of values that contain the IDs of any alerts associated with the email.
    alert_ids: Optional[List[str]] = None
    # A collection of the attachments in the email.
    attachments: Optional[List[AnalyzedEmailAttachment]] = None
    # The number of attachments in the email.
    attachments_count: Optional[int] = None
    # The authentication details associated with the email.
    authentication_details: Optional[AnalyzedEmailAuthenticationDetail] = None
    # The bulk complaint level of the email. A higher level is more likely to be spam.
    bulk_complaint_level: Optional[str] = None
    # Provides context of the email.
    contexts: Optional[List[str]] = None
    # The methods of detection used.
    detection_methods: Optional[List[str]] = None
    # The direction of the emails. The possible values are: unknown, inbound, outbound, intraOrg, unknownFutureValue.
    directionality: Optional[AntispamDirectionality] = None
    # The distribution list details to which the email was sent.
    distribution_list: Optional[str] = None
    # The identifier for the group of similar emails clustered based on heuristic analysis of their content.
    email_cluster_id: Optional[str] = None
    # The name of the Exchange transport rules (ETRs) associated with the email.
    exchange_transport_rules: Optional[List[AnalyzedEmailExchangeTransportRuleInfo]] = None
    # A public-facing identifier for the email that is sent. The message ID is in the format specified by RFC2822.
    internet_message_id: Optional[str] = None
    # The detected language of the email content.
    language: Optional[str] = None
    # The latest delivery details of the email.
    latest_delivery: Optional[AnalyzedEmailDeliveryDetail] = None
    # Date-time when the email record was logged.
    logged_date_time: Optional[datetime.datetime] = None
    # An internal identifier for the email generated by Microsoft 365.
    network_message_id: Optional[str] = None
    # The OdataType property
    odata_type: Optional[str] = None
    # The original delivery details of the email.
    original_delivery: Optional[AnalyzedEmailDeliveryDetail] = None
    # An aggregated list of all overrides with source on email.
    override_sources: Optional[List[str]] = None
    # The phish confidence level associated with the email
    phish_confidence_level: Optional[str] = None
    # The action policy that took effect.
    policy: Optional[str] = None
    # The action taken on the email based on the configured policy.
    policy_action: Optional[str] = None
    # Contains the email address of the recipient.
    recipient_email_address: Optional[str] = None
    # A field that indicates where and how bounced emails are processed.
    return_path: Optional[str] = None
    # Sender details of the email.
    sender_detail: Optional[AnalyzedEmailSenderDetail] = None
    # Size of the email in bytes.
    size_in_bytes: Optional[int] = None
    # Spam confidence of the email.
    spam_confidence_level: Optional[str] = None
    # Subject of the email.
    subject: Optional[str] = None
    # Indicates the threat types. The possible values are: unknown, spam, malware, phish, none, unknownFutureValue.
    threat_types: Optional[List[ThreatType]] = None
    # A collection of the URLs in the email.
    urls: Optional[List[AnalyzedEmailUrl]] = None
    # The number of URLs in the email.
    urls_count: Optional[int] = None
    
    @staticmethod
    def create_from_discriminator_value(parse_node: ParseNode) -> AnalyzedEmail:
        """
        Creates a new instance of the appropriate class based on discriminator value
        param parse_node: The parse node to use to read the discriminator value and create the object
        Returns: AnalyzedEmail
        """
        if parse_node is None:
            raise TypeError("parse_node cannot be null.")
        return AnalyzedEmail()
    
    def get_field_deserializers(self,) -> Dict[str, Callable[[ParseNode], None]]:
        """
        The deserialization information for the current model
        Returns: Dict[str, Callable[[ParseNode], None]]
        """
        from ..entity import Entity
        from .analyzed_email_attachment import AnalyzedEmailAttachment
        from .analyzed_email_authentication_detail import AnalyzedEmailAuthenticationDetail
        from .analyzed_email_delivery_detail import AnalyzedEmailDeliveryDetail
        from .analyzed_email_exchange_transport_rule_info import AnalyzedEmailExchangeTransportRuleInfo
        from .analyzed_email_sender_detail import AnalyzedEmailSenderDetail
        from .analyzed_email_url import AnalyzedEmailUrl
        from .antispam_directionality import AntispamDirectionality
        from .threat_type import ThreatType

        from ..entity import Entity
        from .analyzed_email_attachment import AnalyzedEmailAttachment
        from .analyzed_email_authentication_detail import AnalyzedEmailAuthenticationDetail
        from .analyzed_email_delivery_detail import AnalyzedEmailDeliveryDetail
        from .analyzed_email_exchange_transport_rule_info import AnalyzedEmailExchangeTransportRuleInfo
        from .analyzed_email_sender_detail import AnalyzedEmailSenderDetail
        from .analyzed_email_url import AnalyzedEmailUrl
        from .antispam_directionality import AntispamDirectionality
        from .threat_type import ThreatType

        fields: Dict[str, Callable[[Any], None]] = {
            "alertIds": lambda n : setattr(self, 'alert_ids', n.get_collection_of_primitive_values(str)),
            "attachments": lambda n : setattr(self, 'attachments', n.get_collection_of_object_values(AnalyzedEmailAttachment)),
            "attachmentsCount": lambda n : setattr(self, 'attachments_count', n.get_int_value()),
            "authenticationDetails": lambda n : setattr(self, 'authentication_details', n.get_object_value(AnalyzedEmailAuthenticationDetail)),
            "bulkComplaintLevel": lambda n : setattr(self, 'bulk_complaint_level', n.get_str_value()),
            "contexts": lambda n : setattr(self, 'contexts', n.get_collection_of_primitive_values(str)),
            "detectionMethods": lambda n : setattr(self, 'detection_methods', n.get_collection_of_primitive_values(str)),
            "directionality": lambda n : setattr(self, 'directionality', n.get_enum_value(AntispamDirectionality)),
            "distributionList": lambda n : setattr(self, 'distribution_list', n.get_str_value()),
            "emailClusterId": lambda n : setattr(self, 'email_cluster_id', n.get_str_value()),
            "exchangeTransportRules": lambda n : setattr(self, 'exchange_transport_rules', n.get_collection_of_object_values(AnalyzedEmailExchangeTransportRuleInfo)),
            "internetMessageId": lambda n : setattr(self, 'internet_message_id', n.get_str_value()),
            "language": lambda n : setattr(self, 'language', n.get_str_value()),
            "latestDelivery": lambda n : setattr(self, 'latest_delivery', n.get_object_value(AnalyzedEmailDeliveryDetail)),
            "loggedDateTime": lambda n : setattr(self, 'logged_date_time', n.get_datetime_value()),
            "networkMessageId": lambda n : setattr(self, 'network_message_id', n.get_str_value()),
            "originalDelivery": lambda n : setattr(self, 'original_delivery', n.get_object_value(AnalyzedEmailDeliveryDetail)),
            "overrideSources": lambda n : setattr(self, 'override_sources', n.get_collection_of_primitive_values(str)),
            "phishConfidenceLevel": lambda n : setattr(self, 'phish_confidence_level', n.get_str_value()),
            "policy": lambda n : setattr(self, 'policy', n.get_str_value()),
            "policyAction": lambda n : setattr(self, 'policy_action', n.get_str_value()),
            "recipientEmailAddress": lambda n : setattr(self, 'recipient_email_address', n.get_str_value()),
            "returnPath": lambda n : setattr(self, 'return_path', n.get_str_value()),
            "senderDetail": lambda n : setattr(self, 'sender_detail', n.get_object_value(AnalyzedEmailSenderDetail)),
            "sizeInBytes": lambda n : setattr(self, 'size_in_bytes', n.get_int_value()),
            "spamConfidenceLevel": lambda n : setattr(self, 'spam_confidence_level', n.get_str_value()),
            "subject": lambda n : setattr(self, 'subject', n.get_str_value()),
            "threatTypes": lambda n : setattr(self, 'threat_types', n.get_collection_of_enum_values(ThreatType)),
            "urls": lambda n : setattr(self, 'urls', n.get_collection_of_object_values(AnalyzedEmailUrl)),
            "urlsCount": lambda n : setattr(self, 'urls_count', n.get_int_value()),
        }
        super_fields = super().get_field_deserializers()
        fields.update(super_fields)
        return fields
    
    def serialize(self,writer: SerializationWriter) -> None:
        """
        Serializes information the current object
        param writer: Serialization writer to use to serialize this model
        Returns: None
        """
        if writer is None:
            raise TypeError("writer cannot be null.")
        super().serialize(writer)
        from ..entity import Entity
        from .analyzed_email_attachment import AnalyzedEmailAttachment
        from .analyzed_email_authentication_detail import AnalyzedEmailAuthenticationDetail
        from .analyzed_email_delivery_detail import AnalyzedEmailDeliveryDetail
        from .analyzed_email_exchange_transport_rule_info import AnalyzedEmailExchangeTransportRuleInfo
        from .analyzed_email_sender_detail import AnalyzedEmailSenderDetail
        from .analyzed_email_url import AnalyzedEmailUrl
        from .antispam_directionality import AntispamDirectionality
        from .threat_type import ThreatType

        writer.write_collection_of_primitive_values("alertIds", self.alert_ids)
        writer.write_collection_of_object_values("attachments", self.attachments)
        writer.write_int_value("attachmentsCount", self.attachments_count)
        writer.write_object_value("authenticationDetails", self.authentication_details)
        writer.write_str_value("bulkComplaintLevel", self.bulk_complaint_level)
        writer.write_collection_of_primitive_values("contexts", self.contexts)
        writer.write_collection_of_primitive_values("detectionMethods", self.detection_methods)
        writer.write_enum_value("directionality", self.directionality)
        writer.write_str_value("distributionList", self.distribution_list)
        writer.write_str_value("emailClusterId", self.email_cluster_id)
        writer.write_collection_of_object_values("exchangeTransportRules", self.exchange_transport_rules)
        writer.write_str_value("internetMessageId", self.internet_message_id)
        writer.write_str_value("language", self.language)
        writer.write_object_value("latestDelivery", self.latest_delivery)
        writer.write_datetime_value("loggedDateTime", self.logged_date_time)
        writer.write_str_value("networkMessageId", self.network_message_id)
        writer.write_object_value("originalDelivery", self.original_delivery)
        writer.write_collection_of_primitive_values("overrideSources", self.override_sources)
        writer.write_str_value("phishConfidenceLevel", self.phish_confidence_level)
        writer.write_str_value("policy", self.policy)
        writer.write_str_value("policyAction", self.policy_action)
        writer.write_str_value("recipientEmailAddress", self.recipient_email_address)
        writer.write_str_value("returnPath", self.return_path)
        writer.write_object_value("senderDetail", self.sender_detail)
        writer.write_int_value("sizeInBytes", self.size_in_bytes)
        writer.write_str_value("spamConfidenceLevel", self.spam_confidence_level)
        writer.write_str_value("subject", self.subject)
        writer.write_collection_of_enum_values("threatTypes", self.threat_types)
        writer.write_collection_of_object_values("urls", self.urls)
        writer.write_int_value("urlsCount", self.urls_count)
    

